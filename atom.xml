<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>青山</title>
  
  <subtitle>青山の博客</subtitle>
  <link href="https://macongmc.github.io/atom.xml" rel="self"/>
  
  <link href="https://macongmc.github.io/"/>
  <updated>2023-02-06T01:50:53.000Z</updated>
  <id>https://macongmc.github.io/</id>
  
  <author>
    <name>青山</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>docker（一）</title>
    <link href="https://macongmc.github.io/posts/f255ffad.html"/>
    <id>https://macongmc.github.io/posts/f255ffad.html</id>
    <published>2023-02-06T01:50:53.000Z</published>
    <updated>2023-02-06T01:50:53.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一-docker-安装并启动"><a href="#一-docker-安装并启动" class="headerlink" title="一. docker 安装并启动"></a>一. docker 安装并启动</h2><h3 id="1-1-CentOS安装Docker"><a href="#1-1-CentOS安装Docker" class="headerlink" title="1.1 CentOS安装Docker"></a>1.1 CentOS安装Docker</h3><p>如果yum更新显示</p><pre class="line-numbers language-none"><code class="language-none">Another app is currently holding the yum lock; waiting for it to exit...<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>则删除案例重新更新</p><pre class="line-numbers language-none"><code class="language-none">rm -f /var/run/yum.pid<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用yum安装</p><pre class="line-numbers language-none"><code class="language-none"># 安装yum工具[root@localhost ~]# yum install -y yum-utils \           device-mapper-persistent-data \           lvm2 --skip-broken# 设置docker镜像源[root@localhost ~]#yum-config-manager \    --add-repo \    https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo    sed -i 's/download.docker.com/mirrors.aliyun.com\/docker-ce/g' /etc/yum.repos.d/docker-ce.repo[root@localhost ~]#yum makecache fast#  安装docker[root@localhost ~]yum install -y docker-ce# 关闭[root@localhost ~]systemctl stop firewalld# 禁止开机启动防火墙[root@localhost ~]systemctl disable firewalld#查看是否关闭防火墙[root@localhost ~]systemctl status firewalld[root@localhost ~]# docker info# 启动docker、设置开机自启[root@localhost ~]# systemctl start docker[root@localhost ~]# systemctl enable docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>设置镜像</p><pre class="line-numbers language-none"><code class="language-none">yum-config-manager \    --add-repo \    https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo    sed -i 's/download.docker.com/mirrors.aliyun.com\/docker-ce/g' /etc/yum.repos.d/docker-ce.repoyum makecache fast<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2配置镜像加速"><a href="#1-2配置镜像加速" class="headerlink" title="1.2配置镜像加速"></a>1.2配置镜像加速</h3><p>创建文件夹</p><pre class="line-numbers language-none"><code class="language-none">sudo mkdir -p /etc/docker<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输入</p><pre class="line-numbers language-none"><code class="language-none">&gt; ##在文件夹内新建一个daemon.json文件sudo tee /etc/docker/daemon.json &lt;&lt;-'EOF'{  "registry-mirrors": ["https://akchsmlh.mirror.aliyuncs.com"]}EOF<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重新加载文件</p><pre class="line-numbers language-none"><code class="language-none">sudo systemctl daemon-reload<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>重启docker</p><pre class="line-numbers language-none"><code class="language-none">sudo systemctl restart docker<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="二-镜像常用命令"><a href="#二-镜像常用命令" class="headerlink" title="二. 镜像常用命令"></a>二. 镜像常用命令</h2><h3 id="2-1使用语法和参数"><a href="#2-1使用语法和参数" class="headerlink" title="2.1使用语法和参数"></a>2.1使用语法和参数</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# docker image --helpUsage:  docker image COMMANDManage imagesOptions:      --help   Print usageCommands:  build       从Dockerfile构建映像  history     显示image的历史  import      从压缩文件中导入内容以创建文件系统映像  inspect     显示一个或多个image的详细信息  load        从tar存档文件或STDIN加载映像  ls          image列表  prune       删除未使用的image  pull        从注册表中提取映像或存储库  push        将映像或存储库推入注册表  rm          删除一个或多个image  save        保存一个或多个image到tar存档(默认流到STDOUT)  tag         创建指向SOURCE_IMAGE的标签TARGET_IMAGE<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2列表-a列出所有镜像"><a href="#2-2列表-a列出所有镜像" class="headerlink" title="2.2列表 -a列出所有镜像"></a>2.2列表 -a列出所有镜像</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# docker image ls -a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-3删除镜像-f"><a href="#2-3删除镜像-f" class="headerlink" title="2.3删除镜像-f"></a>2.3删除镜像-f</h3><pre class="line-numbers language-none"><code class="language-none">root@localhost ~]# docker imagesREPOSITORY          TAG                 IMAGE ID            CREATED             SIZEcentos-7            latest              7e989e1e46e7        2 weeks ago         380 MB[root@localhost ~]# docker image rm -f 7e989[root@base ~]# docker rmi b692<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-4dockerfile构建镜像"><a href="#2-4dockerfile构建镜像" class="headerlink" title="2.4dockerfile构建镜像"></a>2.4dockerfile构建镜像</h3><pre class="line-numbers language-none"><code class="language-none">Usage:  docker image build [OPTIONS] PATH | URL | -Build an image from a DockerfileOptions:      --build-arg list             设置构建时变量(默认[])      --cache-from stringSlice     将镜像视为缓存源      --cgroup-parent string       可选父容器cgroup      --compress                   使用gzip压缩构建上下文      --cpu-period int             限制CPU CFS(完全公平调度程序)周期      --cpu-quota int              限制CPU CFS(完全公平调度程序)配额  -c, --cpu-shares int             CPU份额(相对权重)      --cpuset-cpus string         允许执行的cpu(0-3、0、1)      --cpuset-mems string         允许执行的MEMs (0- 3,0,1)      --disable-content-trust      跳过图像验证(默认为true)  -f, --file string                Dockerfile的名称(默认为'PATH/Dockerfile')      --force-rm                   总是删除中间容器      --help                       Print usage      --isolation string           容器隔离技术      --label list                 设置image的元数据(默认[])  -m, --memory string              内存限制      --memory-swap string         交换限制等于内存加上交换:'-1'来启用无限交换      --network string             在构建期间为RUN指令设置网络模式(默认为"default")      --no-cache                   在构建映像时不使用缓存      --pull                       总是尝试拉出更新版本的image  -q, --quiet                      关闭构建输出并在成功时打印image ID      --rm                         在成功构建后移除中间容器(默认为true)      --security-opt stringSlice   安全选项      --shm-size string            “/dev/shm”的大小，默认为64MB  -t, --tag list                   以' Name:tag'格式命名和可选的标记(default [])      --ulimit ulimit              Ulimit选项(默认[])  -v, --volume list                设置构建时绑定挂载(默认[])<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>构建一个带有openssh-server的容器镜像</p><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# cat DockerfileFROM centos:7RUN yum install -y openssh-server sudoRUN sed -i 's/UsePAM yes/UsePAM no/g' /etc/ssh/sshd_config#RUN useradd admin#RUN echo "admin:admin" | chpasswdRUN echo "root:123456" | chpasswd#RUN echo "admin  ALL=(ALL)    ALL" &gt;&gt; /etc/sudoersRUN ssh-keygen -t dsa -f /etc/ssh/ssh_host_dsa_keyRUN ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_keyRUN mkdir /var/run/sshdEXPOSE 22CMD ["/usr/sbin/sshd", "-D"][root@localhost ~]# docker build -t ssh-server .<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-5创建容器-docker-run"><a href="#2-5创建容器-docker-run" class="headerlink" title="2.5创建容器 docker run"></a>2.5创建容器 docker run</h3><pre class="line-numbers language-none"><code class="language-none">Usage: docker run [OPTIONS] IMAGE [COMMAND] [ARG...]    03.  -d, --detach=false         指定容器运行于前台还是后台，默认为false     04.  -i, --interactive=false   打开STDIN，用于控制台交互    05.  -t, --tty=false            分配tty设备，该可以支持终端登录，默认为false    06.  -u, --user=""              指定容器的用户    07.  -a, --attach=[]            登录容器（必须是以docker run -d启动的容器）  08.  -w, --workdir=""           指定容器的工作目录   09.  -c, --cpu-shares=0        设置容器CPU权重，在CPU共享场景使用    10.  -e, --env=[]               指定环境变量，容器中可以使用该环境变量    11.  -m, --memory=""            指定容器的内存上限    12.  -P, --publish-all=false    指定容器暴露的端口    13.  -p, --publish=[]           指定容器暴露的端口   14.  -h, --hostname=""          指定容器的主机名    15.  -v, --volume=[]            给容器挂载存储卷，挂载到容器的某个目录    16.  --volumes-from=[]          给容器挂载其他容器上的卷，挂载到容器的某个目录  17.  --cap-add=[]               添加权限，权限清单详见：http://linux.die.net/man/7/capabilities    18.  --cap-drop=[]              删除权限，权限清单详见：http://linux.die.net/man/7/capabilities    19.  --cidfile=""               运行容器后，在指定文件中写入容器PID值，一种典型的监控系统用法    20.  --cpuset=""                设置容器可以使用哪些CPU，此参数可以用来容器独占CPU    21.  --device=[]                添加主机设备给容器，相当于设备直通    22.  --dns=[]                   指定容器的dns服务器    23.  --dns-search=[]            指定容器的dns搜索域名，写入到容器的/etc/resolv.conf文件    24.  --entrypoint=""            覆盖image的入口点    25.  --env-file=[]              指定环境变量文件，文件格式为每行一个环境变量    26.  --expose=[]                指定容器暴露的端口，即修改镜像的暴露端口    27.  --link=[]                  指定容器间的关联，使用其他容器的IP、env等信息    28.  --lxc-conf=[]              指定容器的配置文件，只有在指定--exec-driver=lxc时使用    29.  --name=""                  指定容器名字，后续可以通过名字进行容器管理，links特性需要使用名字    30.  --net="bridge"             容器网络设置:  31.                                bridge 使用docker daemon指定的网桥       32.                                host    //容器使用主机的网络    33.                                container:NAME_or_ID  &gt;//使用其他容器的网路，共享IP和PORT等网络资源    34.                                none 容器使用自己的网络（类似--net=bridge），但是不进行配置   35.  --privileged=false         指定容器是否为特权容器，特权容器拥有所有的capabilities    36.  --restart="no"             指定容器停止后的重启策略:  37.                                no：容器退出时不重启    38.                                on-failure：容器故障退出（返回值非零）时重启   39.                                always：容器退出时总是重启    40.  --rm=false                 指定容器停止后自动删除容器(不支持以docker run -d启动的容器)    41.  --sig-proxy=true           设置由代理接受并处理信号，但是SIGCHLD、SIGSTOP和SIGKILL不能被代理    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-6进入容器"><a href="#2-6进入容器" class="headerlink" title="2.6进入容器"></a>2.6进入容器</h3><pre class="line-numbers language-none"><code class="language-none">docker exec -it cd35b32c8c15 /bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="三-docker-安装tomcat"><a href="#三-docker-安装tomcat" class="headerlink" title="三. docker 安装tomcat"></a>三. docker 安装tomcat</h2><pre class="line-numbers language-none"><code class="language-none"># 查看镜像docker search tomcat# 默认最新docker pull tomcat# 指定版本docker pull tomcat:[tag]# 如拉取 tomcat 8docker pull tomcat:8# 运行docker run -d -p 8080:8080 --name tomcat1 tomcat:8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试</p><img src="/posts/f255ffad/image-20230206105959687.png" class="" title="image-20230206105959687"><p>进入容器</p><pre class="line-numbers language-none"><code class="language-none">docker exec -it cd35b32c8c15 /bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/posts/f255ffad/image-20230206110619856.png" class="" title="image-20230206110619856"><p>再次刷新</p><img src="/posts/f255ffad/image-20230206110632273.png" class="" title="image-20230206110632273"><h2 id="四-安装mysql"><a href="#四-安装mysql" class="headerlink" title="四. 安装mysql"></a>四. 安装mysql</h2><p>拉取镜像</p><pre class="line-numbers language-none"><code class="language-none">docker pull mysql:5.7<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>run</p><pre class="line-numbers language-none"><code class="language-none">docker run --name mysql --restart=always -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 -d mysql <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/posts/f255ffad/image-20230207170207221.png" class="" title="image-20230207170207221"><h2 id="五-安装redis"><a href="#五-安装redis" class="headerlink" title="五. 安装redis"></a>五. 安装redis</h2><p>拉取镜像</p><pre class="line-numbers language-none"><code class="language-none">docker pull redis<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>run</p><pre class="line-numbers language-none"><code class="language-none">docker run --name redis  --restart=always -p 6379:6379 -d redis --requirepass "123456" //启动Redis<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/posts/f255ffad/image-20230207170616163.png" class="" title="image-20230207170616163"><h2 id="六-安装minio"><a href="#六-安装minio" class="headerlink" title="六. 安装minio"></a>六. 安装minio</h2><p>拉取</p><pre class="line-numbers language-none"><code class="language-none">docker pull minio/minio<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>run</p><pre class="line-numbers language-none"><code class="language-none">docker run -p 9000:9000 -p 9090:9090 \ --name minio \ -d --restart=always \ -e "MINIO_ACCESS_KEY=minioadmin" \ -e "MINIO_SECRET_KEY=minioadmin" \ -v /mydata/minio/data:/data \ minio/minio server \ /data --console-address ":9090" -address ":9000"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/posts/f255ffad/image-20230208153503501.png" class="" title="image-20230208153503501"><h2 id="七-安装ES和kibana"><a href="#七-安装ES和kibana" class="headerlink" title="七. 安装ES和kibana"></a>七. 安装ES和kibana</h2><p>拉取</p><pre class="line-numbers language-none"><code class="language-none">docker pull elasticsearch:7.2.0docker pull kibana:7.2.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>run</p><pre class="line-numbers language-none"><code class="language-none">docker run --name elasticsearch --restart always -p 9200:9200 -p 9300:9300 -e "discovery.type=single-node" -e ES_JAVA_OPTS="-Xms200M -Xmx200M" -d elasticsearch:7.2.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/posts/f255ffad/image-20230208153930793.png" class="" title="image-20230208153930793"><p>解决es跨域问题</p><pre class="line-numbers language-none"><code class="language-none">docker exec -it elasticsearch /bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">vi config/elasticsearch.yml添加http.cors.enabled: truehttp.cors.allow-origin: "*"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>安装ik分词器</p><pre class="line-numbers language-none"><code class="language-none">./bin/elasticsearch-plugin install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.2.0/elasticsearch-analysis-ik-7.2.0.zip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>重启</p><pre class="line-numbers language-none"><code class="language-none">docker restart elasticsearch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>测试</p><pre class="line-numbers language-none"><code class="language-none">http://192.168.200.142:9200/_analyze<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">{  "analyzer": "ik_smart",  "text": "我是中国人"}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>结果</p><pre class="line-numbers language-none"><code class="language-none">{    "tokens": [        {            "token": "我",            "start_offset": 0,            "end_offset": 1,            "type": "CN_CHAR",            "position": 0        },        {            "token": "是",            "start_offset": 1,            "end_offset": 2,            "type": "CN_CHAR",            "position": 1        },        {            "token": "中国人",            "start_offset": 2,            "end_offset": 5,            "type": "CN_WORD",            "position": 2        }    ]}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>run</p><pre class="line-numbers language-none"><code class="language-none">docker run --name kibana -e ELASTICSEARCH_URL=http://192.168.200.142:9200 -p 5601:5601 -d kibana:7.2.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改</p><pre class="line-numbers language-none"><code class="language-none">docker exec -it kibana /bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">vi /config/kibana.yml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>重启</p><pre class="line-numbers language-none"><code class="language-none">docker restart kibana<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/posts/f255ffad/image-20230208155641119.png" class="" title="image-20230208155641119">]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="docker" scheme="https://macongmc.github.io/categories/docker/"/>
    
    
    <category term="容器" scheme="https://macongmc.github.io/tags/%E5%AE%B9%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Linux</title>
    <link href="https://macongmc.github.io/posts/53d0684b.html"/>
    <id>https://macongmc.github.io/posts/53d0684b.html</id>
    <published>2023-01-10T06:42:39.000Z</published>
    <updated>2023-01-10T06:42:39.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="linux入门"><a href="#linux入门" class="headerlink" title="linux入门"></a>linux入门</h1><h2 id="一-linux固定ip"><a href="#一-linux固定ip" class="headerlink" title="一. linux固定ip"></a>一. linux固定ip</h2><h3 id="进入配置页面"><a href="#进入配置页面" class="headerlink" title="进入配置页面"></a>进入配置页面</h3><pre class="line-numbers language-none"><code class="language-none">vim /etc/sysconfig/network-scripts/ifcfg-ens33<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>配置样例</p><pre class="line-numbers language-none"><code class="language-none">TYPE="Ethernet"PROXY_METHOD="none"BROWSER_ONLY="no"BOOTPROTO="static"DEFROUTE="yes"IPV4_FAILURE_FATAL="no"IPV6INIT="yes"IPV6_AUTOCONF="yes"IPV6_DEFROUTE="yes"IPV6_FAILURE_FATAL="no"IPV6_ADDR_GEN_MODE="stable-privacy"NAME="ens33"UUID="a47452cd-f124-445e-a700-77863a40c560"DEVICE="ens33"ONBOOT="yes"IPADDR="192.168.200.141"NETMAST="255.255.255.0"GATEWAY="192.168.200.2"DNS1="8.8.8.8"DNS2="114.114.114.114"PEERDNS="no"ZONE=public<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重启网卡</p><pre class="line-numbers language-none"><code class="language-none">service network restart <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="二-常用命令"><a href="#二-常用命令" class="headerlink" title="二. 常用命令"></a>二. 常用命令</h2><pre class="line-numbers language-none"><code class="language-none">ll  查看文件列表ll -lrt 文件列表按时间排序grep -rl ERROR 查看错误日志view 查看日志shift +G 到最后一页Ctrl + f：向下翻页快捷键(下一页)Ctrl + b：向上翻页快捷键(上一页)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关闭防火墙</p><pre class="line-numbers language-none"><code class="language-none"># 关闭systemctl stop firewalld# 禁止开机启动防火墙systemctl disable firewalld#查看是否关闭防火墙systemctl status firewalld<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">grep -rl 交易日期不能为空<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Linux" scheme="https://macongmc.github.io/categories/Linux/"/>
    
    
    <category term="linux" scheme="https://macongmc.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>elasticsearch</title>
    <link href="https://macongmc.github.io/posts/60537c10.html"/>
    <id>https://macongmc.github.io/posts/60537c10.html</id>
    <published>2022-09-21T12:21:25.000Z</published>
    <updated>2022-09-21T12:21:25.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="安装elasticsearch"><a href="#安装elasticsearch" class="headerlink" title="安装elasticsearch"></a>安装elasticsearch</h2><p>Github地址<a href="https://github.com/Macongmc/hotel-demo.git">https://github.com/Macongmc/hotel-demo.git</a></p><h2 id="1-部署单点es"><a href="#1-部署单点es" class="headerlink" title="1.部署单点es"></a>1.部署单点es</h2><h3 id="1-1-创建网络"><a href="#1-1-创建网络" class="headerlink" title="1.1.创建网络"></a>1.1.创建网络</h3><p>因为我们还需要部署kibana容器，因此需要让es和kibana容器互联。这里先创建一个网络：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">docker network create es-net<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-2-加载镜像"><a href="#1-2-加载镜像" class="headerlink" title="1.2.加载镜像"></a>1.2.加载镜像</h3><p>这里我们采用elasticsearch的7.12.1版本的镜像，这个镜像体积非常大，接近1G。不建议大家自己pull。</p><p>课前资料提供了镜像的tar包：</p><img src="/posts/60537c10/image-20210510165308064-16640759421571.png" class="" title="image-20210510165308064"><p>大家将其上传到虚拟机中，然后运行命令加载即可：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"># 导入数据docker load -i es.tar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>同理还有<code>kibana</code>的tar包也需要这样做。</p><h3 id="1-3-运行"><a href="#1-3-运行" class="headerlink" title="1.3.运行"></a>1.3.运行</h3><p>运行docker命令，部署单点es：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">docker run -d \--name es \    -e "ES_JAVA_OPTS=-Xms512m -Xmx512m" \    -e "discovery.type=single-node" \    -v es-data:/usr/share/elasticsearch/data \    -v es-plugins:/usr/share/elasticsearch/plugins \    --privileged \    --network es-net \    -p 9200:9200 \    -p 9300:9300 \elasticsearch:7.12.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>命令解释：</p><ul><li><code>-e "cluster.name=es-docker-cluster"</code>：设置集群名称</li><li><code>-e "http.host=0.0.0.0"</code>：监听的地址，可以外网访问</li><li><code>-e "ES_JAVA_OPTS=-Xms512m -Xmx512m"</code>：内存大小</li><li><code>-e "discovery.type=single-node"</code>：非集群模式</li><li><code>-v es-data:/usr/share/elasticsearch/data</code>：挂载逻辑卷，绑定es的数据目录</li><li><code>-v es-logs:/usr/share/elasticsearch/logs</code>：挂载逻辑卷，绑定es的日志目录</li><li><code>-v es-plugins:/usr/share/elasticsearch/plugins</code>：挂载逻辑卷，绑定es的插件目录</li><li><code>--privileged</code>：授予逻辑卷访问权</li><li><code>--network es-net</code> ：加入一个名为es-net的网络中</li><li><code>-p 9200:9200</code>：端口映射配置</li></ul><p>在浏览器中输入：<a href="http://192.168.150.101:9200/">http://192.168.150.101:9200</a> 即可看到elasticsearch的响应结果：</p><img src="/posts/60537c10/image-20210506101053676-16640759421572.png" class="" title="image-20210506101053676"><h2 id="2-部署kibana"><a href="#2-部署kibana" class="headerlink" title="2.部署kibana"></a>2.部署kibana</h2><p>kibana可以给我们提供一个elasticsearch的可视化界面，便于我们学习。</p><h3 id="2-1-部署"><a href="#2-1-部署" class="headerlink" title="2.1.部署"></a>2.1.部署</h3><p>运行docker命令，部署kibana</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">docker run -d \--name kibana \-e ELASTICSEARCH_HOSTS=http://192.168.200.141:9200 \--network=es-net \-p 5601:5601  \kibana:7.12.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>--network es-net</code> ：加入一个名为es-net的网络中，与elasticsearch在同一个网络中</li><li><code>-e ELASTICSEARCH_HOSTS=http://es:9200"</code>：设置elasticsearch的地址，因为kibana已经与elasticsearch在一个网络，因此可以用容器名直接访问elasticsearch</li><li><code>-p 5601:5601</code>：端口映射配置</li></ul><p>kibana启动一般比较慢，需要多等待一会，可以通过命令：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">docker logs -f kibana<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看运行日志，当查看到下面的日志，说明成功：</p><img src="/posts/60537c10/image-20210109105135812.png" class="" title="image-20210109105135812"><p>此时，在浏览器输入地址访问：<a href="http://192.168.150.101:5601，即可看到结果">http://192.168.150.101:5601，即可看到结果</a></p><h3 id="2-2-DevTools"><a href="#2-2-DevTools" class="headerlink" title="2.2.DevTools"></a>2.2.DevTools</h3><p>kibana中提供了一个DevTools界面：</p><img src="/posts/60537c10/image-20210506102630393.png" class="" title="image-20210506102630393"><p>这个界面中可以编写DSL来操作elasticsearch。并且对DSL语句有自动补全功能。</p><h2 id="3-安装IK分词器"><a href="#3-安装IK分词器" class="headerlink" title="3.安装IK分词器"></a>3.安装IK分词器</h2><h3 id="3-1-在线安装ik插件（较慢）"><a href="#3-1-在线安装ik插件（较慢）" class="headerlink" title="3.1.在线安装ik插件（较慢）"></a>3.1.在线安装ik插件（较慢）</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 进入容器内部docker exec -it elasticsearch /bin/bash# 在线下载并安装./bin/elasticsearch-plugin  install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.12.1/elasticsearch-analysis-ik-7.12.1.zip#退出exit#重启容器docker restart elasticsearch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-离线安装ik插件（推荐）"><a href="#3-2-离线安装ik插件（推荐）" class="headerlink" title="3.2.离线安装ik插件（推荐）"></a>3.2.离线安装ik插件（推荐）</h3><h3 id="1）查看数据卷目录"><a href="#1）查看数据卷目录" class="headerlink" title="1）查看数据卷目录"></a>1）查看数据卷目录</h3><p>安装插件需要知道elasticsearch的plugins目录位置，而我们用了数据卷挂载，因此需要查看elasticsearch的数据卷目录，通过下面命令查看:</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">docker volume inspect es-plugins<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>显示结果：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">[</span>    <span class="token punctuation">{</span>        <span class="token property">"CreatedAt"</span><span class="token operator">:</span> <span class="token string">"2022-05-06T10:06:34+08:00"</span><span class="token punctuation">,</span>        <span class="token property">"Driver"</span><span class="token operator">:</span> <span class="token string">"local"</span><span class="token punctuation">,</span>        <span class="token property">"Labels"</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>        <span class="token property">"Mountpoint"</span><span class="token operator">:</span> <span class="token string">"/var/lib/docker/volumes/es-plugins/_data"</span><span class="token punctuation">,</span>        <span class="token property">"Name"</span><span class="token operator">:</span> <span class="token string">"es-plugins"</span><span class="token punctuation">,</span>        <span class="token property">"Options"</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>        <span class="token property">"Scope"</span><span class="token operator">:</span> <span class="token string">"local"</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>说明plugins目录被挂载到了：<code>/var/lib/docker/volumes/es-plugins/_data </code>这个目录中。</p><h3 id="2）解压缩分词器安装包"><a href="#2）解压缩分词器安装包" class="headerlink" title="2）解压缩分词器安装包"></a>2）解压缩分词器安装包</h3><p>下面我们需要把课前资料中的ik分词器解压缩，重命名为ik</p><img src="/posts/60537c10/image-20210506110249144.png" class="" title="image-20210506110249144"><h3 id="3）上传到es容器的插件数据卷中"><a href="#3）上传到es容器的插件数据卷中" class="headerlink" title="3）上传到es容器的插件数据卷中"></a>3）上传到es容器的插件数据卷中</h3><p>也就是<code>/var/lib/docker/volumes/es-plugins/_data </code>：</p><img src="/posts/60537c10/image-20210506110704293.png" class="" title="image-20210506110704293"><h3 id="4）重启容器"><a href="#4）重启容器" class="headerlink" title="4）重启容器"></a>4）重启容器</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 4、重启容器docker restart es<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"># 查看es日志docker logs -f es<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="5）测试："><a href="#5）测试：" class="headerlink" title="5）测试："></a>5）测试：</h3><p>IK分词器包含两种模式：</p><ul><li><p><code>ik_smart</code>：最少切分</p></li><li><p><code>ik_max_word</code>：最细切分</p></li></ul><pre class="line-numbers language-json" data-language="json"><code class="language-json">GET /_analyze<span class="token punctuation">{</span>  <span class="token property">"analyzer"</span><span class="token operator">:</span> <span class="token string">"ik_max_word"</span><span class="token punctuation">,</span>  <span class="token property">"text"</span><span class="token operator">:</span> <span class="token string">"黑马程序员学习java太棒了"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"tokens"</span> <span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      <span class="token property">"token"</span> <span class="token operator">:</span> <span class="token string">"黑马"</span><span class="token punctuation">,</span>      <span class="token property">"start_offset"</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>      <span class="token property">"end_offset"</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>      <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"CN_WORD"</span><span class="token punctuation">,</span>      <span class="token property">"position"</span> <span class="token operator">:</span> <span class="token number">0</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token property">"token"</span> <span class="token operator">:</span> <span class="token string">"程序员"</span><span class="token punctuation">,</span>      <span class="token property">"start_offset"</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>      <span class="token property">"end_offset"</span> <span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>      <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"CN_WORD"</span><span class="token punctuation">,</span>      <span class="token property">"position"</span> <span class="token operator">:</span> <span class="token number">1</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token property">"token"</span> <span class="token operator">:</span> <span class="token string">"程序"</span><span class="token punctuation">,</span>      <span class="token property">"start_offset"</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>      <span class="token property">"end_offset"</span> <span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>      <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"CN_WORD"</span><span class="token punctuation">,</span>      <span class="token property">"position"</span> <span class="token operator">:</span> <span class="token number">2</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token property">"token"</span> <span class="token operator">:</span> <span class="token string">"员"</span><span class="token punctuation">,</span>      <span class="token property">"start_offset"</span> <span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>      <span class="token property">"end_offset"</span> <span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>      <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"CN_CHAR"</span><span class="token punctuation">,</span>      <span class="token property">"position"</span> <span class="token operator">:</span> <span class="token number">3</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token property">"token"</span> <span class="token operator">:</span> <span class="token string">"学习"</span><span class="token punctuation">,</span>      <span class="token property">"start_offset"</span> <span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>      <span class="token property">"end_offset"</span> <span class="token operator">:</span> <span class="token number">7</span><span class="token punctuation">,</span>      <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"CN_WORD"</span><span class="token punctuation">,</span>      <span class="token property">"position"</span> <span class="token operator">:</span> <span class="token number">4</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token property">"token"</span> <span class="token operator">:</span> <span class="token string">"java"</span><span class="token punctuation">,</span>      <span class="token property">"start_offset"</span> <span class="token operator">:</span> <span class="token number">7</span><span class="token punctuation">,</span>      <span class="token property">"end_offset"</span> <span class="token operator">:</span> <span class="token number">11</span><span class="token punctuation">,</span>      <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"ENGLISH"</span><span class="token punctuation">,</span>      <span class="token property">"position"</span> <span class="token operator">:</span> <span class="token number">5</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token property">"token"</span> <span class="token operator">:</span> <span class="token string">"太棒了"</span><span class="token punctuation">,</span>      <span class="token property">"start_offset"</span> <span class="token operator">:</span> <span class="token number">11</span><span class="token punctuation">,</span>      <span class="token property">"end_offset"</span> <span class="token operator">:</span> <span class="token number">14</span><span class="token punctuation">,</span>      <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"CN_WORD"</span><span class="token punctuation">,</span>      <span class="token property">"position"</span> <span class="token operator">:</span> <span class="token number">6</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token property">"token"</span> <span class="token operator">:</span> <span class="token string">"太棒"</span><span class="token punctuation">,</span>      <span class="token property">"start_offset"</span> <span class="token operator">:</span> <span class="token number">11</span><span class="token punctuation">,</span>      <span class="token property">"end_offset"</span> <span class="token operator">:</span> <span class="token number">13</span><span class="token punctuation">,</span>      <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"CN_WORD"</span><span class="token punctuation">,</span>      <span class="token property">"position"</span> <span class="token operator">:</span> <span class="token number">7</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token property">"token"</span> <span class="token operator">:</span> <span class="token string">"了"</span><span class="token punctuation">,</span>      <span class="token property">"start_offset"</span> <span class="token operator">:</span> <span class="token number">13</span><span class="token punctuation">,</span>      <span class="token property">"end_offset"</span> <span class="token operator">:</span> <span class="token number">14</span><span class="token punctuation">,</span>      <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"CN_CHAR"</span><span class="token punctuation">,</span>      <span class="token property">"position"</span> <span class="token operator">:</span> <span class="token number">8</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-扩展词词典"><a href="#3-3-扩展词词典" class="headerlink" title="3.3 扩展词词典"></a>3.3 扩展词词典</h3><p>随着互联网的发展，“造词运动”也越发的频繁。出现了很多新的词语，在原有的词汇列表中并不存在。比如：“奥力给”，“传智播客” 等。</p><p>所以我们的词汇也需要不断的更新，IK分词器提供了扩展词汇的功能。</p><p>1）打开IK分词器config目录：</p><img src="/posts/60537c10/image-20210506112225508.png" class="" title="image-20210506112225508"><p>2）在IKAnalyzer.cfg.xml配置文件内容添加：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">properties</span> <span class="token name">SYSTEM</span> <span class="token string">"http://java.sun.com/dtd/properties.dtd"</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>comment</span><span class="token punctuation">&gt;</span></span>IK Analyzer 扩展配置<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>comment</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--用户可以在这里配置自己的扩展字典 *** 添加扩展词典--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ext_dict<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>ext.dic<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entry</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3）新建一个 ext.dic，可以参考config目录下复制一个配置文件进行修改</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties">传智播客奥力给<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>4）重启elasticsearch </p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">docker restart es# 查看 日志docker logs -f elasticsearch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><img src="/posts/60537c10/image-20201115230900504.png" class="" title="image-20201115230900504"><p>日志中已经成功加载ext.dic配置文件</p><p>5）测试效果：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">GET /_analyze<span class="token punctuation">{</span>  <span class="token property">"analyzer"</span><span class="token operator">:</span> <span class="token string">"ik_max_word"</span><span class="token punctuation">,</span>  <span class="token property">"text"</span><span class="token operator">:</span> <span class="token string">"传智播客Java就业超过90%,奥力给！"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意当前文件的编码必须是 UTF-8 格式，严禁使用Windows记事本编辑</p></blockquote><h3 id="3-4-停用词词典"><a href="#3-4-停用词词典" class="headerlink" title="3.4 停用词词典"></a>3.4 停用词词典</h3><p>在互联网项目中，在网络间传输的速度很快，所以很多语言是不允许在网络上传递的，如：关于宗教、政治等敏感词语，那么我们在搜索时也应该忽略当前词汇。</p><p>IK分词器也提供了强大的停用词功能，让我们在索引时就直接忽略当前的停用词汇表中的内容。</p><p>1）IKAnalyzer.cfg.xml配置文件内容添加：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">properties</span> <span class="token name">SYSTEM</span> <span class="token string">"http://java.sun.com/dtd/properties.dtd"</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>comment</span><span class="token punctuation">&gt;</span></span>IK Analyzer 扩展配置<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>comment</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--用户可以在这里配置自己的扩展字典--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ext_dict<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>ext.dic<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entry</span><span class="token punctuation">&gt;</span></span>         <span class="token comment">&lt;!--用户可以在这里配置自己的扩展停止词字典  *** 添加停用词词典--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ext_stopwords<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>stopword.dic<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entry</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3）在 stopword.dic 添加停用词</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties">习大大<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4）重启elasticsearch </p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"># 重启服务docker restart elasticsearchdocker restart kibana# 查看 日志docker logs -f elasticsearch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>日志中已经成功加载stopword.dic配置文件</p><p>5）测试效果：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">GET /_analyze<span class="token punctuation">{</span>  <span class="token property">"analyzer"</span><span class="token operator">:</span> <span class="token string">"ik_max_word"</span><span class="token punctuation">,</span>  <span class="token property">"text"</span><span class="token operator">:</span> <span class="token string">"传智播客Java就业率超过95%,习大大都点赞,奥力给！"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意当前文件的编码必须是 UTF-8 格式，严禁使用Windows记事本编辑</p></blockquote><h2 id="4-部署es集群"><a href="#4-部署es集群" class="headerlink" title="4.部署es集群"></a>4.部署es集群</h2><p>部署es集群可以直接使用docker-compose来完成，不过要求你的Linux虚拟机至少有<strong>4G</strong>的内存空间</p><p>首先编写一个docker-compose文件，内容如下：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">version: '2.2'services:  es01:    image: docker.elastic.co/elasticsearch/elasticsearch:7.12.1    container_name: es01    environment:      - node.name=es01      - cluster.name=es-docker-cluster      - discovery.seed_hosts=es02,es03      - cluster.initial_master_nodes=es01,es02,es03      - bootstrap.memory_lock=true      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"    ulimits:      memlock:        soft: -1        hard: -1    volumes:      - data01:/usr/share/elasticsearch/data    ports:      - 9200:9200    networks:      - elastic  es02:    image: docker.elastic.co/elasticsearch/elasticsearch:7.12.1    container_name: es02    environment:      - node.name=es02      - cluster.name=es-docker-cluster      - discovery.seed_hosts=es01,es03      - cluster.initial_master_nodes=es01,es02,es03      - bootstrap.memory_lock=true      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"    ulimits:      memlock:        soft: -1        hard: -1    volumes:      - data02:/usr/share/elasticsearch/data    networks:      - elastic  es03:    image: docker.elastic.co/elasticsearch/elasticsearch:7.12.1    container_name: es03    environment:      - node.name=es03      - cluster.name=es-docker-cluster      - discovery.seed_hosts=es01,es02      - cluster.initial_master_nodes=es01,es02,es03      - bootstrap.memory_lock=true      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"    ulimits:      memlock:        soft: -1        hard: -1    volumes:      - data03:/usr/share/elasticsearch/data    networks:      - elasticvolumes:  data01:    driver: local  data02:    driver: local  data03:    driver: localnetworks:  elastic:    driver: bridge<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Run <code>docker-compose</code> to bring up the cluster:</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">docker-compose up<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="5-RestAPI"><a href="#5-RestAPI" class="headerlink" title="5.RestAPI"></a>5.RestAPI</h2><h3 id="1-创建索引库"><a href="#1-创建索引库" class="headerlink" title="1.创建索引库"></a>1.创建索引库</h3><p>代码分为三步：</p><ul><li>1）创建Request对象。因为是创建索引库的操作，因此Request是CreateIndexRequest。</li><li>2）添加请求参数，其实就是DSL的JSON参数部分。因为json字符串很长，这里是定义了静态字符串常量MAPPING_TEMPLATE，让代码看起来更加优雅。</li><li>3）发送请求，client.indices()方法的返回值是IndicesClient类型，封装了所有与索引库操作有关的方法。</li></ul><p>代码示例</p><p>在hotel-demo的cn.itcast.hotel.constants包下，创建一个类，定义mapping映射的JSON字符串常量：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>itcast<span class="token punctuation">.</span>hotel<span class="token punctuation">.</span>constants</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HotelConstants</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> MAPPING_TEMPLATE <span class="token operator">=</span> <span class="token string">"{\n"</span> <span class="token operator">+</span>            <span class="token string">"  \"mappings\": {\n"</span> <span class="token operator">+</span>            <span class="token string">"    \"properties\": {\n"</span> <span class="token operator">+</span>            <span class="token string">"      \"id\": {\n"</span> <span class="token operator">+</span>            <span class="token string">"        \"type\": \"keyword\"\n"</span> <span class="token operator">+</span>            <span class="token string">"      },\n"</span> <span class="token operator">+</span>            <span class="token string">"      \"name\":{\n"</span> <span class="token operator">+</span>            <span class="token string">"        \"type\": \"text\",\n"</span> <span class="token operator">+</span>            <span class="token string">"        \"analyzer\": \"ik_max_word\",\n"</span> <span class="token operator">+</span>            <span class="token string">"        \"copy_to\": \"all\"\n"</span> <span class="token operator">+</span>            <span class="token string">"      },\n"</span> <span class="token operator">+</span>            <span class="token string">"      \"address\":{\n"</span> <span class="token operator">+</span>            <span class="token string">"        \"type\": \"keyword\",\n"</span> <span class="token operator">+</span>            <span class="token string">"        \"index\": false\n"</span> <span class="token operator">+</span>            <span class="token string">"      },\n"</span> <span class="token operator">+</span>            <span class="token string">"      \"price\":{\n"</span> <span class="token operator">+</span>            <span class="token string">"        \"type\": \"integer\"\n"</span> <span class="token operator">+</span>            <span class="token string">"      },\n"</span> <span class="token operator">+</span>            <span class="token string">"      \"score\":{\n"</span> <span class="token operator">+</span>            <span class="token string">"        \"type\": \"integer\"\n"</span> <span class="token operator">+</span>            <span class="token string">"      },\n"</span> <span class="token operator">+</span>            <span class="token string">"      \"brand\":{\n"</span> <span class="token operator">+</span>            <span class="token string">"        \"type\": \"keyword\",\n"</span> <span class="token operator">+</span>            <span class="token string">"        \"copy_to\": \"all\"\n"</span> <span class="token operator">+</span>            <span class="token string">"      },\n"</span> <span class="token operator">+</span>            <span class="token string">"      \"city\":{\n"</span> <span class="token operator">+</span>            <span class="token string">"        \"type\": \"keyword\",\n"</span> <span class="token operator">+</span>            <span class="token string">"        \"copy_to\": \"all\"\n"</span> <span class="token operator">+</span>            <span class="token string">"      },\n"</span> <span class="token operator">+</span>            <span class="token string">"      \"starName\":{\n"</span> <span class="token operator">+</span>            <span class="token string">"        \"type\": \"keyword\"\n"</span> <span class="token operator">+</span>            <span class="token string">"      },\n"</span> <span class="token operator">+</span>            <span class="token string">"      \"business\":{\n"</span> <span class="token operator">+</span>            <span class="token string">"        \"type\": \"keyword\"\n"</span> <span class="token operator">+</span>            <span class="token string">"      },\n"</span> <span class="token operator">+</span>            <span class="token string">"      \"location\":{\n"</span> <span class="token operator">+</span>            <span class="token string">"        \"type\": \"geo_point\"\n"</span> <span class="token operator">+</span>            <span class="token string">"      },\n"</span> <span class="token operator">+</span>            <span class="token string">"      \"pic\":{\n"</span> <span class="token operator">+</span>            <span class="token string">"        \"type\": \"keyword\",\n"</span> <span class="token operator">+</span>            <span class="token string">"        \"index\": false\n"</span> <span class="token operator">+</span>            <span class="token string">"      },\n"</span> <span class="token operator">+</span>            <span class="token string">"      \"all\":{\n"</span> <span class="token operator">+</span>            <span class="token string">"        \"type\": \"text\",\n"</span> <span class="token operator">+</span>            <span class="token string">"        \"analyzer\": \"ik_max_word\"\n"</span> <span class="token operator">+</span>            <span class="token string">"      }\n"</span> <span class="token operator">+</span>            <span class="token string">"    }\n"</span> <span class="token operator">+</span>            <span class="token string">"  }\n"</span> <span class="token operator">+</span>            <span class="token string">"}"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>单元测试</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**     * 创建索引     * @throws IOException     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token comment">//1.创建Request</span>        <span class="token class-name">CreateIndexRequest</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CreateIndexRequest</span><span class="token punctuation">(</span><span class="token string">"hotel"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.准备DSL语句</span>        request<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span><span class="token class-name">HotelConstants</span><span class="token punctuation">.</span>MAPPING_TEMPLATE<span class="token punctuation">,</span> <span class="token class-name">XContentType</span><span class="token punctuation">.</span>JSON<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3.发送请求</span>        restClient<span class="token punctuation">.</span><span class="token function">indices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token class-name">RequestOptions</span><span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-删除索引库"><a href="#2-删除索引库" class="headerlink" title="2.删除索引库"></a>2.删除索引库</h3><p>以代码的差异，注意体现在Request对象上。依然是三步走：</p><ul><li>1）创建Request对象。这次是DeleteIndexRequest对象</li><li>2）准备参数。这里是无参</li><li>3）发送请求。改用delete方法</li></ul><p>代码示例</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**     * 删除索引     * @throws IOException     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token comment">//1.创建Request</span>        <span class="token class-name">DeleteIndexRequest</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DeleteIndexRequest</span><span class="token punctuation">(</span><span class="token string">"hotel"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.发送请求</span>        restClient<span class="token punctuation">.</span><span class="token function">indices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span><span class="token class-name">RequestOptions</span><span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-判断索引库是否存在"><a href="#3-判断索引库是否存在" class="headerlink" title="3.判断索引库是否存在"></a>3.判断索引库是否存在</h3><p>因此与删除的Java代码流程是类似的。依然是三步走：</p><ul><li>1）创建Request对象。这次是GetIndexRequest对象</li><li>2）准备参数。这里是无参</li><li>3）发送请求。改用exists方法</li></ul><p>代码示例</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**     * 检测索引是否存在     * @throws IOException     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">existIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token comment">//1.创建Request</span>        <span class="token class-name">GetIndexRequest</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GetIndexRequest</span><span class="token punctuation">(</span><span class="token string">"hotel"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.发送请求</span>        <span class="token keyword">boolean</span> exists <span class="token operator">=</span> restClient<span class="token punctuation">.</span><span class="token function">indices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token class-name">RequestOptions</span><span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>exists<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h3><p>JavaRestClient操作elasticsearch的流程基本类似。核心是client.indices()方法来获取索引库的操作对象。</p><p>索引库操作的基本步骤：</p><ul><li>初始化RestHighLevelClient</li><li>创建XxxIndexRequest。XXX是Create、Get、Delete</li><li>准备DSL（ Create时需要，其它是无参）</li><li>发送请求。调用RestHighLevelClient#indices().xxx()方法，xxx是create、exists、delete</li></ul><h2 id="6-RestClient操作文档"><a href="#6-RestClient操作文档" class="headerlink" title="6.RestClient操作文档"></a>6.RestClient操作文档</h2><h3 id="1-新增文档"><a href="#1-新增文档" class="headerlink" title="1.新增文档"></a>1.新增文档</h3><p>可以看到与创建索引库类似，同样是三步走：</p><ul><li>1）创建Request对象</li><li>2）准备请求参数，也就是DSL中的JSON文档</li><li>3）发送请求</li></ul><p>变化的地方在于，这里直接使用client.xxx()的API，不再需要client.indices()了。</p><p>代码示例</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">testAddDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>    <span class="token comment">// 1.根据id查询酒店数据</span>    <span class="token class-name">Hotel</span> hotel <span class="token operator">=</span> hotelService<span class="token punctuation">.</span><span class="token function">getById</span><span class="token punctuation">(</span><span class="token number">61083L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 2.转换为文档类型</span>    <span class="token class-name">HotelDoc</span> hotelDoc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HotelDoc</span><span class="token punctuation">(</span>hotel<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 3.将HotelDoc转json</span>    <span class="token class-name">String</span> json <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>hotelDoc<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 1.准备Request对象</span>    <span class="token class-name">IndexRequest</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IndexRequest</span><span class="token punctuation">(</span><span class="token string">"hotel"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span>hotelDoc<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 2.准备Json文档</span>    request<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span> <span class="token class-name">XContentType</span><span class="token punctuation">.</span>JSON<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 3.发送请求</span>    client<span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token class-name">RequestOptions</span><span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-查询文档"><a href="#2-查询文档" class="headerlink" title="2.查询文档"></a>2.查询文档</h3><p>非常简单，因此代码大概分两步：</p><ul><li>准备Request对象</li><li>发送请求</li></ul><p>代码示例</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">testGetDocumentById</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>    <span class="token comment">// 1.准备Request</span>    <span class="token class-name">GetRequest</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GetRequest</span><span class="token punctuation">(</span><span class="token string">"hotel"</span><span class="token punctuation">,</span> <span class="token string">"61082"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 2.发送请求，得到响应</span>    <span class="token class-name">GetResponse</span> response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token class-name">RequestOptions</span><span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 3.解析响应结果</span>    <span class="token class-name">String</span> json <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getSourceAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">HotelDoc</span> hotelDoc <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span> <span class="token class-name">HotelDoc</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hotelDoc<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-删除文档"><a href="#3-删除文档" class="headerlink" title="3.删除文档"></a>3.删除文档</h3><ul><li>1）准备Request对象，因为是删除，这次是DeleteRequest对象。要指定索引库名和id</li><li>2）准备参数，无参</li><li>3）发送请求。因为是删除，所以是client.delete()方法</li></ul><p>代码示例</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">testDeleteDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>    <span class="token comment">// 1.准备Request</span>    <span class="token class-name">DeleteRequest</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DeleteRequest</span><span class="token punctuation">(</span><span class="token string">"hotel"</span><span class="token punctuation">,</span> <span class="token string">"61083"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 2.发送请求</span>    client<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token class-name">RequestOptions</span><span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-修改文档"><a href="#4-修改文档" class="headerlink" title="4.修改文档"></a>4.修改文档</h3><p>修改我们讲过两种方式：</p><ul><li>全量修改：本质是先根据id删除，再新增</li><li>增量修改：修改文档中的指定字段值</li></ul><p>在RestClient的API中，全量修改与新增的API完全一致，判断依据是ID：</p><ul><li>如果新增时，ID已经存在，则修改</li><li>如果新增时，ID不存在，则新增</li></ul><p>之前类似，也是三步走：</p><ul><li>1）准备Request对象。这次是修改，所以是UpdateRequest</li><li>2）准备参数。也就是JSON文档，里面包含要修改的字段</li><li>3）更新文档。这里调用client.update()方法</li></ul><p>代码示例</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">testUpdateDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>    <span class="token comment">// 1.准备Request</span>    <span class="token class-name">UpdateRequest</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UpdateRequest</span><span class="token punctuation">(</span><span class="token string">"hotel"</span><span class="token punctuation">,</span> <span class="token string">"61083"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 2.准备请求参数</span>    request<span class="token punctuation">.</span><span class="token function">doc</span><span class="token punctuation">(</span>        <span class="token string">"price"</span><span class="token punctuation">,</span> <span class="token string">"952"</span><span class="token punctuation">,</span>        <span class="token string">"starName"</span><span class="token punctuation">,</span> <span class="token string">"四钻"</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 3.发送请求</span>    client<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token class-name">RequestOptions</span><span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-批量导入文档"><a href="#5-批量导入文档" class="headerlink" title="5.批量导入文档"></a>5.批量导入文档</h3><p>其实还是三步走：</p><ul><li>1）创建Request对象。这里是BulkRequest</li><li>2）准备参数。批处理的参数，就是其它Request对象，这里就是多个IndexRequest</li><li>3）发起请求。这里是批处理，调用的方法为client.bulk()方法</li></ul><p>代码示例</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">testBulkRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>    <span class="token comment">// 批量查询酒店数据</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Hotel</span><span class="token punctuation">&gt;</span></span> hotels <span class="token operator">=</span> hotelService<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 1.创建Request</span>    <span class="token class-name">BulkRequest</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BulkRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 2.准备参数，添加多个新增的Request</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Hotel</span> hotel <span class="token operator">:</span> hotels<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 2.1.转换为文档类型HotelDoc</span>        <span class="token class-name">HotelDoc</span> hotelDoc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HotelDoc</span><span class="token punctuation">(</span>hotel<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 2.2.创建新增文档的Request对象</span>        request<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">IndexRequest</span><span class="token punctuation">(</span><span class="token string">"hotel"</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span>hotelDoc<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>hotelDoc<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">XContentType</span><span class="token punctuation">.</span>JSON<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 3.发送请求</span>    client<span class="token punctuation">.</span><span class="token function">bulk</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token class-name">RequestOptions</span><span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-总结"><a href="#6-总结" class="headerlink" title="6.总结"></a>6.总结</h3><p>文档操作的基本步骤：</p><ul><li>初始化RestHighLevelClient</li><li>创建XxxRequest。XXX是Index、Get、Update、Delete、Bulk</li><li>准备参数（Index、Update、Bulk时需要）</li><li>发送请求。调用RestHighLevelClient#.xxx()方法，xxx是index、get、update、delete、bulk</li><li>解析结果（Get时需要）</li></ul><h2 id="7-RestClient查询文档"><a href="#7-RestClient查询文档" class="headerlink" title="7.RestClient查询文档"></a>7.RestClient查询文档</h2><p>代码解读：</p><ul><li>第一步，创建<code>SearchRequest</code>对象，指定索引库名</li><li>第二步，利用<code>request.source()</code>构建DSL，DSL中可以包含查询、分页、排序、高亮等<ul><li><code>query()</code>：代表查询条件，利用<code>QueryBuilders.matchAllQuery()</code>构建一个match_all查询的DSL</li></ul></li><li>第三步，利用client.search()发送请求，得到响应</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">testMatchAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>    <span class="token comment">// 1.准备Request</span>    <span class="token class-name">SearchRequest</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchRequest</span><span class="token punctuation">(</span><span class="token string">"hotel"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 2.准备DSL</span>    request<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token class-name">QueryBuilders</span><span class="token punctuation">.</span><span class="token function">matchAllQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 3.发送请求</span>    <span class="token class-name">SearchResponse</span> response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token class-name">RequestOptions</span><span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 4.解析响应</span>    <span class="token function">handleResponse</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">handleResponse</span><span class="token punctuation">(</span><span class="token class-name">SearchResponse</span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 4.解析响应</span>    <span class="token class-name">SearchHits</span> searchHits <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 4.1.获取总条数</span>    <span class="token keyword">long</span> total <span class="token operator">=</span> searchHits<span class="token punctuation">.</span><span class="token function">getTotalHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"共搜索到"</span> <span class="token operator">+</span> total <span class="token operator">+</span> <span class="token string">"条数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 4.2.文档数组</span>    <span class="token class-name">SearchHit</span><span class="token punctuation">[</span><span class="token punctuation">]</span> hits <span class="token operator">=</span> searchHits<span class="token punctuation">.</span><span class="token function">getHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 4.3.遍历</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">SearchHit</span> hit <span class="token operator">:</span> hits<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 获取文档source</span>        <span class="token class-name">String</span> json <span class="token operator">=</span> hit<span class="token punctuation">.</span><span class="token function">getSourceAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 反序列化</span>        <span class="token class-name">HotelDoc</span> hotelDoc <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span> <span class="token class-name">HotelDoc</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hotelDoc = "</span> <span class="token operator">+</span> hotelDoc<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-match查询"><a href="#1-match查询" class="headerlink" title="1.match查询"></a>1.match查询</h3><p>全文检索的match和multi_match查询与match_all的API基本一致。差别是查询条件，也就是query的部分。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">testMatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>    <span class="token comment">// 1.准备Request</span>    <span class="token class-name">SearchRequest</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchRequest</span><span class="token punctuation">(</span><span class="token string">"hotel"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 2.准备DSL</span>    request<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token class-name">QueryBuilders</span><span class="token punctuation">.</span><span class="token function">matchQuery</span><span class="token punctuation">(</span><span class="token string">"all"</span><span class="token punctuation">,</span> <span class="token string">"如家"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 3.发送请求</span>    <span class="token class-name">SearchResponse</span> response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token class-name">RequestOptions</span><span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 4.解析响应</span>    <span class="token function">handleResponse</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-精确查询"><a href="#2-精确查询" class="headerlink" title="2.精确查询"></a>2.精确查询</h3><p>term:词条精确匹配</p><p>ranage:范围查询</p><img src="/posts/60537c10/image-20220929150615364.png" class="" title="image-20220929150615364"><h3 id="3-布尔查询"><a href="#3-布尔查询" class="headerlink" title="3.布尔查询"></a>3.布尔查询</h3><img src="/posts/60537c10/image-20220929150649481.png" class="" title="image-20220929150649481"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">testBool</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>    <span class="token comment">// 1.准备Request</span>    <span class="token class-name">SearchRequest</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchRequest</span><span class="token punctuation">(</span><span class="token string">"hotel"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 2.准备DSL</span>    <span class="token comment">// 2.1.准备BooleanQuery</span>    <span class="token class-name">BoolQueryBuilder</span> boolQuery <span class="token operator">=</span> <span class="token class-name">QueryBuilders</span><span class="token punctuation">.</span><span class="token function">boolQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 2.2.添加term</span>    boolQuery<span class="token punctuation">.</span><span class="token function">must</span><span class="token punctuation">(</span><span class="token class-name">QueryBuilders</span><span class="token punctuation">.</span><span class="token function">termQuery</span><span class="token punctuation">(</span><span class="token string">"city"</span><span class="token punctuation">,</span> <span class="token string">"杭州"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 2.3.添加range</span>    boolQuery<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">QueryBuilders</span><span class="token punctuation">.</span><span class="token function">rangeQuery</span><span class="token punctuation">(</span><span class="token string">"price"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lte</span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    request<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>boolQuery<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 3.发送请求</span>    <span class="token class-name">SearchResponse</span> response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token class-name">RequestOptions</span><span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 4.解析响应</span>    <span class="token function">handleResponse</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-排序，分页"><a href="#4-排序，分页" class="headerlink" title="4.排序，分页"></a>4.排序，分页</h3><img src="/posts/60537c10/image-20220929150734463.png" class="" title="image-20220929150734463"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">testPageAndSort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>    <span class="token comment">// 页码，每页大小</span>    <span class="token keyword">int</span> page <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> size <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token comment">// 1.准备Request</span>    <span class="token class-name">SearchRequest</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchRequest</span><span class="token punctuation">(</span><span class="token string">"hotel"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 2.准备DSL</span>    <span class="token comment">// 2.1.query</span>    request<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token class-name">QueryBuilders</span><span class="token punctuation">.</span><span class="token function">matchAllQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 2.2.排序 sort</span>    request<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token string">"price"</span><span class="token punctuation">,</span> <span class="token class-name">SortOrder</span><span class="token punctuation">.</span>ASC<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 2.3.分页 from、size</span>    request<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">(</span>page <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> size<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 3.发送请求</span>    <span class="token class-name">SearchResponse</span> response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token class-name">RequestOptions</span><span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 4.解析响应</span>    <span class="token function">handleResponse</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-高亮"><a href="#5-高亮" class="headerlink" title="5.高亮"></a>5.高亮</h3><img src="/posts/60537c10/image-20220929150815002.png" class="" title="image-20220929150815002"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">testHighlight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>    <span class="token comment">// 1.准备Request</span>    <span class="token class-name">SearchRequest</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchRequest</span><span class="token punctuation">(</span><span class="token string">"hotel"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 2.准备DSL</span>    <span class="token comment">// 2.1.query</span>    request<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token class-name">QueryBuilders</span><span class="token punctuation">.</span><span class="token function">matchQuery</span><span class="token punctuation">(</span><span class="token string">"all"</span><span class="token punctuation">,</span> <span class="token string">"如家"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 2.2.高亮</span>    request<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">highlighter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HighlightBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">requireFieldMatch</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 3.发送请求</span>    <span class="token class-name">SearchResponse</span> response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token class-name">RequestOptions</span><span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 4.解析响应</span>    <span class="token function">handleResponse</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码解读：</p><ul><li>第一步：从结果中获取source。hit.getSourceAsString()，这部分是非高亮结果，json字符串。还需要反序列为HotelDoc对象</li><li>第二步：获取高亮结果。hit.getHighlightFields()，返回值是一个Map，key是高亮字段名称，值是HighlightField对象，代表高亮值</li><li>第三步：从map中根据高亮字段名称，获取高亮字段值对象HighlightField</li><li>第四步：从HighlightField中获取Fragments，并且转为字符串。这部分就是真正的高亮字符串了</li><li>第五步：用高亮的结果替换HotelDoc中的非高亮结果</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">handleResponse</span><span class="token punctuation">(</span><span class="token class-name">SearchResponse</span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 4.解析响应</span>    <span class="token class-name">SearchHits</span> searchHits <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 4.1.获取总条数</span>    <span class="token keyword">long</span> total <span class="token operator">=</span> searchHits<span class="token punctuation">.</span><span class="token function">getTotalHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"共搜索到"</span> <span class="token operator">+</span> total <span class="token operator">+</span> <span class="token string">"条数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 4.2.文档数组</span>    <span class="token class-name">SearchHit</span><span class="token punctuation">[</span><span class="token punctuation">]</span> hits <span class="token operator">=</span> searchHits<span class="token punctuation">.</span><span class="token function">getHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 4.3.遍历</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">SearchHit</span> hit <span class="token operator">:</span> hits<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 获取文档source</span>        <span class="token class-name">String</span> json <span class="token operator">=</span> hit<span class="token punctuation">.</span><span class="token function">getSourceAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 反序列化</span>        <span class="token class-name">HotelDoc</span> hotelDoc <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span> <span class="token class-name">HotelDoc</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取高亮结果</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">HighlightField</span><span class="token punctuation">&gt;</span></span> highlightFields <span class="token operator">=</span> hit<span class="token punctuation">.</span><span class="token function">getHighlightFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>highlightFields<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 根据字段名获取高亮结果</span>            <span class="token class-name">HighlightField</span> highlightField <span class="token operator">=</span> highlightFields<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>highlightField <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// 获取高亮值</span>                <span class="token class-name">String</span> name <span class="token operator">=</span> highlightField<span class="token punctuation">.</span><span class="token function">getFragments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 覆盖非高亮结果</span>                hotelDoc<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hotelDoc = "</span> <span class="token operator">+</span> hotelDoc<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="全文检索" scheme="https://macongmc.github.io/categories/%E5%85%A8%E6%96%87%E6%A3%80%E7%B4%A2/"/>
    
    
    <category term="搜索引擎" scheme="https://macongmc.github.io/tags/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/"/>
    
  </entry>
  
  <entry>
    <title>Mysql总结</title>
    <link href="https://macongmc.github.io/posts/e0d7f1e7.html"/>
    <id>https://macongmc.github.io/posts/e0d7f1e7.html</id>
    <published>2022-09-20T08:00:07.000Z</published>
    <updated>2022-09-20T08:00:07.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="第一章-优化SQL"><a href="#第一章-优化SQL" class="headerlink" title="第一章 优化SQL"></a>第一章 优化SQL</h2><h3 id="一-定位慢SQL语句"><a href="#一-定位慢SQL语句" class="headerlink" title="一.定位慢SQL语句"></a>一.定位慢SQL语句</h3><p>1.开启慢查询日志</p><p>2.使用show processlist</p><h3 id="二-慢查询日志"><a href="#二-慢查询日志" class="headerlink" title="二.慢查询日志"></a>二.慢查询日志</h3><h4 id="2-1概述"><a href="#2-1概述" class="headerlink" title="2.1概述"></a>2.1概述</h4><p>​       慢查询日志用来记录在 MySQL 中执行时间超过指定时间的查询语句。 通过慢查询日志，可以查找出哪些查询语句的执行效率低，以便进行优化。</p><p>​      慢查询日志是在SQL执行完毕之后通过设置阈值，来定位慢SQL.</p><h4 id="2-2开启慢查询日志"><a href="#2-2开启慢查询日志" class="headerlink" title="2.2开启慢查询日志"></a>2.2开启慢查询日志</h4><p>默认，MySQL的慢查询日志功能是关闭的。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'slow_query%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/posts/e0d7f1e7/image-20220920161138492.png" class="" title="image-20220920161138492"><img src="/posts/e0d7f1e7/image-20220920161217110.png" class="" title="image-20220920161217110"><p>开启MySQL的慢查询日志功能</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">set</span> <span class="token keyword">global</span> slow_query_log <span class="token operator">=</span><span class="token string">'ON'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/posts/e0d7f1e7/image-20220920161537634.png" class="" title="image-20220920161537634"><h4 id="2-3设置慢查询超时时间"><a href="#2-3设置慢查询超时时间" class="headerlink" title="2.3设置慢查询超时时间"></a>2.3设置慢查询超时时间</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'long_query_time%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/posts/e0d7f1e7/image-20220920172710326.png" class="" title="image-20220920172710326"><p>long_query_time 默认为 10s。生产环境下，如果 SQL 的执行时间超过 1s，我们可以认为这条 SQL是比较慢，我们将long_query_time的值改为 2s</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">set</span> <span class="token keyword">global</span> long_query_time <span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/posts/e0d7f1e7/image-20220920172807311.png" class="" title="image-20220920172807311"><p>对于当前会话窗口，查看long_query_time值没有更新。我们需要新开一个会话窗口，可以查询到更新后的值。</p><h4 id="2-3测试慢查询"><a href="#2-3测试慢查询" class="headerlink" title="2.3测试慢查询"></a>2.3测试慢查询</h4><p>执行一个3秒查询</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/posts/e0d7f1e7/image-20220920172946684.png" class="" title="image-20220920172946684"><h4 id="2-4查看日志"><a href="#2-4查看日志" class="headerlink" title="2.4查看日志"></a>2.4查看日志</h4><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# cat  /var/lib/mysql/node1-slow.log/usr/sbin/mysqld, Version: 8.0.27 (MySQL Community Server - GPL). started with:Tcp port: 3306  Unix socket: /var/lib/mysql/mysql.sockTime                 Id Command    Argument# Time: 2021-11-14T19:41:41.225465Z# User@Host: root[root] @ localhost []  Id:    31# Query_time: 3.003578  Lock_time: 0.000000 Rows_sent: 1  Rows_examined: 1SET timestamp=1636918898;select sleep(3);[root@node1 ~]# <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-5慢日志分析工具-mysqldumpslow"><a href="#2-5慢日志分析工具-mysqldumpslow" class="headerlink" title="2.5慢日志分析工具-mysqldumpslow"></a>2.5慢日志分析工具-mysqldumpslow</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token punctuation">[</span>root<span class="token variable">@node1</span> <span class="token operator">~</span><span class="token punctuation">]</span><span class="token comment"># mysqldumpslow -s at -t 1 /var/lib/mysql/node1-slow.log</span>Reading mysql slow query log <span class="token keyword">from</span> <span class="token operator">/</span>var<span class="token operator">/</span>lib<span class="token operator">/</span>mysql<span class="token operator">/</span>node1<span class="token operator">-</span>slow<span class="token punctuation">.</span>logCount: <span class="token number">3</span>  <span class="token keyword">Time</span><span class="token operator">=</span><span class="token number">8.00</span>s <span class="token punctuation">(</span><span class="token number">24</span>s<span class="token punctuation">)</span>  <span class="token keyword">Lock</span><span class="token operator">=</span><span class="token number">0.00</span>s <span class="token punctuation">(</span><span class="token number">0</span>s<span class="token punctuation">)</span>  <span class="token keyword">Rows</span><span class="token operator">=</span><span class="token number">1.0</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> root<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token variable">@localhost</span>  <span class="token keyword">select</span> sleep<span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">[</span>root<span class="token variable">@node1</span> <span class="token operator">~</span><span class="token punctuation">]</span><span class="token comment"># </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-6重启失效"><a href="#2-6重启失效" class="headerlink" title="2.6重启失效"></a>2.6重启失效</h4><p>重启MySQL服务之后，上面相关设置丢失。</p><h4 id="2-7配置文件方式"><a href="#2-7配置文件方式" class="headerlink" title="2.7配置文件方式"></a>2.7配置文件方式</h4><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# vi /etc/my.cnf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在[mysqld]最后添加</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">slow<span class="token operator">-</span>query<span class="token operator">-</span>log <span class="token operator">=</span> <span class="token keyword">on</span>long_query_time <span class="token operator">=</span> <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">然后重启MySQL服务<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="三-show-processlist-检测正在运行的sql"><a href="#三-show-processlist-检测正在运行的sql" class="headerlink" title="三.show processlist 检测正在运行的sql"></a>三.show processlist 检测正在运行的sql</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> processlist<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/posts/e0d7f1e7/image-20220917115051691.png" class="" title="img"><h3 id="四-EXPLAIN-分析执行计划"><a href="#四-EXPLAIN-分析执行计划" class="headerlink" title="四.EXPLAIN 分析执行计划"></a>四.EXPLAIN 分析执行计划</h3><p>在查询语句前面添加  explain</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> demo<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/posts/e0d7f1e7/image-20220917115247766.png" class="" title="img"><p>1.优化  使用key</p><p>2.优化 type</p><img src="/posts/e0d7f1e7/image-20220917121647486.png" class="" title="img"><img src="/posts/e0d7f1e7/image-20220917122238355.png" class="" title="img"><p>3.优化extra</p><img src="/posts/e0d7f1e7/image-20220917122443224.png" class="" title="img"><p>尽量使用覆盖索引</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="mysql" scheme="https://macongmc.github.io/categories/mysql/"/>
    
    
    <category term="mysql" scheme="https://macongmc.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>MySQL高级</title>
    <link href="https://macongmc.github.io/posts/9982416a.html"/>
    <id>https://macongmc.github.io/posts/9982416a.html</id>
    <published>2022-09-15T10:01:29.000Z</published>
    <updated>2022-09-15T10:01:29.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="MySQL高级-day1"><a href="#MySQL高级-day1" class="headerlink" title="MySQL高级-day1"></a>MySQL高级-day1</h2><h3 id="1-索引"><a href="#1-索引" class="headerlink" title="1.索引"></a>1.索引</h3><h4 id="1-1索引概述"><a href="#1-1索引概述" class="headerlink" title="1.1索引概述"></a>1.1索引概述</h4><p>索引是帮助MySQL高效获取数据的数据结构。</p><img src="/posts/9982416a/image-20220915202852820.png" class="" title="image-20220915202852820"><h4 id="1-2索引的优势和劣势"><a href="#1-2索引的优势和劣势" class="headerlink" title="1.2索引的优势和劣势"></a>1.2索引的优势和劣势</h4><p>优势：</p><p>1.类似于书籍目录索引，提高数据检索的效率，降低数据库的IO成本。</p><p>2.通过索引列对数据进行排序，降低排序成本，降低CPU的消耗。</p><p>劣势：</p><p>1.索引实际上也是一张表，该表中保存了主键与索引字段，并指向实体类的记录，所以索引列也是要占用空间的。</p><p>2.索引提高了查询效率，复杂了INSTER,UPDATE,DELETE.</p><h3 id="2-索引结构"><a href="#2-索引结构" class="headerlink" title="2.索引结构"></a>2.索引结构</h3><img src="/posts/9982416a/image-20220915203606538.png" class="" title="image-20220915203606538"><h4 id="2-1BTREE结构"><a href="#2-1BTREE结构" class="headerlink" title="2.1BTREE结构"></a>2.1BTREE结构</h4><img src="/posts/9982416a/image-20220915204009937.png" class="" title="image-20220915204009937"><img src="/posts/9982416a/image-20220915210311397.png" class="" title="image-20220915210311397"><img src="/posts/9982416a/image-20220915210329924.png" class="" title="image-20220915210329924"><img src="/posts/9982416a/image-20220915210343198.png" class="" title="image-20220915210343198"><img src="/posts/9982416a/image-20220915210500313.png" class="" title="image-20220915210500313"><img src="/posts/9982416a/image-20220915210510609.png" class="" title="image-20220915210510609"><h4 id="2-2B-TREE结构"><a href="#2-2B-TREE结构" class="headerlink" title="2.2B+TREE结构"></a>2.2B+TREE结构</h4><img src="/posts/9982416a/image-20220915210937605.png" class="" title="image-20220915210937605"><h4 id="2-3MySQL中的B-Tree"><a href="#2-3MySQL中的B-Tree" class="headerlink" title="2.3MySQL中的B+Tree"></a>2.3MySQL中的B+Tree</h4><img src="/posts/9982416a/image-20220915211522630.png" class="" title="image-20220915211522630"><h4 id="2-4索引的分类"><a href="#2-4索引的分类" class="headerlink" title="2.4索引的分类"></a>2.4索引的分类</h4><p>1.单值索引：即一个索引只包含单个列，一个表可以有多个单列索引。</p><p>2.唯一索引：索引列的值必须唯一，但允许有空值</p><p>3.复合索引：即一个索引包含多个列</p><h4 id="2-5索引语法"><a href="#2-5索引语法" class="headerlink" title="2.5索引语法"></a>2.5索引语法</h4><h5 id="2-5-1创建索引"><a href="#2-5-1创建索引" class="headerlink" title="2.5.1创建索引"></a>2.5.1创建索引</h5><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token punctuation">[</span><span class="token keyword">UNIQUE</span><span class="token operator">|</span>FULLTEXT<span class="token operator">|</span>SPATTAL<span class="token punctuation">]</span> <span class="token keyword">INDEX</span> index_name<span class="token punctuation">[</span><span class="token keyword">USING</span> INDEX_TYPE<span class="token punctuation">]</span><span class="token keyword">ON</span> tb_name<span class="token punctuation">(</span>index_col_name<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>index_col_name:column_name<span class="token punctuation">[</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token keyword">ASC</span><span class="token operator">|</span><span class="token keyword">DESC</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-5-2查看索引"><a href="#2-5-2查看索引" class="headerlink" title="2.5.2查看索引"></a>2.5.2查看索引</h5><p>show index from 表名；\G</p><p>主键有默认索引  主键索引。</p><h5 id="2-5-3删除索引"><a href="#2-5-3删除索引" class="headerlink" title="2.5.3删除索引"></a>2.5.3删除索引</h5><p>drop index 索引的名称 on 表名；</p><h5 id="2-5-4ALTER命名"><a href="#2-5-4ALTER命名" class="headerlink" title="2.5.4ALTER命名"></a>2.5.4ALTER命名</h5><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token number">1.</span> <span class="token keyword">alter</span> <span class="token keyword">table</span> tb_name <span class="token keyword">add</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">(</span>column_list<span class="token punctuation">)</span><span class="token punctuation">;</span>该语句添加一个主键<span class="token number">2.</span><span class="token keyword">alter</span> <span class="token keyword">table</span> tb_name <span class="token keyword">add</span> <span class="token keyword">unique</span> index_name<span class="token punctuation">(</span>colum_list<span class="token punctuation">)</span><span class="token punctuation">;</span>该语句创建索引的值必须唯一<span class="token number">3.</span><span class="token keyword">alter</span> <span class="token keyword">table</span> tb_name <span class="token keyword">add</span> <span class="token keyword">index</span> index_name<span class="token punctuation">(</span>colum_list<span class="token punctuation">)</span><span class="token punctuation">;</span>添加普通索引<span class="token number">4.</span><span class="token keyword">alter</span> <span class="token keyword">table</span> tb_name <span class="token keyword">add</span> fulltest index_name<span class="token punctuation">(</span>column_list<span class="token punctuation">)</span><span class="token punctuation">;</span>全文索引<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-6索引的设计原则"><a href="#2-6索引的设计原则" class="headerlink" title="2.6索引的设计原则"></a>2.6索引的设计原则</h4><img src="/posts/9982416a/image-20220915214256537.png" class="" title="image-20220915214256537"><h3 id="3-视图"><a href="#3-视图" class="headerlink" title="3.视图"></a>3.视图</h3><h4 id="3-1视图概述"><a href="#3-1视图概述" class="headerlink" title="3.1视图概述"></a>3.1视图概述</h4><img src="/posts/9982416a/image-20220916201049360.png" class="" title="image-20220916201049360"><h4 id="3-2创建或者修改视图"><a href="#3-2创建或者修改视图" class="headerlink" title="3.2创建或者修改视图"></a>3.2创建或者修改视图</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">VIEW</span> name <span class="token keyword">AS</span> <span class="token keyword">SELECT</span>语句<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token punctuation">[</span><span class="token operator">OR</span> PEPLACE<span class="token punctuation">]</span> <span class="token punctuation">[</span>ALGORIHM <span class="token operator">=</span>{<span class="token keyword">UNDEFINED</span> <span class="token operator">|</span><span class="token keyword">MERGE</span> <span class="token operator">|</span><span class="token keyword">TEMPTABLE</span>}<span class="token punctuation">]</span> <span class="token keyword">VIEW</span> VIEW_NAME<span class="token punctuation">[</span><span class="token punctuation">(</span>COLUM_LLIST<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">AS</span> select_statement <span class="token punctuation">[</span><span class="token keyword">WITH</span><span class="token punctuation">[</span><span class="token keyword">CASCADED</span> <span class="token operator">|</span> <span class="token keyword">LOCAL</span><span class="token punctuation">]</span> <span class="token keyword">CHECK</span> <span class="token keyword">OPTION</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#查询视图</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> VIEW_NAME<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#更新</span><span class="token keyword">UPDATE</span> VIEW_CITY <span class="token keyword">SET</span> city_name<span class="token operator">=</span><span class="token string">'西安'</span> <span class="token keyword">WHERE</span> city_id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>修改语法</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token punctuation">[</span><span class="token keyword">ALGORITHM</span> <span class="token operator">=</span>{<span class="token keyword">UNDEFINED</span> <span class="token operator">|</span> <span class="token keyword">MERGE</span><span class="token operator">|</span> <span class="token keyword">TEMPTABLE</span>}<span class="token punctuation">]</span><span class="token keyword">VIEW</span> view_name <span class="token punctuation">[</span><span class="token punctuation">(</span>column_list<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">AS</span> select_statement<span class="token punctuation">[</span><span class="token keyword">WITH</span><span class="token punctuation">[</span><span class="token keyword">CASCADED</span> <span class="token operator">|</span><span class="token keyword">LOCAL</span><span class="token punctuation">]</span> <span class="token keyword">CHECK</span> <span class="token keyword">OPTION</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-3查看视图"><a href="#3-3查看视图" class="headerlink" title="3.3查看视图"></a>3.3查看视图</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#查看当前的视图包括表</span><span class="token keyword">SHOW</span> <span class="token keyword">TABLES</span><span class="token punctuation">;</span><span class="token comment">#查看创建视图的语句</span><span class="token keyword">SHOW</span> <span class="token keyword">CREATE</span> <span class="token keyword">VIEW</span> name<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-4删除视图"><a href="#3-4删除视图" class="headerlink" title="3.4删除视图"></a>3.4删除视图</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">VIEW</span> view_name<span class="token punctuation">;</span><span class="token keyword">DROP</span> <span class="token keyword">VIEW</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> view_name<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="4-存储过程和函数"><a href="#4-存储过程和函数" class="headerlink" title="4.存储过程和函数"></a>4.存储过程和函数</h3><h4 id="4-1存储过程和函数概述"><a href="#4-1存储过程和函数概述" class="headerlink" title="4.1存储过程和函数概述"></a>4.1存储过程和函数概述</h4><p> 存储过程和函数是 事先经过编译并存储在数据库中的一段SQL语句的集合，调用存储过程和函数可以简化应用开发人员的很多工作，减少数据在数据库和应用服务器之前的传输，对于提高数据处理的效率是有好处的。</p><p>存储过程和函数的区别在于函数必须有返回值，而存储过程没有。</p><p>函数：是一个有返回值的过程。</p><p>过程：是一个没有返回值的函数。</p><h4 id="4-2创建存储过程"><a href="#4-2创建存储过程" class="headerlink" title="4.2创建存储过程"></a>4.2创建存储过程</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> procedure_name<span class="token punctuation">(</span><span class="token punctuation">[</span>proc_parameter<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">begin</span> <span class="token comment">--sql语句</span> <span class="token keyword">end</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>示例</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> pro_test1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">begin</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> demo<span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">deimiter $<span class="token punctuation">;</span> 替换$   <span class="token comment">#不让SQL执行；</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">deimiter $<span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> pro_test1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">begin</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> demo<span class="token punctuation">;</span><span class="token keyword">end</span>$deimiter <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-3调用存储过程"><a href="#4-3调用存储过程" class="headerlink" title="4.3调用存储过程"></a>4.3调用存储过程</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">call</span> pro_name<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="4-4查询存储过程"><a href="#4-4查询存储过程" class="headerlink" title="4.4查询存储过程"></a>4.4查询存储过程</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#查询db_name数据库中的所有存储过程</span><span class="token keyword">SELECT</span> name <span class="token keyword">from</span> mysql<span class="token punctuation">.</span>pro <span class="token keyword">WHERE</span> db <span class="token operator">=</span><span class="token string">'dbname'</span><span class="token punctuation">;</span><span class="token comment">#查询存储过程的状态信息</span><span class="token keyword">SHOW</span> <span class="token keyword">procedure</span> <span class="token keyword">status</span><span class="token punctuation">;</span><span class="token comment">#查询某个存储过程的定义</span><span class="token keyword">SHOW</span> <span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> test<span class="token punctuation">.</span>pro_test1 \G<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-5删除存储过程"><a href="#4-5删除存储过程" class="headerlink" title="4.5删除存储过程"></a>4.5删除存储过程</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">PROCEDURE</span> PRO_TEST<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="4-6语法"><a href="#4-6语法" class="headerlink" title="4.6语法"></a>4.6语法</h4><p>存储过程是可以编程的，意味着可以使用变量，表达式，控制结构，</p><p>来完成复杂的功能，</p><h5 id="4-6-1变量"><a href="#4-6-1变量" class="headerlink" title="4.6.1变量"></a>4.6.1变量</h5><p>DECLARE</p><p>通过DECLARE 可以定义一个局部变量该变量的作用范围只能在BIGIN…END块中.</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DECLARE</span> var_name<span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span> <span class="token keyword">type</span> <span class="token punctuation">[</span><span class="token keyword">DEFAULT</span> <span class="token keyword">value</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>示例</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">delimiter</span> $<span class="token keyword">create</span> <span class="token keyword">procedure</span> pro_test2<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">begin</span>   <span class="token keyword">declare</span> byn <span class="token keyword">int</span> <span class="token keyword">default</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token keyword">select</span> num<span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">end</span>$<span class="token keyword">delimiter</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>SET </p><p>直接赋值使用SET，可以赋值常量或者表达式；</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SET</span> var_name <span class="token operator">=</span> expr<span class="token punctuation">[</span><span class="token punctuation">,</span>varname<span class="token operator">=</span>expr<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>示例</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">procedure</span> pro_test<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">begin</span> <span class="token keyword">declare</span> num <span class="token keyword">int</span> <span class="token keyword">default</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">set</span> num <span class="token operator">=</span> num <span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">select</span> num<span class="token punctuation">;</span><span class="token keyword">end</span>$<span class="token keyword">call</span> pro_test<span class="token punctuation">(</span><span class="token punctuation">)</span>$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也可也通过SELECT … INTO 方式</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">procedure</span> pri_test<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">begin</span><span class="token keyword">declare</span> num <span class="token keyword">int</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">into</span> num <span class="token keyword">from</span> city<span class="token punctuation">;</span><span class="token keyword">select</span> concat<span class="token punctuation">(</span><span class="token string">'city表中的记录数为：'</span><span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span>$<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-6-2if条件判断"><a href="#4-6-2if条件判断" class="headerlink" title="4.6.2if条件判断"></a>4.6.2if条件判断</h5><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">if</span> search_condition <span class="token keyword">then</span> statement_list​     <span class="token punctuation">[</span><span class="token keyword">else</span> <span class="token keyword">if</span> search_condition <span class="token keyword">then</span> statement_list <span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>​      <span class="token punctuation">[</span><span class="token keyword">else</span> statement_list<span class="token punctuation">]</span><span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/posts/9982416a/image-20220916211355972.png" class="" title="image-20220916211355972"><h5 id="4-6-3传递参数"><a href="#4-6-3传递参数" class="headerlink" title="4.6.3传递参数"></a>4.6.3传递参数</h5><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">procedure</span> procedure_name<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">in</span><span class="token operator">/</span><span class="token keyword">out</span><span class="token operator">/</span><span class="token keyword">inout</span><span class="token punctuation">]</span>参数名 类型<span class="token punctuation">)</span><span class="token operator">IN</span>  默认  输入<span class="token keyword">OUT</span> 输出<span class="token keyword">INOUT</span> 输入输出都可以<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/posts/9982416a/image-20220916212201510.png" class="" title="image-20220916212201510"><p>OUT输出</p><img src="/posts/9982416a/image-20220916212530706.png" class="" title="image-20220916212530706"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">call</span> pro_test<span class="token punctuation">(</span><span class="token number">188</span><span class="token punctuation">,</span><span class="token variable">@description</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token variable">@description</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><img src="/posts/9982416a/image-20220916212809128.png" class="" title="image-20220916212809128"><h5 id="4-6-4case结构"><a href="#4-6-4case结构" class="headerlink" title="4.6.4case结构"></a>4.6.4case结构</h5><img src="/posts/9982416a/image-20220916212916883.png" class="" title="image-20220916212916883"><p>示例</p><img src="/posts/9982416a/image-20220916213410426.png" class="" title="image-20220916213410426"><h5 id="4-6-5while循环"><a href="#4-6-5while循环" class="headerlink" title="4.6.5while循环"></a>4.6.5while循环</h5><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">while</span> search_condition <span class="token keyword">do</span>  statement_list  <span class="token keyword">end</span> <span class="token keyword">while</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>需求</p><pre class="line-numbers language-none"><code class="language-none">计算1加到n得值<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>示例</p><img src="/posts/9982416a/image-20220916213945372.png" class="" title="image-20220916213945372"><h5 id="4-6-6repeat结构"><a href="#4-6-6repeat结构" class="headerlink" title="4.6.6repeat结构"></a>4.6.6repeat结构</h5><p>满足条件得时候退出</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">REPEAT</span> statement_list UNTIL search_list<span class="token keyword">END</span> <span class="token keyword">REPEAT</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>需求</p><pre class="line-numbers language-none"><code class="language-none">计算1加到n得值<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/posts/9982416a/image-20220916214549897.png" class="" title="image-20220916214549897"><h5 id="4-6-7loop语句"><a href="#4-6-7loop语句" class="headerlink" title="4.6.7loop语句"></a>4.6.7loop语句</h5><p>LOOP实现简单得循环，退出循环使用LEAVE语句实现</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token punctuation">[</span>begin_lable:<span class="token punctuation">]</span> <span class="token keyword">LOOP</span> statement_list<span class="token keyword">END</span> <span class="token keyword">LOOP</span> <span class="token punctuation">[</span>END_LABLE<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果不加退出会成为死循环。</p><h5 id="4-6-8leave语句"><a href="#4-6-8leave语句" class="headerlink" title="4.6.8leave语句"></a>4.6.8leave语句</h5><img src="/posts/9982416a/image-20220916215115587.png" class="" title="image-20220916215115587"><h5 id="4-6-9游标-光标"><a href="#4-6-9游标-光标" class="headerlink" title="4.6.9游标/光标"></a>4.6.9游标/光标</h5><p>用来存储查询结果集。</p><p>声明光标</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DECLARE</span> cursor_name <span class="token keyword">CURSOR</span> <span class="token keyword">FOR</span> select_statement<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>OPEN 光标</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">OPEN</span> cursor_name；<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>FETCH 光标</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">FETCH</span> cursor_name <span class="token keyword">INTO</span> var_name<span class="token punctuation">[</span><span class="token punctuation">,</span>var_name<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/posts/9982416a/image-20220916215704244.png" class="" title="image-20220916215704244"><p>调用一次  走一个。</p><p>CLOSE光标</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CLOSE</span> cursor_name<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>示例</p><img src="/posts/9982416a/image-20220916215842210.png" class="" title="image-20220916215842210"><img src="/posts/9982416a/image-20220916220224440.png" class="" title="image-20220916220224440"><p>没有的会报错；循环获取游标，解决报错，</p><img src="/posts/9982416a/image-20220916220718873.png" class="" title="image-20220916220718873"><img src="/posts/9982416a/image-20220916221051703.png" class="" title="image-20220916221051703"><h4 id="4-7存储函数"><a href="#4-7存储函数" class="headerlink" title="4.7存储函数"></a>4.7存储函数</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">FUNCTION</span> function_name<span class="token punctuation">(</span><span class="token punctuation">[</span>param typr<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">RETURNS</span> <span class="token keyword">type</span><span class="token keyword">begin</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">end</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/posts/9982416a/image-20220916221609704.png" class="" title="image-20220916221609704"><h3 id="5-触发器"><a href="#5-触发器" class="headerlink" title="5.触发器"></a>5.触发器</h3><h4 id="5-1介绍"><a href="#5-1介绍" class="headerlink" title="5.1介绍"></a>5.1介绍</h4><img src="/posts/9982416a/image-20220916222022657.png" class="" title="image-20220916222022657"><h4 id="5-2创建触发器"><a href="#5-2创建触发器" class="headerlink" title="5.2创建触发器"></a>5.2创建触发器</h4><img src="/posts/9982416a/image-20220916222347533.png" class="" title="image-20220916222347533"><img src="/posts/9982416a/image-20220916222945225.png" class="" title="image-20220916222945225"><img src="/posts/9982416a/image-20220916223320315.png" class="" title="image-20220916223320315"><img src="/posts/9982416a/image-20220916223444553.png" class="" title="image-20220916223444553"><h4 id="5-3删除触发器"><a href="#5-3删除触发器" class="headerlink" title="5.3删除触发器"></a>5.3删除触发器</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">trigger</span> <span class="token punctuation">[</span>schema_name<span class="token punctuation">.</span><span class="token punctuation">]</span>trigger_name<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="5-4查看触发器"><a href="#5-4查看触发器" class="headerlink" title="5.4查看触发器"></a>5.4查看触发器</h4><pre class="line-numbers language-none"><code class="language-none">show triggers;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="MySQL高级-day2"><a href="#MySQL高级-day2" class="headerlink" title="MySQL高级-day2"></a>MySQL高级-day2</h2><h3 id="1-Mysql的体系结构概括"><a href="#1-Mysql的体系结构概括" class="headerlink" title="1.Mysql的体系结构概括"></a>1.Mysql的体系结构概括</h3><img src="/posts/9982416a/image-20220917104224386.png" class="" title="image-20220917104224386"><img src="/posts/9982416a/image-20220917105416573.png" class="" title="image-20220917105416573"><h3 id="2-存储引擎"><a href="#2-存储引擎" class="headerlink" title="2.存储引擎"></a>2.存储引擎</h3><h4 id="2-1存储引擎概述"><a href="#2-1存储引擎概述" class="headerlink" title="2.1存储引擎概述"></a>2.1存储引擎概述</h4><p> 和大多数的数据库不同，mysql中有个一个存储引擎的概念，针对不同的存储需求可以选择最优的存储引擎。</p><p> 存储引擎就是存储数据，建立索引，更新查询数据等等技术的实现方式，存储引擎是基于表的，而不是基于库的。所以存储引擎也可以称为表类型。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#支持的存储引擎</span><span class="token keyword">show</span> engines<span class="token punctuation">;</span><span class="token keyword">InnoDB</span> 默认<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="2-2各种之间的特性"><a href="#2-2各种之间的特性" class="headerlink" title="2.2各种之间的特性"></a>2.2各种之间的特性</h4><img src="/posts/9982416a/image-20220917110157389.png" class="" title="image-20220917110157389"><h5 id="2-2-1InonDB"><a href="#2-2-1InonDB" class="headerlink" title="2.2.1InonDB"></a>2.2.1InonDB</h5><p>​    InnoDB 存储引擎是Mysql的默认存储引擎。InnoDB  提供了具有  提交，回滚，崩溃恢复能力的事务安全，</p><p><strong>事务控制</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> goods_innodb<span class="token punctuation">(</span> id <span class="token keyword">int</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span> name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">innodb</span> <span class="token keyword">DEFAULT</span> CHAREST<span class="token operator">=</span>utf8<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">START</span> <span class="token keyword">TRANSACTION</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> goods_innodb<span class="token punctuation">(</span>id<span class="token punctuation">,</span>name<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'46'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">commit</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="2-2-2MyISAM"><a href="#2-2-2MyISAM" class="headerlink" title="2.2.2MyISAM"></a>2.2.2MyISAM</h5><p>  MyISAM不支持事务，也不支持外键，优势是访问熟读快，支持表锁。</p><p><strong>文件存储方式</strong></p><p>.frm(存储表定义)；</p><p>.MYD(MYData,存储数据)；</p><p>.MY(MYIndex,存储索引)；</p><h5 id="2-2-3-MEMORY"><a href="#2-2-3-MEMORY" class="headerlink" title="2.2.3 MEMORY"></a>2.2.3 MEMORY</h5><img src="/posts/9982416a/image-20220917113000453.png" class="" title="image-20220917113000453"><h5 id="2-2-4MERGE"><a href="#2-2-4MERGE" class="headerlink" title="2.2.4MERGE"></a>2.2.4MERGE</h5><img src="/posts/9982416a/image-20220917113015821.png" class="" title="image-20220917113015821"><h4 id="2-3存储引擎的选择"><a href="#2-3存储引擎的选择" class="headerlink" title="2.3存储引擎的选择"></a>2.3存储引擎的选择</h4><img src="/posts/9982416a/image-20220917113132978.png" class="" title="image-20220917113132978"><h3 id="3-优化SQL步骤"><a href="#3-优化SQL步骤" class="headerlink" title="3.优化SQL步骤"></a>3.优化SQL步骤</h3><h4 id="3-1查看SQL的执行频率"><a href="#3-1查看SQL的执行频率" class="headerlink" title="3.1查看SQL的执行频率"></a>3.1查看SQL的执行频率</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#连接的</span><span class="token keyword">show</span> <span class="token keyword">status</span> <span class="token operator">like</span> <span class="token string">'Com_______'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#全局的</span><span class="token keyword">show</span>  <span class="token keyword">global</span> <span class="token keyword">status</span> <span class="token operator">like</span> <span class="token string">'Com_______'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#InnoDB 查询</span><span class="token keyword">show</span> <span class="token keyword">global</span> <span class="token keyword">status</span> <span class="token operator">like</span> <span class="token string">'Innodb_row_%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><img src="/posts/9982416a/image-20220917114142824.png" class="" title="image-20220917114142824"><h4 id="3-2定位低效率执行SQL"><a href="#3-2定位低效率执行SQL" class="headerlink" title="3.2定位低效率执行SQL"></a>3.2定位低效率执行SQL</h4><img src="/posts/9982416a/image-20220917114506680.png" class="" title="image-20220917114506680"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SHOW</span> PROCESSLIST<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/posts/9982416a/image-20220917114640275.png" class="" title="image-20220917114640275"><img src="/posts/9982416a/image-20220917115051691.png" class="" title="image-20220917115051691"><img src="/posts/9982416a/image-20220917115124543.png" class="" title="image-20220917115124543"><h4 id="3-3explain分析执行计划"><a href="#3-3explain分析执行计划" class="headerlink" title="3.3explain分析执行计划"></a>3.3explain分析执行计划</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> demo<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/posts/9982416a/image-20220917115247766.png" class="" title="image-20220917115247766"><img src="/posts/9982416a/image-20220917115324138.png" class="" title="image-20220917115324138"><h5 id="3-3-1explain之id"><a href="#3-3-1explain之id" class="headerlink" title="3.3.1explain之id"></a>3.3.1explain之id</h5><p>id字段是SELECT查询的序列号，是一组数字，表示的是查询中执行select子句或者表操作的顺序。id有三种情况。</p><p>1.id相同表示加载表的顺序是从上到下。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_roler r<span class="token punctuation">,</span>t_user u<span class="token punctuation">,</span>user_role ur <span class="token operator">=</span><span class="token keyword">where</span> r<span class="token punctuation">.</span>id<span class="token operator">=</span>ur<span class="token punctuation">.</span>role_id <span class="token operator">and</span> u<span class="token punctuation">.</span>id <span class="token operator">=</span> ur<span class="token punctuation">.</span>user_id<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/posts/9982416a/image-20220917120054256.png" class="" title="image-20220917120054256"><p>2.id不同值越大，优先级越高，</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_role <span class="token keyword">where</span> id<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">select</span> role_id <span class="token keyword">from</span> user_role <span class="token keyword">where</span> user_id <span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">select</span> id <span class="token operator">=</span> <span class="token keyword">from</span> t_user <span class="token keyword">where</span> username <span class="token operator">=</span> <span class="token string">'stu1'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/posts/9982416a/image-20220917120429077.png" class="" title="image-20220917120429077"><p>3.id有相同也有不同</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_role r<span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> user_role ur <span class="token keyword">where</span> ur<span class="token punctuation">.</span><span class="token keyword">user</span><span class="token punctuation">.</span>id<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span> a <span class="token keyword">where</span> r<span class="token punctuation">.</span>id <span class="token operator">=</span> a<span class="token punctuation">.</span>role_id<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/posts/9982416a/image-20220917120658323.png" class="" title="image-20220917120658323"><h5 id="3-3-2explain之select-type"><a href="#3-3-2explain之select-type" class="headerlink" title="3.3.2explain之select_type"></a>3.3.2explain之select_type</h5><img src="/posts/9982416a/image-20220917120815000.png" class="" title="image-20220917120815000"><h5 id="3-3-3explain之table"><a href="#3-3-3explain之table" class="headerlink" title="3.3.3explain之table"></a>3.3.3explain之table</h5><p>展示这一行的数据是关于那张表</p><h5 id="3-3-4explain之type"><a href="#3-3-4explain之type" class="headerlink" title="3.3.4explain之type"></a>3.3.4explain之type</h5><img src="/posts/9982416a/image-20220917121647486.png" class="" title="image-20220917121647486"><img src="/posts/9982416a/image-20220917122238355.png" class="" title="image-20220917122238355"><h5 id="3-3-5explain之key"><a href="#3-3-5explain之key" class="headerlink" title="3.3.5explain之key"></a>3.3.5explain之key</h5><img src="/posts/9982416a/image-20220917122422012.png" class="" title="image-20220917122422012"><h5 id="3-3-6explain之row"><a href="#3-3-6explain之row" class="headerlink" title="3.3.6explain之row"></a>3.3.6explain之row</h5><img src="/posts/9982416a/image-20220917122431663.png" class="" title="image-20220917122431663"><h5 id="3-3-7explain之extra"><a href="#3-3-7explain之extra" class="headerlink" title="3.3.7explain之extra"></a>3.3.7explain之extra</h5><img src="/posts/9982416a/image-20220917122443224.png" class="" title="image-20220917122443224"><h4 id="3-4show-profile-分析SQL"><a href="#3-4show-profile-分析SQL" class="headerlink" title="3.4show profile 分析SQL"></a>3.4show profile 分析SQL</h4><img src="/posts/9982416a/image-20220917123712399.png" class="" title="image-20220917123712399"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> profiles<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/posts/9982416a/image-20220917123930830.png" class="" title="image-20220917123930830"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> profile <span class="token keyword">for</span> query queryID；<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/posts/9982416a/image-20220917124054952.png" class="" title="image-20220917124054952"><h4 id="3-5trace分析优化器执行计划"><a href="#3-5trace分析优化器执行计划" class="headerlink" title="3.5trace分析优化器执行计划"></a>3.5trace分析优化器执行计划</h4><img src="/posts/9982416a/image-20220917124435091.png" class="" title="image-20220917124435091"><pre class="line-numbers language-none"><code class="language-none">set optimizer_trace ="enable =on",end_markers_in_json=on;set optimizer_trace_max_mem_size=1000000;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><img src="/posts/9982416a/image-20220917124735525.png" class="" title="image-20220917124735525"><h3 id="4-索引的使用"><a href="#4-索引的使用" class="headerlink" title="4. 索引的使用"></a>4. 索引的使用</h3><p>索引是数据库优化最常用也是最重要的手段之一, 通过索引通常可以帮助用户解决大多数的MySQL的性能优化问题。</p><h4 id="4-1-验证索引提升查询效率"><a href="#4-1-验证索引提升查询效率" class="headerlink" title="4.1 验证索引提升查询效率"></a>4.1 验证索引提升查询效率</h4><p>在我们准备的表结构tb_item 中， 一共存储了 300 万记录；</p><p>A. 根据ID查询 </p><pre class="line-numbers language-none"><code class="language-none">select * from tb_item where id = 1999\G;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查询速度很快， 接近0s ， 主要的原因是因为id为主键， 有索引；</p><p>2). 根据 title 进行精确查询</p><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">select * from tb_item where title = 'iphoneX 移动3G 32G941'\G; <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>处理方案 ， 针对title字段， 创建索引 ： </p><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">create index idx_item_title on tb_item(title);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>索引创建完成之后，再次进行查询 ： </p><p>通过explain ， 查看执行计划，执行SQL时使用了刚才创建的索引 </p><h4 id="4-2-索引的使用"><a href="#4-2-索引的使用" class="headerlink" title="4.2 索引的使用"></a>4.2 索引的使用</h4><h5 id="4-2-1-准备环境"><a href="#4-2-1-准备环境" class="headerlink" title="4.2.1 准备环境"></a>4.2.1 准备环境</h5><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token punctuation">`</span>tb_seller<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>sellerid<span class="token punctuation">`</span> <span class="token keyword">varchar</span> <span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token keyword">varchar</span> <span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">`</span>nickname<span class="token punctuation">`</span> <span class="token keyword">varchar</span> <span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">`</span>password<span class="token punctuation">`</span> <span class="token keyword">varchar</span> <span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">`</span><span class="token keyword">status</span><span class="token punctuation">`</span> <span class="token keyword">varchar</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">`</span>address<span class="token punctuation">`</span> <span class="token keyword">varchar</span> <span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">`</span>createtime<span class="token punctuation">`</span> <span class="token keyword">datetime</span><span class="token punctuation">,</span>    <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">(</span><span class="token punctuation">`</span>sellerid<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">engine</span><span class="token operator">=</span><span class="token keyword">innodb</span> <span class="token keyword">default</span> <span class="token keyword">charset</span><span class="token operator">=</span>utf8mb4<span class="token punctuation">;</span> <span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token punctuation">`</span>tb_seller<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>sellerid<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>nickname<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>password<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span><span class="token keyword">status</span><span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>address<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>createtime<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'alibaba'</span><span class="token punctuation">,</span><span class="token string">'阿里巴巴'</span><span class="token punctuation">,</span><span class="token string">'阿里小店'</span><span class="token punctuation">,</span><span class="token string">'e10adc3949ba59abbe56e057f20f883e'</span><span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'北京市'</span><span class="token punctuation">,</span><span class="token string">'2088-01-01 12:00:00'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token punctuation">`</span>tb_seller<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>sellerid<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>nickname<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>password<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span><span class="token keyword">status</span><span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>address<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>createtime<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'baidu'</span><span class="token punctuation">,</span><span class="token string">'百度科技有限公司'</span><span class="token punctuation">,</span><span class="token string">'百度小店'</span><span class="token punctuation">,</span><span class="token string">'e10adc3949ba59abbe56e057f20f883e'</span><span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'北京市'</span><span class="token punctuation">,</span><span class="token string">'2088-01-01 12:00:00'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token punctuation">`</span>tb_seller<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>sellerid<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>nickname<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>password<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span><span class="token keyword">status</span><span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>address<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>createtime<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'huawei'</span><span class="token punctuation">,</span><span class="token string">'华为科技有限公司'</span><span class="token punctuation">,</span><span class="token string">'华为小店'</span><span class="token punctuation">,</span><span class="token string">'e10adc3949ba59abbe56e057f20f883e'</span><span class="token punctuation">,</span><span class="token string">'0'</span><span class="token punctuation">,</span><span class="token string">'北京市'</span><span class="token punctuation">,</span><span class="token string">'2088-01-01 12:00:00'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token punctuation">`</span>tb_seller<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>sellerid<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>nickname<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>password<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span><span class="token keyword">status</span><span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>address<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>createtime<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'itcast'</span><span class="token punctuation">,</span><span class="token string">'传智播客教育科技有限公司'</span><span class="token punctuation">,</span><span class="token string">'传智播客'</span><span class="token punctuation">,</span><span class="token string">'e10adc3949ba59abbe56e057f20f883e'</span><span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'北京市'</span><span class="token punctuation">,</span><span class="token string">'2088-01-01 12:00:00'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token punctuation">`</span>tb_seller<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>sellerid<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>nickname<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>password<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span><span class="token keyword">status</span><span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>address<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>createtime<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'itheima'</span><span class="token punctuation">,</span><span class="token string">'黑马程序员'</span><span class="token punctuation">,</span><span class="token string">'黑马程序员'</span><span class="token punctuation">,</span><span class="token string">'e10adc3949ba59abbe56e057f20f883e'</span><span class="token punctuation">,</span><span class="token string">'0'</span><span class="token punctuation">,</span><span class="token string">'北京市'</span><span class="token punctuation">,</span><span class="token string">'2088-01-01 12:00:00'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token punctuation">`</span>tb_seller<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>sellerid<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>nickname<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>password<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span><span class="token keyword">status</span><span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>address<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>createtime<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'luoji'</span><span class="token punctuation">,</span><span class="token string">'罗技科技有限公司'</span><span class="token punctuation">,</span><span class="token string">'罗技小店'</span><span class="token punctuation">,</span><span class="token string">'e10adc3949ba59abbe56e057f20f883e'</span><span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'北京市'</span><span class="token punctuation">,</span><span class="token string">'2088-01-01 12:00:00'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token punctuation">`</span>tb_seller<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>sellerid<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>nickname<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>password<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span><span class="token keyword">status</span><span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>address<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>createtime<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'oppo'</span><span class="token punctuation">,</span><span class="token string">'OPPO科技有限公司'</span><span class="token punctuation">,</span><span class="token string">'OPPO官方旗舰店'</span><span class="token punctuation">,</span><span class="token string">'e10adc3949ba59abbe56e057f20f883e'</span><span class="token punctuation">,</span><span class="token string">'0'</span><span class="token punctuation">,</span><span class="token string">'北京市'</span><span class="token punctuation">,</span><span class="token string">'2088-01-01 12:00:00'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token punctuation">`</span>tb_seller<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>sellerid<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>nickname<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>password<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span><span class="token keyword">status</span><span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>address<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>createtime<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'ourpalm'</span><span class="token punctuation">,</span><span class="token string">'掌趣科技股份有限公司'</span><span class="token punctuation">,</span><span class="token string">'掌趣小店'</span><span class="token punctuation">,</span><span class="token string">'e10adc3949ba59abbe56e057f20f883e'</span><span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'北京市'</span><span class="token punctuation">,</span><span class="token string">'2088-01-01 12:00:00'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token punctuation">`</span>tb_seller<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>sellerid<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>nickname<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>password<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span><span class="token keyword">status</span><span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>address<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>createtime<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'qiandu'</span><span class="token punctuation">,</span><span class="token string">'千度科技'</span><span class="token punctuation">,</span><span class="token string">'千度小店'</span><span class="token punctuation">,</span><span class="token string">'e10adc3949ba59abbe56e057f20f883e'</span><span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">,</span><span class="token string">'北京市'</span><span class="token punctuation">,</span><span class="token string">'2088-01-01 12:00:00'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token punctuation">`</span>tb_seller<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>sellerid<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>nickname<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>password<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span><span class="token keyword">status</span><span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>address<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>createtime<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'sina'</span><span class="token punctuation">,</span><span class="token string">'新浪科技有限公司'</span><span class="token punctuation">,</span><span class="token string">'新浪官方旗舰店'</span><span class="token punctuation">,</span><span class="token string">'e10adc3949ba59abbe56e057f20f883e'</span><span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'北京市'</span><span class="token punctuation">,</span><span class="token string">'2088-01-01 12:00:00'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token punctuation">`</span>tb_seller<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>sellerid<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>nickname<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>password<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span><span class="token keyword">status</span><span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>address<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>createtime<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'xiaomi'</span><span class="token punctuation">,</span><span class="token string">'小米科技'</span><span class="token punctuation">,</span><span class="token string">'小米官方旗舰店'</span><span class="token punctuation">,</span><span class="token string">'e10adc3949ba59abbe56e057f20f883e'</span><span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'西安市'</span><span class="token punctuation">,</span><span class="token string">'2088-01-01 12:00:00'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token punctuation">`</span>tb_seller<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>sellerid<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>nickname<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>password<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span><span class="token keyword">status</span><span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>address<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>createtime<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'yijia'</span><span class="token punctuation">,</span><span class="token string">'宜家家居'</span><span class="token punctuation">,</span><span class="token string">'宜家家居旗舰店'</span><span class="token punctuation">,</span><span class="token string">'e10adc3949ba59abbe56e057f20f883e'</span><span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'北京市'</span><span class="token punctuation">,</span><span class="token string">'2088-01-01 12:00:00'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">index</span> idx_seller_name_sta_addr <span class="token keyword">on</span> tb_seller<span class="token punctuation">(</span>name<span class="token punctuation">,</span><span class="token keyword">status</span><span class="token punctuation">,</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-2-2-避免索引失效"><a href="#4-2-2-避免索引失效" class="headerlink" title="4.2.2 避免索引失效"></a>4.2.2 避免索引失效</h5><p>1).  全值匹配 ，对索引中所有列都指定具体值。</p><p>改情况下，索引生效，执行效率高。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tb_seller <span class="token keyword">where</span> name<span class="token operator">=</span><span class="token string">'小米科技'</span> <span class="token operator">and</span> <span class="token keyword">status</span><span class="token operator">=</span><span class="token string">'1'</span> <span class="token operator">and</span> address<span class="token operator">=</span><span class="token string">'北京市'</span>\G<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/posts/9982416a/1556170997921.png" class="" width="1556170997921"> <p>2). 最左前缀法则</p><p>如果索引了多列，要遵守最左前缀法则。指的是查询从索引的最左前列开始，并且不跳过索引中的列。</p><p>匹配最左前缀法则，走索引：</p><img src="/posts/9982416a/1556171348995.png" class="" width="1556171348995">  <p>违法最左前缀法则 ， 索引失效：</p><img src="/posts/9982416a/1556171428140.png" class="" width="1556171428140"> <p>如果符合最左法则，但是出现跳跃某一列，只有最左列索引生效：</p><img src="/posts/9982416a/1556171662203.png" class="" width="1556171662203"> <p>3). 范围查询右边的列，不能使用索引 。</p><img src="/posts/9982416a/1556172256791.png" class="" width="1556172256791"> <p>根据前面的两个字段name ， status 查询是走索引的， 但是最后一个条件address 没有用到索引。</p><p>4). 不要在索引列上进行运算操作， 索引将失效。</p><img src="/posts/9982416a/1556172813715.png" class="" width="1556172813715"> <p>5). 字符串不加单引号，造成索引失效。</p><img src="/posts/9982416a/1556172967493.png" class="" width="1556172967493"> <p>由于，在查询是，没有对字符串加单引号，MySQL的查询优化器，会自动的进行类型转换，造成索引失效。</p><p>6). 尽量使用覆盖索引，避免select *</p><p>尽量使用覆盖索引（只访问索引的查询（索引列完全包含查询列）），减少select * 。</p><img src="/posts/9982416a/1556173928299.png" class="" width="1556173928299"> <p>如果查询列，超出索引列，也会降低性能。</p><img src="/posts/9982416a/1556173986068.png" class="" width="1556173986068"> <pre class="line-numbers language-none"><code class="language-none">TIP :     using index ：使用覆盖索引的时候就会出现    using where：在查找使用索引的情况下，需要回表去查询所需的数据    using index condition：查找使用了索引，但是需要回表查询数据    using index ; using where：查找使用了索引，但是需要的数据都在索引列中能找到，所以不需要回表查询数据<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>7). 用or分割开的条件， 如果or前的条件中的列有索引，而后面的列中没有索引，那么涉及的索引都不会被用到。</p><p>示例，name字段是索引列 ， 而createtime不是索引列，中间是or进行连接是不走索引的 ： </p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tb_seller <span class="token keyword">where</span> name<span class="token operator">=</span><span class="token string">'黑马程序员'</span> <span class="token operator">or</span> createtime <span class="token operator">=</span> <span class="token string">'2088-01-01 12:00:00'</span>\G<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/posts/9982416a/1556174994440.png" class="" width="1556174994440"> <p>8).  以%开头的Like模糊查询，索引失效。</p><p>如果仅仅是尾部模糊匹配，索引不会失效。如果是头部模糊匹配，索引失效。</p><img src="/posts/9982416a/1556175114369.png" class="" width="1556175114369"> <p>解决方案 ： </p><p>通过覆盖索引来解决 </p><img src="/posts/9982416a/1556247686483.png" class="" width="1556247686483"> <p>9). 如果MySQL评估使用索引比全表更慢，则不使用索引。</p><img src="/posts/9982416a/1556175445210.png" class="" width="1556175445210"> <p>10). is  NULL ， is NOT NULL  <font color="red">有时</font>索引失效。</p><img src="/posts/9982416a/1556180634889.png" class="" width="1556180634889">  <p>11). in 走索引， not in 索引失效。</p><img src="/posts/9982416a/1556249602732.png" class="" width="1556249602732">  <p>12). 单列索引和复合索引。</p><p>尽量使用复合索引，而少使用单列索引 。</p><p>创建复合索引 </p><pre class="line-numbers language-none"><code class="language-none">create index idx_name_sta_address on tb_seller(name, status, address);就相当于创建了三个索引 ： namename + statusname + status + address<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建单列索引 </p><pre class="line-numbers language-none"><code class="language-none">create index idx_seller_name on tb_seller(name);create index idx_seller_status on tb_seller(status);create index idx_seller_address on tb_seller(address);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>数据库会选择一个最优的索引（辨识度最高索引）来使用，并不会使用全部索引 。</p><h4 id="4-3-查看索引使用情况"><a href="#4-3-查看索引使用情况" class="headerlink" title="4.3 查看索引使用情况"></a>4.3 查看索引使用情况</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">status</span> <span class="token operator">like</span> <span class="token string">'Handler_read%'</span><span class="token punctuation">;</span><span class="token keyword">show</span> <span class="token keyword">global</span> <span class="token keyword">status</span> <span class="token operator">like</span> <span class="token string">'Handler_read%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="/posts/9982416a/1552885364563.png" class="" width="1552885364563"> <pre class="line-numbers language-none"><code class="language-none">Handler_read_first：索引中第一条被读的次数。如果较高，表示服务器正执行大量全索引扫描（这个值越低越好）。Handler_read_key：如果索引正在工作，这个值代表一个行被索引值读的次数，如果值越低，表示索引得到的性能改善不高，因为索引不经常使用（这个值越高越好）。Handler_read_next ：按照键顺序读下一行的请求数。如果你用范围约束或如果执行索引扫描来查询索引列，该值增加。Handler_read_prev：按照键顺序读前一行的请求数。该读方法主要用于优化ORDER BY ... DESC。Handler_read_rnd ：根据固定位置读一行的请求数。如果你正执行大量查询并需要对结果进行排序该值较高。你可能使用了大量需要MySQL扫描整个表的查询或你的连接没有正确使用键。这个值较高，意味着运行效率低，应该建立索引来补救。Handler_read_rnd_next：在数据文件中读下一行的请求数。如果你正进行大量的表扫描，该值较高。通常说明你的表索引不正确或写入的查询没有利用索引。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-SQL优化"><a href="#5-SQL优化" class="headerlink" title="5. SQL优化"></a>5. SQL优化</h3><h4 id="5-1-大批量插入数据"><a href="#5-1-大批量插入数据" class="headerlink" title="5.1 大批量插入数据"></a>5.1 大批量插入数据</h4><p>环境准备 ： </p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>tb_user_2<span class="token punctuation">`</span> <span class="token punctuation">(</span>  <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>username<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>password<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">96</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>birthday<span class="token punctuation">`</span> <span class="token keyword">datetime</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>sex<span class="token punctuation">`</span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>email<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>phone<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>qq<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span><span class="token keyword">status</span><span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'用户状态'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>create_time<span class="token punctuation">`</span> <span class="token keyword">datetime</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>update_time<span class="token punctuation">`</span> <span class="token keyword">datetime</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">UNIQUE</span> <span class="token keyword">KEY</span> <span class="token punctuation">`</span>unique_user_username<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>username<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8 <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当使用load 命令导入数据的时候，适当的设置可以提高导入的效率。</p><img src="/posts/9982416a/1556269346488.png" class="" width="1556269346488"> <p>对于 InnoDB 类型的表，有以下几种方式可以提高导入的效率：</p><p>1） 主键顺序插入</p><p>因为InnoDB类型的表是按照主键的顺序保存的，所以将导入的数据按照主键的顺序排列，可以有效的提高导入数据的效率。如果InnoDB表没有主键，那么系统会自动默认创建一个内部列作为主键，所以如果可以给表创建一个主键，将可以利用这点，来提高导入数据的效率。</p><pre class="line-numbers language-none"><code class="language-none">脚本文件介绍 :sql1.log  ----&gt; 主键有序sql2.log  ----&gt; 主键无序<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>插入ID顺序排列数据：</p><img src="/posts/9982416a/1555771750567.png" class="" width="1555771750567"><p>插入ID无序排列数据：</p><img src="/posts/9982416a/1555771959734.png" class="" width="1555771959734"> <p>2） 关闭唯一性校验</p><p>在导入数据前执行 SET UNIQUE_CHECKS=0，关闭唯一性校验，在导入结束后执行SET UNIQUE_CHECKS=1，恢复唯一性校验，可以提高导入的效率。</p><img src="/posts/9982416a/1555772132736.png" class="" width="1555772132736"> <p>3） 手动提交事务</p><p>如果应用使用自动提交的方式，建议在导入前执行 SET AUTOCOMMIT=0，关闭自动提交，导入结束后再执行 SET AUTOCOMMIT=1，打开自动提交，也可以提高导入的效率。</p><img src="/posts/9982416a/1555772351208.png" class="" width="1555772351208"><h4 id="5-2-优化insert语句"><a href="#5-2-优化insert语句" class="headerlink" title="5.2 优化insert语句"></a>5.2 优化insert语句</h4><p>当进行数据的insert操作的时候，可以考虑采用以下几种优化方案。</p><ul><li><p>如果需要同时对一张表插入很多行数据时，应该尽量使用多个值表的insert语句，这种方式将大大的缩减客户端与数据库之间的连接、关闭等消耗。使得效率比分开执行的单个insert语句快。</p><p>示例， 原始方式为：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> tb_test <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'Tom'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> tb_test <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'Cat'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> tb_test <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'Jerry'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>优化后的方案为 ： </p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> tb_test <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'Tom'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'Cat'</span><span class="token punctuation">)</span>，<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'Jerry'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>在事务中进行数据插入。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">start</span> <span class="token keyword">transaction</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> tb_test <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'Tom'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> tb_test <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'Cat'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> tb_test <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'Jerry'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">commit</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>数据有序插入</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> tb_test <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">'Tim'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> tb_test <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'Tom'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> tb_test <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'Jerry'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> tb_test <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">'Rose'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> tb_test <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'Cat'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优化后</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> tb_test <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'Tom'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> tb_test <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'Cat'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> tb_test <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'Jerry'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> tb_test <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">'Tim'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> tb_test <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">'Rose'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="5-3-优化order-by语句"><a href="#5-3-优化order-by语句" class="headerlink" title="5.3 优化order by语句"></a>5.3 优化order by语句</h4><h5 id="5-3-1-环境准备"><a href="#5-3-1-环境准备" class="headerlink" title="5.3.1 环境准备"></a>5.3.1 环境准备</h5><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">CREATE TABLE `emp` (  `id` int(11) NOT NULL AUTO_INCREMENT,  `name` varchar(100) NOT NULL,  `age` int(3) NOT NULL,  `salary` int(11) DEFAULT NULL,  PRIMARY KEY (`id`)) ENGINE=InnoDB  DEFAULT CHARSET=utf8mb4;insert into `emp` (`id`, `name`, `age`, `salary`) values('1','Tom','25','2300');insert into `emp` (`id`, `name`, `age`, `salary`) values('2','Jerry','30','3500');insert into `emp` (`id`, `name`, `age`, `salary`) values('3','Luci','25','2800');insert into `emp` (`id`, `name`, `age`, `salary`) values('4','Jay','36','3500');insert into `emp` (`id`, `name`, `age`, `salary`) values('5','Tom2','21','2200');insert into `emp` (`id`, `name`, `age`, `salary`) values('6','Jerry2','31','3300');insert into `emp` (`id`, `name`, `age`, `salary`) values('7','Luci2','26','2700');insert into `emp` (`id`, `name`, `age`, `salary`) values('8','Jay2','33','3500');insert into `emp` (`id`, `name`, `age`, `salary`) values('9','Tom3','23','2400');insert into `emp` (`id`, `name`, `age`, `salary`) values('10','Jerry3','32','3100');insert into `emp` (`id`, `name`, `age`, `salary`) values('11','Luci3','26','2900');insert into `emp` (`id`, `name`, `age`, `salary`) values('12','Jay3','37','4500');create index idx_emp_age_salary on emp(age,salary);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="5-3-2-两种排序方式"><a href="#5-3-2-两种排序方式" class="headerlink" title="5.3.2 两种排序方式"></a>5.3.2 两种排序方式</h5><p>1). 第一种是通过对返回数据进行排序，也就是通常说的 filesort 排序，所有不是通过索引直接返回排序结果的排序都叫 FileSort 排序。</p><img src="/posts/9982416a/1556335817763.png" class="" width="1556335817763"> <p>2). 第二种通过有序索引顺序扫描直接返回有序数据，这种情况即为 using index，不需要额外排序，操作效率高。</p><img src="/posts/9982416a/1556335866539.png" class="" width="1556335866539"> <p>多字段排序</p><img src="/posts/9982416a/1556336352061.png" class="" width="1556336352061"> <p>了解了MySQL的排序方式，优化目标就清晰了：尽量减少额外的排序，通过索引直接返回有序数据。where 条件和Order by 使用相同的索引，并且Order By 的顺序和索引顺序相同， 并且Order  by 的字段都是升序，或者都是降序。否则肯定需要额外的操作，这样就会出现FileSort。</p><h5 id="5-3-3-Filesort-的优化"><a href="#5-3-3-Filesort-的优化" class="headerlink" title="5.3.3 Filesort 的优化"></a>5.3.3 Filesort 的优化</h5><p>通过创建合适的索引，能够减少 Filesort 的出现，但是在某些情况下，条件限制不能让Filesort消失，那就需要加快 Filesort的排序操作。对于Filesort ， MySQL 有两种排序算法：</p><p>1） 两次扫描算法 ：MySQL4.1 之前，使用该方式排序。首先根据条件取出排序字段和行指针信息，然后在排序区 sort buffer 中排序，如果sort buffer不够，则在临时表 temporary table 中存储排序结果。完成排序之后，再根据行指针回表读取记录，该操作可能会导致大量随机I/O操作。</p><p>2）一次扫描算法：一次性取出满足条件的所有字段，然后在排序区 sort  buffer 中排序后直接输出结果集。排序时内存开销较大，但是排序效率比两次扫描算法要高。</p><p>MySQL 通过比较系统变量 max_length_for_sort_data 的大小和Query语句取出的字段总大小， 来判定是否那种排序算法，如果max_length_for_sort_data 更大，那么使用第二种优化之后的算法；否则使用第一种。</p><p>可以适当提高 sort_buffer_size  和 max_length_for_sort_data  系统变量，来增大排序区的大小，提高排序的效率。</p><img src="/posts/9982416a/1556338367593.png" class="" width="1556338367593"> <h4 id="5-4-优化group-by-语句"><a href="#5-4-优化group-by-语句" class="headerlink" title="5.4 优化group by 语句"></a>5.4 优化group by 语句</h4><p>由于GROUP BY 实际上也同样会进行排序操作，而且与ORDER BY 相比，GROUP BY 主要只是多了排序之后的分组操作。当然，如果在分组的时候还使用了其他的一些聚合函数，那么还需要一些聚合函数的计算。所以，在GROUP BY 的实现过程中，与 ORDER BY 一样也可以利用到索引。</p><p>如果查询包含 group by 但是用户想要避免排序结果的消耗， 则可以执行order by null 禁止排序。如下 ：</p><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">drop index idx_emp_age_salary on emp;explain select age,count(*) from emp group by age;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="/posts/9982416a/1556339573979.png" class="" width="1556339573979">  <p>优化后</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">explain</span> <span class="token keyword">select</span> age<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> emp <span class="token keyword">group</span> <span class="token keyword">by</span> age <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token boolean">null</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/posts/9982416a/1556339633161.png" class="" width="1556339633161">  <p>从上面的例子可以看出，第一个SQL语句需要进行”filesort”，而第二个SQL由于order  by  null 不需要进行 “filesort”， 而上文提过Filesort往往非常耗费时间。</p><p>创建索引 ：</p><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">create index idx_emp_age_salary on emp(age,salary)；<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/posts/9982416a/1556339688158.png" class="" width="1556339688158"> <h4 id="5-5-优化嵌套查询"><a href="#5-5-优化嵌套查询" class="headerlink" title="5.5 优化嵌套查询"></a>5.5 优化嵌套查询</h4><p>Mysql4.1版本之后，开始支持SQL的子查询。这个技术可以使用SELECT语句来创建一个单列的查询结果，然后把这个结果作为过滤条件用在另一个查询中。使用子查询可以一次性的完成很多逻辑上需要多个步骤才能完成的SQL操作，同时也可以避免事务或者表锁死，并且写起来也很容易。但是，有些情况下，子查询是可以被更高效的连接（JOIN）替代。</p><p>示例 ，查找有角色的所有的用户信息 : </p><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">explain select * from t_user where id in (select user_id from user_role );<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行计划为 : </p><img src="/posts/9982416a/1556359399199.png" class="" width="1556359399199">   <p>优化后 :</p><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">explain select * from t_user u , user_role ur where u.id = ur.user_id;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/posts/9982416a/1556359482142.png" class="" width="1556359482142">   <p>连接(Join)查询之所以更有效率一些 ，是因为MySQL不需要在内存中创建临时表来完成这个逻辑上需要两个步骤的查询工作。</p><h4 id="5-6-优化OR条件"><a href="#5-6-优化OR条件" class="headerlink" title="5.6 优化OR条件"></a>5.6 优化OR条件</h4><p>对于包含OR的查询子句，如果要利用索引，则OR之间的每个条件列都必须用到索引 ， 而且不能使用到复合索引； 如果没有索引，则应该考虑增加索引。</p><p>获取 emp 表中的所有的索引 ： </p><img src="/posts/9982416a/1556354464657.png" class="" width="1556354464657">  <p>示例 ： </p><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">explain select * from emp where id = 1 or age = 30;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/posts/9982416a/1556354887509.png" class="" width="1556354887509"><img src="/posts/9982416a/1556354920964.png" class="" width="1556354920964">  <p>建议使用 union 替换 or ： </p><img src="/posts/9982416a/1556355027728.png" class="" width="1556355027728"> <p>我们来比较下重要指标，发现主要差别是 type 和 ref 这两项</p><p>type 显示的是访问类型，是较为重要的一个指标，结果值从好到坏依次是：</p><pre class="line-numbers language-none"><code class="language-none">system &gt; const &gt; eq_ref &gt; ref &gt; fulltext &gt; ref_or_null  &gt; index_merge &gt; unique_subquery &gt; index_subquery &gt; range &gt; index &gt; ALL<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>UNION 语句的 type 值为 ref，OR 语句的 type 值为 range，可以看到这是一个很明显的差距</p><p>UNION 语句的 ref 值为 const，OR 语句的 type 值为 null，const 表示是常量值引用，非常快</p><p>这两项的差距就说明了 UNION 要优于 OR 。</p><h4 id="5-7-优化分页查询"><a href="#5-7-优化分页查询" class="headerlink" title="5.7 优化分页查询"></a>5.7 优化分页查询</h4><p>一般分页查询时，通过创建覆盖索引能够比较好地提高性能。一个常见又非常头疼的问题就是 limit 2000000,10  ，此时需要MySQL排序前2000010 记录，仅仅返回2000000 - 2000010 的记录，其他记录丢弃，查询排序的代价非常大 。</p><img src="/posts/9982416a/1556361314783.png" class="" width="1556361314783"> <h5 id="5-7-1-优化思路一"><a href="#5-7-1-优化思路一" class="headerlink" title="5.7.1 优化思路一"></a>5.7.1 优化思路一</h5><p>在索引上完成排序分页操作，最后根据主键关联回原表查询所需要的其他列内容。</p><img src="/posts/9982416a/1556416102800.png" class="" width="1556416102800"> <h5 id="5-7-2-优化思路二"><a href="#5-7-2-优化思路二" class="headerlink" title="5.7.2 优化思路二"></a>5.7.2 优化思路二</h5><p>该方案适用于主键自增的表，可以把Limit 查询转换成某个位置的查询 。</p><img src="/posts/9982416a/1556363928151.png" class="" width="1556363928151"> <h4 id="5-8-使用SQL提示"><a href="#5-8-使用SQL提示" class="headerlink" title="5.8 使用SQL提示"></a>5.8 使用SQL提示</h4><p>SQL提示，是优化数据库的一个重要手段，简单来说，就是在SQL语句中加入一些人为的提示来达到优化操作的目的。</p><h5 id="5-8-1-USE-INDEX"><a href="#5-8-1-USE-INDEX" class="headerlink" title="5.8.1 USE INDEX"></a>5.8.1 USE INDEX</h5><p>在查询语句中表名的后面，添加 use index 来提供希望MySQL去参考的索引列表，就可以让MySQL不再考虑其他可用的索引。</p><pre class="line-numbers language-none"><code class="language-none">create index idx_seller_name on tb_seller(name);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/posts/9982416a/1556370971576.png" class="" width="1556370971576"> <h5 id="5-8-2-IGNORE-INDEX"><a href="#5-8-2-IGNORE-INDEX" class="headerlink" title="5.8.2 IGNORE INDEX"></a>5.8.2 IGNORE INDEX</h5><p>如果用户只是单纯的想让MySQL忽略一个或者多个索引，则可以使用 ignore index 作为 hint 。</p><pre class="line-numbers language-none"><code class="language-none">explain select * from tb_seller ignore index(idx_seller_name) where name = '小米科技';<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/posts/9982416a/1556371004594.png" class="" width="1556371004594"> <h5 id="5-8-3-FORCE-INDEX"><a href="#5-8-3-FORCE-INDEX" class="headerlink" title="5.8.3 FORCE INDEX"></a>5.8.3 FORCE INDEX</h5><p>为强制MySQL使用一个特定的索引，可在查询中使用 force index 作为hint 。 </p><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">create index idx_seller_address on tb_seller(address);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/posts/9982416a/1556371355788.png" class="" width="1556371355788"> <h2 id="MySQL高级-day3"><a href="#MySQL高级-day3" class="headerlink" title="MySQL高级-day3"></a>MySQL高级-day3</h2><h3 id="1-应用优化"><a href="#1-应用优化" class="headerlink" title="1.应用优化"></a>1.应用优化</h3><p>前面章节，我们介绍很多数据库优化措施。</p><h4 id="1-1使用连接池"><a href="#1-1使用连接池" class="headerlink" title="1.1使用连接池"></a>1.1使用连接池</h4><p>频繁的创建关闭连接，是比较耗费资源，我们有必要建立数据库连接池，以提高访问性能。</p><p>c3p0,druid</p><h4 id="1-2减少MySQL的访问"><a href="#1-2减少MySQL的访问" class="headerlink" title="1.2减少MySQL的访问"></a>1.2减少MySQL的访问</h4><h5 id="1-2-1避免数据重复检索"><a href="#1-2-1避免数据重复检索" class="headerlink" title="1.2.1避免数据重复检索"></a>1.2.1避免数据重复检索</h5><p>在编写应用代码时，需要能够理清对数据库的访问逻辑。</p><img src="/posts/9982416a/image-20220918102831470.png" class="" title="image-20220918102831470"><h5 id="1-2-2增加cache层"><a href="#1-2-2增加cache层" class="headerlink" title="1.2.2增加cache层"></a>1.2.2增加cache层</h5><p>使用持久化框架的一级或二及缓存，或者Redis中。</p><h4 id="1-3负载均衡"><a href="#1-3负载均衡" class="headerlink" title="1.3负载均衡"></a>1.3负载均衡</h4><h5 id="1-3-1利用MySQL复制分流查询"><a href="#1-3-1利用MySQL复制分流查询" class="headerlink" title="1.3.1利用MySQL复制分流查询"></a>1.3.1利用MySQL复制分流查询</h5><p>通过MySQL的主从复制，实现读写分离，使增删改操作走主节点，查询操作走从节点，从而可以降低单台服务器的读写压力。</p><img src="/posts/9982416a/image-20220918103252338.png" class="" title="image-20220918103252338"><h5 id="1-3-2采用分布式数据架构"><a href="#1-3-2采用分布式数据架构" class="headerlink" title="1.3.2采用分布式数据架构"></a>1.3.2采用分布式数据架构</h5><p>分布式数据库架构适合大数据量，负载高的情况，它有良好的拓展性和高可用性。通过在多台服务器之间分布数据，可以实现多台服务器之间的负载均衡，提高访问效率。</p><h3 id="2-Mysql中查询缓存优化"><a href="#2-Mysql中查询缓存优化" class="headerlink" title="2.Mysql中查询缓存优化"></a>2.Mysql中查询缓存优化</h3><h4 id="2-1概述"><a href="#2-1概述" class="headerlink" title="2.1概述"></a>2.1概述</h4><p>开启Mysql的查询缓存，当执行完全相同的SQL语句的时候，服务器就会直接从缓存中读取结构，当数据被修改，之前的缓存会失效，修改比较频繁的表不适合做查询缓存。</p><h4 id="2-2操作流程"><a href="#2-2操作流程" class="headerlink" title="2.2操作流程"></a>2.2操作流程</h4><img src="/posts/9982416a/image-20220918104145812.png" class="" title="image-20220918104145812"><h4 id="2-3查询缓存配置"><a href="#2-3查询缓存配置" class="headerlink" title="2.3查询缓存配置"></a>2.3查询缓存配置</h4><p>1.查看当前的MySQL数据库是否支持查询缓存：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SHOW</span> VARIABLES <span class="token operator">LIKE</span> <span class="token string">'have_query_cache'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/posts/9982416a/image-20220918104453139.png" class="" title="image-20220918104453139"><p>2.查看当前MySQL是否开启了查询缓存：</p><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">SHOW VARIABLES LIKE 'query_cache_type';<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/posts/9982416a/image-20220918104604002.png" class="" title="image-20220918104604002"><p>3.查看查询缓存的占用大小：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SHOW</span> VATIABLES <span class="token operator">LIKE</span> <span class="token string">'query_cache_size'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/posts/9982416a/image-20220918104731356.png" class="" title="image-20220918104731356"><p>4.查询查询缓存的状态变量：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SHOW</span> <span class="token keyword">STATUS</span> <span class="token operator">LIKE</span> <span class="token string">'Qcache%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/posts/9982416a/image-20220918105123142.png" class="" title="image-20220918105123142"><img src="/posts/9982416a/image-20220918105346298.png" class="" title="image-20220918105346298"><h4 id="2-4开启查询缓存"><a href="#2-4开启查询缓存" class="headerlink" title="2.4开启查询缓存"></a>2.4开启查询缓存</h4><p>MySQL查询缓存默认是关闭的，需要手动配置参数query_cache_type,来开启查询缓存，query_cache_type该参数的可能取值有三个：</p><img src="/posts/9982416a/image-20220918105642882.png" class="" title="image-20220918105642882"><img src="/posts/9982416a/image-20220918105701312.png" class="" title="image-20220918105701312"><h4 id="2-5查询缓存SELECT选型"><a href="#2-5查询缓存SELECT选型" class="headerlink" title="2.5查询缓存SELECT选型"></a>2.5查询缓存SELECT选型</h4><p>可以在SELECT语句中指定两个与查询查询缓存相关的选型：</p><p>SQL_CACHE:如果查询结果是可缓存的，并且query_cache_type系统变量是ON或者DEMANE，则缓存结果。</p><p>SQL_NO_CACHE:服务器不使用查询缓存。它既不检查查询缓存，也不检测结果是否以缓存，也不缓存查询结果。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> SQL_CACHE id<span class="token punctuation">,</span>name <span class="token keyword">FROM</span> cuntomer<span class="token punctuation">;</span><span class="token keyword">SELECT</span> SQL_NO_CACHE id<span class="token punctuation">,</span>name <span class="token keyword">FROM</span> cuntomer<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="2-6查询缓存失效的情况"><a href="#2-6查询缓存失效的情况" class="headerlink" title="2.6查询缓存失效的情况"></a>2.6查询缓存失效的情况</h4><img src="/posts/9982416a/image-20220918111105530.png" class="" title="image-20220918111105530"><h3 id="3-Mysql内存管理优化"><a href="#3-Mysql内存管理优化" class="headerlink" title="3.Mysql内存管理优化"></a>3.Mysql内存管理优化</h3><h4 id="3-1内存优化原则"><a href="#3-1内存优化原则" class="headerlink" title="3.1内存优化原则"></a>3.1内存优化原则</h4><img src="/posts/9982416a/image-20220918111816424.png" class="" title="image-20220918111816424"><h4 id="3-2MyISAM内存优化"><a href="#3-2MyISAM内存优化" class="headerlink" title="3.2MyISAM内存优化"></a>3.2MyISAM内存优化</h4><img src="/posts/9982416a/image-20220918111830874.png" class="" title="image-20220918111830874"><img src="/posts/9982416a/image-20220918112210941.png" class="" title="image-20220918112210941"><h4 id="3-3InnoDB内存优化"><a href="#3-3InnoDB内存优化" class="headerlink" title="3.3InnoDB内存优化"></a>3.3InnoDB内存优化</h4><img src="/posts/9982416a/image-20220918112428525.png" class="" title="image-20220918112428525"><h3 id="4-Mysql并发参数调整"><a href="#4-Mysql并发参数调整" class="headerlink" title="4.Mysql并发参数调整"></a>4.Mysql并发参数调整</h3><img src="/posts/9982416a/image-20220918112743738.png" class="" title="image-20220918112743738"><img src="/posts/9982416a/image-20220918113302009.png" class="" title="image-20220918113302009"><img src="/posts/9982416a/image-20220918113350416.png" class="" title="image-20220918113350416"><h3 id="5-Mysql锁问题"><a href="#5-Mysql锁问题" class="headerlink" title="5.Mysql锁问题"></a>5.Mysql锁问题</h3><h4 id="51锁概述"><a href="#51锁概述" class="headerlink" title="51锁概述"></a>51锁概述</h4><p>锁是计算机协调多个进程或线程并发访问某一资源的机制。</p><h4 id="5-2锁分类"><a href="#5-2锁分类" class="headerlink" title="5.2锁分类"></a>5.2锁分类</h4><p>操作粒度：</p><p>1.表锁</p><p>2.行锁</p><p>操作类型：</p><p>1.读锁（共享锁）</p><p>2.写锁（排它锁）</p><h4 id="5-3MySQL锁"><a href="#5-3MySQL锁" class="headerlink" title="5.3MySQL锁"></a>5.3MySQL锁</h4><img src="/posts/9982416a/image-20220918174145034.png" class="" title="image-20220918174145034"><h4 id="5-2MyISAM表锁"><a href="#5-2MyISAM表锁" class="headerlink" title="5..2MyISAM表锁"></a>5..2MyISAM表锁</h4><p>MyISAM存储引擎只支持表锁。</p><h5 id="5-2-1如何加表锁"><a href="#5-2-1如何加表锁" class="headerlink" title="5.2.1如何加表锁"></a>5.2.1如何加表锁</h5><img src="/posts/9982416a/image-20220918174544641.png" class="" title="image-20220918174544641"><h5 id="5-2-2读锁案例"><a href="#5-2-2读锁案例" class="headerlink" title="5.2.2读锁案例"></a>5.2.2读锁案例</h5><h5 id="5-2-3写锁案例"><a href="#5-2-3写锁案例" class="headerlink" title="5.2.3写锁案例"></a>5.2.3写锁案例</h5><img src="/posts/9982416a/image-20220918175742810.png" class="" title="image-20220918175742810"><h5 id="5-2-45结论"><a href="#5-2-45结论" class="headerlink" title="5.2.45结论"></a>5.2.45结论</h5><img src="/posts/9982416a/image-20220918180154240.png" class="" title="image-20220918180154240"><h5 id="5-2-查看锁的争用情况"><a href="#5-2-查看锁的争用情况" class="headerlink" title="5.2.查看锁的争用情况"></a>5.2.查看锁的争用情况</h5><img src="/posts/9982416a/image-20220918180420409.png" class="" title="image-20220918180420409"><img src="/posts/9982416a/image-20220918180647382.png" class="" title="image-20220918180647382"><h4 id="5-3InnoDB锁问题"><a href="#5-3InnoDB锁问题" class="headerlink" title="5.3InnoDB锁问题"></a>5.3InnoDB锁问题</h4><h5 id="5-3-1行锁介绍"><a href="#5-3-1行锁介绍" class="headerlink" title="5.3.1行锁介绍"></a>5.3.1行锁介绍</h5><img src="/posts/9982416a/image-20220918181139440.png" class="" title="image-20220918181139440"><h5 id="5-3-2背景知识"><a href="#5-3-2背景知识" class="headerlink" title="5.3.2背景知识"></a>5.3.2背景知识</h5><img src="/posts/9982416a/image-20220918181337039.png" class="" title="image-20220918181337039"><img src="/posts/9982416a/image-20220918181430900.png" class="" title="image-20220918181430900"><img src="/posts/9982416a/image-20220918181648223.png" class="" title="image-20220918181648223"><h5 id="5-3-3InoDB行锁的模式"><a href="#5-3-3InoDB行锁的模式" class="headerlink" title="5.3.3InoDB行锁的模式"></a>5.3.3InoDB行锁的模式</h5><img src="/posts/9982416a/image-20220918181831336.png" class="" title="image-20220918181831336"><h5 id="5-3-4案例准备工作"><a href="#5-3-4案例准备工作" class="headerlink" title="5.3.4案例准备工作"></a>5.3.4案例准备工作</h5><img src="/posts/9982416a/image-20220918182037781.png" class="" title="image-20220918182037781"><h5 id="5-3-5行锁基本演示"><a href="#5-3-5行锁基本演示" class="headerlink" title="5.3.5行锁基本演示"></a>5.3.5行锁基本演示</h5><img src="/posts/9982416a/image-20220918182144974.png" class="" title="image-20220918182144974"><h5 id="5-3-6无索引行锁升级为表锁"><a href="#5-3-6无索引行锁升级为表锁" class="headerlink" title="5.3.6无索引行锁升级为表锁"></a>5.3.6无索引行锁升级为表锁</h5><img src="/posts/9982416a/image-20220918182758522.png" class="" title="image-20220918182758522"><h5 id="5-3-7间隙锁危害"><a href="#5-3-7间隙锁危害" class="headerlink" title="5.3.7间隙锁危害"></a>5.3.7间隙锁危害</h5><img src="/posts/9982416a/image-20220918183301246.png" class="" title="image-20220918183301246"><h5 id="5-3-8InnoDB行锁争用情况"><a href="#5-3-8InnoDB行锁争用情况" class="headerlink" title="5.3.8InnoDB行锁争用情况"></a>5.3.8InnoDB行锁争用情况</h5><img src="/posts/9982416a/image-20220918184040390.png" class="" title="image-20220918184040390"><h5 id="5-3-9总结"><a href="#5-3-9总结" class="headerlink" title="5.3.9总结"></a>5.3.9总结</h5><img src="/posts/9982416a/image-20220918184102215.png" class="" title="image-20220918184102215"><h3 id="6-常用SQL技巧"><a href="#6-常用SQL技巧" class="headerlink" title="6.常用SQL技巧"></a>6.常用SQL技巧</h3><h4 id="6-1SQL执行顺序"><a href="#6-1SQL执行顺序" class="headerlink" title="6.1SQL执行顺序"></a>6.1SQL执行顺序</h4><img src="/posts/9982416a/image-20220918184237954.png" class="" title="image-20220918184237954"><img src="/posts/9982416a/image-20220918184323659.png" class="" title="image-20220918184323659"><h4 id="6-2正则表达式使用"><a href="#6-2正则表达式使用" class="headerlink" title="6.2正则表达式使用"></a>6.2正则表达式使用</h4><img src="/posts/9982416a/image-20220918184446644.png" class="" title="image-20220918184446644"><h2 id="Mysql高级-day04"><a href="#Mysql高级-day04" class="headerlink" title="Mysql高级-day04"></a>Mysql高级-day04</h2><h3 id="1-MySql中常用工具"><a href="#1-MySql中常用工具" class="headerlink" title="1. MySql中常用工具"></a>1. MySql中常用工具</h3><h4 id="1-1-mysql"><a href="#1-1-mysql" class="headerlink" title="1.1 mysql"></a>1.1 mysql</h4><p>该mysql不是指mysql服务，而是指mysql的客户端工具。</p><p>语法 ：</p><pre class="line-numbers language-none"><code class="language-none">mysql [options] [database]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="1-1-1-连接选项"><a href="#1-1-1-连接选项" class="headerlink" title="1.1.1 连接选项"></a>1.1.1 连接选项</h5><pre class="line-numbers language-none"><code class="language-none">参数 ： -u, --user=name指定用户名-p, --password[=name]指定密码-h, --host=name指定服务器IP或域名-P, --port=#指定连接端口示例 ：mysql -h 127.0.0.1 -P 3306 -u root -pmysql -h127.0.0.1 -P3306 -uroot -p2143<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="1-1-2-执行选项"><a href="#1-1-2-执行选项" class="headerlink" title="1.1.2 执行选项"></a>1.1.2 执行选项</h5><pre class="line-numbers language-none"><code class="language-none">-e, --execute=name执行SQL语句并退出<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此选项可以在Mysql客户端执行SQL语句，而不用连接到MySQL数据库再执行，对于一些批处理脚本，这种方式尤其方便。</p><pre class="line-numbers language-none"><code class="language-none">示例：mysql -uroot -p2143 db01 -e "select * from tb_book";<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><img src="/posts/9982416a/1555325632715.png" class="" width="1555325632715"> <h4 id="1-2-mysqladmin"><a href="#1-2-mysqladmin" class="headerlink" title="1.2 mysqladmin"></a>1.2 mysqladmin</h4><p>mysqladmin 是一个执行管理操作的客户端程序。可以用它来检查服务器的配置和当前状态、创建并删除数据库等。</p><p>可以通过 ： mysqladmin –help  指令查看帮助文档</p><img src="/posts/9982416a/1555326108697.png" class="" width="1555326108697"> <pre class="line-numbers language-none"><code class="language-none">示例 ：mysqladmin -uroot -p2143 create 'test01';  mysqladmin -uroot -p2143 drop 'test01';mysqladmin -uroot -p2143 version;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-3-mysqlbinlog"><a href="#1-3-mysqlbinlog" class="headerlink" title="1.3 mysqlbinlog"></a>1.3 mysqlbinlog</h4><p>由于服务器生成的二进制日志文件以二进制格式保存，所以如果想要检查这些文本的文本格式，就会使用到mysqlbinlog 日志管理工具。</p><p>语法 ：</p><pre class="line-numbers language-none"><code class="language-none">mysqlbinlog [options]  log-files1 log-files2 ...选项：-d, --database=name : 指定数据库名称，只列出指定的数据库相关操作。-o, --offset=# : 忽略掉日志中的前n行命令。-r,--result-file=name : 将输出的文本格式日志输出到指定文件。-s, --short-form : 显示简单格式， 省略掉一些信息。--start-datatime=date1  --stop-datetime=date2 : 指定日期间隔内的所有日志。--start-position=pos1 --stop-position=pos2 : 指定位置间隔内的所有日志。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-4-mysqldump"><a href="#1-4-mysqldump" class="headerlink" title="1.4 mysqldump"></a>1.4 mysqldump</h4><p>mysqldump 客户端工具用来备份数据库或在不同数据库之间进行数据迁移。备份内容包含创建表，及插入表的SQL语句。</p><p>语法 ：</p><pre class="line-numbers language-none"><code class="language-none">mysqldump [options] db_name [tables]mysqldump [options] --database/-B db1 [db2 db3...]mysqldump [options] --all-databases/-A<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="1-4-1-连接选项"><a href="#1-4-1-连接选项" class="headerlink" title="1.4.1 连接选项"></a>1.4.1 连接选项</h5><pre class="line-numbers language-none"><code class="language-none">参数 ： -u, --user=name指定用户名-p, --password[=name]指定密码-h, --host=name指定服务器IP或域名-P, --port=#指定连接端口<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="1-4-2-输出内容选项"><a href="#1-4-2-输出内容选项" class="headerlink" title="1.4.2 输出内容选项"></a>1.4.2 输出内容选项</h5><pre class="line-numbers language-none"><code class="language-none">参数：--add-drop-database在每个数据库创建语句前加上 Drop database 语句--add-drop-table在每个表创建语句前加上 Drop table 语句 , 默认开启 ; 不开启 (--skip-add-drop-table)-n, --no-create-db不包含数据库的创建语句-t, --no-create-info不包含数据表的创建语句-d --no-data不包含数据 -T, --tab=name自动生成两个文件：一个.sql文件，创建表结构的语句； 一个.txt文件，数据文件，相当于select into outfile  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">示例 ： mysqldump -uroot -p2143 db01 tb_book --add-drop-database --add-drop-table &gt; amysqldump -uroot -p2143 -T /tmp test city<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1555501806693.png" alt="1555501806693"> </p><h4 id="1-5-mysqlimport-source"><a href="#1-5-mysqlimport-source" class="headerlink" title="1.5 mysqlimport/source"></a>1.5 mysqlimport/source</h4><p>mysqlimport 是客户端数据导入工具，用来导入mysqldump 加 -T 参数后导出的文本文件。</p><p>语法：</p><pre class="line-numbers language-none"><code class="language-none">mysqlimport [options]  db_name  textfile1  [textfile2...]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>示例：</p><pre class="line-numbers language-none"><code class="language-none">mysqlimport -uroot -p2143 test /tmp/city.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果需要导入sql文件,可以使用mysql中的source 指令 : </p><pre class="line-numbers language-none"><code class="language-none">source /root/tb_book.sql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="1-6-mysqlshow"><a href="#1-6-mysqlshow" class="headerlink" title="1.6 mysqlshow"></a>1.6 mysqlshow</h4><p>mysqlshow 客户端对象查找工具，用来很快地查找存在哪些数据库、数据库中的表、表中的列或者索引。</p><p>语法：</p><pre class="line-numbers language-none"><code class="language-none">mysqlshow [options] [db_name [table_name [col_name]]]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>参数：</p><pre class="line-numbers language-none"><code class="language-none">--count显示数据库及表的统计信息（数据库，表 均可以不指定）-i显示指定数据库或者指定表的状态信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>示例：</p><pre class="line-numbers language-none"><code class="language-none">#查询每个数据库的表的数量及表中记录的数量mysqlshow -uroot -p2143 --count#查询test库中每个表中的字段书，及行数mysqlshow -uroot -p2143 test --count#查询test库中book表的详细情况mysqlshow -uroot -p2143 test book --count<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-Mysql-日志"><a href="#2-Mysql-日志" class="headerlink" title="2. Mysql 日志"></a>2. Mysql 日志</h3><p>在任何一种数据库中，都会有各种各样的日志，记录着数据库工作的方方面面，以帮助数据库管理员追踪数据库曾经发生过的各种事件。MySQL 也不例外，在 MySQL 中，有 4 种不同的日志，分别是错误日志、二进制日志（BINLOG 日志）、查询日志和慢查询日志，这些日志记录着数据库在不同方面的踪迹。</p><h4 id="2-1-错误日志"><a href="#2-1-错误日志" class="headerlink" title="2.1 错误日志"></a>2.1 错误日志</h4><p>错误日志是 MySQL 中最重要的日志之一，它记录了当 mysqld 启动和停止时，以及服务器在运行过程中发生任何严重错误时的相关信息。当数据库出现任何故障导致无法正常使用时，可以首先查看此日志。</p><p>该日志是默认开启的 ， 默认存放目录为 mysql 的数据目录（var/lib/mysql）, 默认的日志文件名为  hostname.err（hostname是主机名）。</p><p>查看日志位置指令 ： </p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'log_error%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/posts/9982416a/1553993244446.png" class="" width="1553993244446"> <p>查看日志内容 ： </p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">tail</span> -f /var/lib/mysql/xaxh-server.err<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/posts/9982416a/1553993537874.png" class="" width="1553993537874"> <h4 id="2-2-二进制日志"><a href="#2-2-二进制日志" class="headerlink" title="2.2 二进制日志"></a>2.2 二进制日志</h4><h5 id="2-2-1概述"><a href="#2-2-1概述" class="headerlink" title="2.2.1概述"></a>2.2.1概述</h5><p>二进制日志（BINLOG）记录了所有的 DDL（数据定义语言）语句和 DML（数据操纵语言）语句，但是不包括数据查询语句。此日志对于灾难时的数据恢复起着极其重要的作用，MySQL的主从复制， 就是通过该binlog实现的。</p><p>二进制日志，默认情况下是没有开启的，需要到MySQL的配置文件中开启，并配置MySQL日志的格式。 </p><p>配置文件位置 : /usr/my.cnf</p><p>日志存放位置 : 配置时，给定了文件名但是没有指定路径，日志默认写入Mysql的数据目录。</p><pre class="line-numbers language-none"><code class="language-none">#配置开启binlog日志， 日志的文件前缀为 mysqlbin -----&gt; 生成的文件名如 : mysqlbin.000001,mysqlbin.000002log_bin=mysqlbin#配置二进制日志的格式binlog_format=STATEMENT<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-2-2-日志格式"><a href="#2-2-2-日志格式" class="headerlink" title="2.2.2 日志格式"></a>2.2.2 日志格式</h5><p><strong>STATEMENT</strong></p><p>该日志格式在日志文件中记录的都是SQL语句（statement），每一条对数据进行修改的SQL都会记录在日志文件中，通过Mysql提供的mysqlbinlog工具，可以清晰的查看到每条语句的文本。主从复制的时候，从库（slave）会将日志解析为原文本，并在从库重新执行一次。</p><p><strong>ROW</strong></p><p>该日志格式在日志文件中记录的是每一行的数据变更，而不是记录SQL语句。比如，执行SQL语句 ： update tb_book set status=’1’ , 如果是STATEMENT 日志格式，在日志中会记录一行SQL文件； 如果是ROW，由于是对全表进行更新，也就是每一行记录都会发生变更，ROW 格式的日志中会记录每一行的数据变更。</p><p><strong>MIXED</strong></p><p>这是目前MySQL默认的日志格式，即混合了STATEMENT 和 ROW两种格式。默认情况下采用STATEMENT，但是在一些特殊情况下采用ROW来进行记录。MIXED 格式能尽量利用两种模式的优点，而避开他们的缺点。</p><h5 id="2-2-3-日志读取"><a href="#2-2-3-日志读取" class="headerlink" title="2.2.3 日志读取"></a>2.2.3 日志读取</h5><p>由于日志以二进制方式存储，不能直接读取，需要用mysqlbinlog工具来查看，语法如下 ：</p><pre class="line-numbers language-none"><code class="language-none">mysqlbinlog log-file；<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>查看STATEMENT格式日志</strong> </p><p>执行插入语句 ：</p><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">insert into tb_book values(null,'Lucene','2088-05-01','0');<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 查看日志文件 ：</p><img src="/posts/9982416a/1554079717375.png" class="" width="1554079717375"> <p>mysqlbin.index : 该文件是日志索引文件 ， 记录日志的文件名；</p><p>mysqlbing.000001 ：日志文件</p><p>查看日志内容 ：</p><pre class="line-numbers language-none"><code class="language-none">mysqlbinlog mysqlbing.000001；<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/posts/9982416a/1554080016778.png" class="" width="1554080016778"> <p><strong>查看ROW格式日志</strong></p><p>配置 :</p><pre class="line-numbers language-none"><code class="language-none">#配置开启binlog日志， 日志的文件前缀为 mysqlbin -----&gt; 生成的文件名如 : mysqlbin.000001,mysqlbin.000002log_bin=mysqlbin#配置二进制日志的格式binlog_format=ROW<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>插入数据 :</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> tb_book <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token string">'SpringCloud实战'</span><span class="token punctuation">,</span><span class="token string">'2088-05-05'</span><span class="token punctuation">,</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果日志格式是 ROW , 直接查看数据 , 是查看不懂的 ; 可以在mysqlbinlog 后面加上参数 -vv  </p><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">mysqlbinlog -vv mysqlbin.000002 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/posts/9982416a/1554095452022.png" class="" width="1554095452022"> <h5 id="2-2-4-日志删除"><a href="#2-2-4-日志删除" class="headerlink" title="2.2.4 日志删除"></a>2.2.4 日志删除</h5><p>对于比较繁忙的系统，由于每天生成日志量大 ，这些日志如果长时间不清楚，将会占用大量的磁盘空间。下面我们将会讲解几种删除日志的常见方法 ：</p><p><strong>方式一</strong> </p><p>通过 Reset Master 指令删除全部 binlog 日志，删除之后，日志编号，将从 xxxx.000001重新开始 。</p><p>查询之前 ，先查询下日志文件 ： </p><img src="/posts/9982416a/1554118609489.png" class="" width="1554118609489">   <p>执行删除日志指令： </p><pre class="line-numbers language-none"><code class="language-none">Reset Master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行之后， 查看日志文件 ：</p><img src="/posts/9982416a/1554118675264.png" class="" width="1554118675264"> <p><strong>方式二</strong></p><p>执行指令 <code> purge  master logs to 'mysqlbin.******'</code> ，该命令将删除  <code> ******</code> 编号之前的所有日志。 </p><p><strong>方式三</strong></p><p>执行指令 <code> purge master logs before 'yyyy-mm-dd hh24:mi:ss'</code> ，该命令将删除日志为 “yyyy-mm-dd hh24:mi:ss” 之前产生的所有日志 。</p><p><strong>方式四</strong></p><p>设置参数 –expire_logs_days=# ，此参数的含义是设置日志的过期天数， 过了指定的天数后日志将会被自动删除，这样将有利于减少DBA 管理日志的工作量。</p><p>配置如下 ： </p><img src="/posts/9982416a/1554125506938.png" class="" width="1554125506938"> <h4 id="2-3-查询日志"><a href="#2-3-查询日志" class="headerlink" title="2.3 查询日志"></a>2.3 查询日志</h4><p>查询日志中记录了客户端的所有操作语句，而二进制日志不包含查询数据的SQL语句。</p><p>默认情况下， 查询日志是未开启的。如果需要开启查询日志，可以设置以下配置 ：</p><pre class="line-numbers language-none"><code class="language-none">#该选项用来开启查询日志 ， 可选值 ： 0 或者 1 ； 0 代表关闭， 1 代表开启 general_log=1#设置日志的文件名 ， 如果没有指定， 默认的文件名为 host_name.log general_log_file=file_name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 mysql 的配置文件 /usr/my.cnf 中配置如下内容 ： </p><img src="/posts/9982416a/1554128184632.png" class="" width="1554128184632"> <p>配置完毕之后，在数据库执行以下操作 ：</p><pre class="line-numbers language-none"><code class="language-none">select * from tb_book;select * from tb_book where id = 1;update tb_book set name = 'lucene入门指南' where id = 5;select * from tb_book where id &lt; 8;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>执行完毕之后， 再次来查询日志文件 ： </p><img src="/posts/9982416a/1554128089851.png" class="" width="1554128089851"> <h4 id="2-4-慢查询日志"><a href="#2-4-慢查询日志" class="headerlink" title="2.4 慢查询日志"></a>2.4 慢查询日志</h4><p>慢查询日志记录了所有执行时间超过参数 long_query_time 设置值并且扫描记录数不小于 min_examined_row_limit 的所有的SQL语句的日志。long_query_time 默认为 10 秒，最小为 0， 精度可以到微秒。</p><h5 id="2-4-1-文件位置和格式"><a href="#2-4-1-文件位置和格式" class="headerlink" title="2.4.1 文件位置和格式"></a>2.4.1 文件位置和格式</h5><p>慢查询日志默认是关闭的 。可以通过两个参数来控制慢查询日志 ：</p><pre class="line-numbers language-none"><code class="language-none"># 该参数用来控制慢查询日志是否开启， 可取值： 1 和 0 ， 1 代表开启， 0 代表关闭slow_query_log=1 # 该参数用来指定慢查询日志的文件名slow_query_log_file=slow_query.log# 该选项用来配置查询的时间限制， 超过这个时间将认为值慢查询， 将需要进行日志记录， 默认10slong_query_time=10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-4-2-日志的读取"><a href="#2-4-2-日志的读取" class="headerlink" title="2.4.2 日志的读取"></a>2.4.2 日志的读取</h5><p>和错误日志、查询日志一样，慢查询日志记录的格式也是纯文本，可以被直接读取。</p><p>1） 查询long_query_time 的值。</p><img src="/posts/9982416a/1554130333472.png" class="" width="1554130333472"> <p>2） 执行查询操作</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> id<span class="token punctuation">,</span> title<span class="token punctuation">,</span>price<span class="token punctuation">,</span>num <span class="token punctuation">,</span><span class="token keyword">status</span> <span class="token keyword">from</span> tb_item <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/posts/9982416a/1554130448709.png" class="" width="1554130448709"><p>由于该语句执行时间很短，为0s ， 所以不会记录在慢查询日志中。</p><pre class="line-numbers language-none"><code class="language-none">select * from tb_item where title like '%阿尔卡特 (OT-927) 炭黑 联通3G手机 双卡双待165454%' ;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/posts/9982416a/1554130532577.png" class="" width="1554130532577"> <p>该SQL语句 ， 执行时长为 26.77s ，超过10s ， 所以会记录在慢查询日志文件中。</p><p>3） 查看慢查询日志文件</p><p>直接通过cat 指令查询该日志文件 ： </p><img src="/posts/9982416a/1554130669360.png" class="" width="1554130669360"> <p>如果慢查询日志内容很多， 直接查看文件，比较麻烦， 这个时候可以借助于mysql自带的 mysqldumpslow 工具， 来对慢查询日志进行分类汇总。 </p><img src="/posts/9982416a/1554130856485.png" class="" width="1554130856485"> <h3 id="3-Mysql复制"><a href="#3-Mysql复制" class="headerlink" title="3. Mysql复制"></a>3. Mysql复制</h3><h4 id="3-1-复制概述"><a href="#3-1-复制概述" class="headerlink" title="3.1 复制概述"></a>3.1 复制概述</h4><p>复制是指将主数据库的DDL 和 DML 操作通过二进制日志传到从库服务器中，然后在从库上对这些日志重新执行（也叫重做），从而使得从库和主库的数据保持同步。</p><p>MySQL支持一台主库同时向多台从库进行复制， 从库同时也可以作为其他从服务器的主库，实现链状复制。</p><h4 id="3-2-复制原理"><a href="#3-2-复制原理" class="headerlink" title="3.2 复制原理"></a>3.2 复制原理</h4><p>MySQL 的主从复制原理如下。</p><img src="/posts/9982416a/1.jpg" class="" width="1554423698190"> <p>从上层来看，复制分成三步：</p><ul><li><p>Master 主库在事务提交时，会把数据变更作为时间 Events 记录在二进制日志文件 Binlog 中。</p></li><li><p>主库推送二进制日志文件 Binlog 中的日志事件到从库的中继日志 Relay Log 。</p></li><li><p>slave重做中继日志中的事件，将改变反映它自己的数据。</p></li></ul><h4 id="3-3-复制优势"><a href="#3-3-复制优势" class="headerlink" title="3.3 复制优势"></a>3.3 复制优势</h4><p>MySQL 复制的有点主要包含以下三个方面：</p><ul><li><p>主库出现问题，可以快速切换到从库提供服务。</p></li><li><p>可以在从库上执行查询操作，从主库中更新，实现读写分离，降低主库的访问压力。</p></li><li><p>可以在从库中执行备份，以避免备份期间影响主库的服务。</p></li></ul><h4 id="3-4-搭建步骤"><a href="#3-4-搭建步骤" class="headerlink" title="3.4 搭建步骤"></a>3.4 搭建步骤</h4><h5 id="3-4-1-master"><a href="#3-4-1-master" class="headerlink" title="3.4.1 master"></a>3.4.1 master</h5><p>1） 在master 的配置文件（/usr/my.cnf）中，配置如下内容：</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment">#mysql 服务ID,保证整个集群环境中唯一</span><span class="token attr-name">server-id</span><span class="token punctuation">=</span><span class="token attr-value">1</span><span class="token comment">#mysql binlog 日志的存储路径和文件名</span><span class="token attr-name">log-bin</span><span class="token punctuation">=</span><span class="token attr-value">/var/lib/mysql/mysqlbin</span><span class="token comment">#错误日志,默认已经开启</span><span class="token comment">#log-err</span><span class="token comment">#mysql的安装目录</span><span class="token comment">#basedir</span><span class="token comment">#mysql的临时目录</span><span class="token comment">#tmpdir</span><span class="token comment">#mysql的数据存放目录</span><span class="token comment">#datadir</span><span class="token comment">#是否只读,1 代表只读, 0 代表读写</span><span class="token attr-name">read-only</span><span class="token punctuation">=</span><span class="token attr-value">0</span><span class="token comment">#忽略的数据, 指不需要同步的数据库</span><span class="token attr-name">binlog-ignore-db</span><span class="token punctuation">=</span><span class="token attr-value">mysql</span><span class="token comment">#指定同步的数据库</span><span class="token comment">#binlog-do-db=db01</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2） 执行完毕之后，需要重启Mysql：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">service mysql restart ；<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3） 创建同步数据的账户，并且进行授权操作：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">grant</span> <span class="token keyword">replication</span> slave <span class="token keyword">on</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">to</span> <span class="token string">'itcast'</span><span class="token variable">@'192.168.192.131'</span> identified <span class="token keyword">by</span> <span class="token string">'itcast'</span><span class="token punctuation">;</span>flush <span class="token keyword">privileges</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>4） 查看master状态：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> master <span class="token keyword">status</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/posts/9982416a/1554477759735.png" class="" width="1554477759735"> <p>字段含义：</p><pre class="line-numbers language-none"><code class="language-none">File : 从哪个日志文件开始推送日志文件 Position ： 从哪个位置开始推送日志Binlog_Ignore_DB : 指定不需要同步的数据库<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="3-4-2-slave"><a href="#3-4-2-slave" class="headerlink" title="3.4.2 slave"></a>3.4.2 slave</h5><p>1） 在 slave 端配置文件中，配置如下内容：</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment">#mysql服务端ID,唯一</span><span class="token attr-name">server-id</span><span class="token punctuation">=</span><span class="token attr-value">2</span><span class="token comment">#指定binlog日志</span><span class="token attr-name">log-bin</span><span class="token punctuation">=</span><span class="token attr-value">/var/lib/mysql/mysqlbin</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2）  执行完毕之后，需要重启Mysql：</p><pre class="line-numbers language-none"><code class="language-none">service mysql restart；<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3） 执行如下指令 ：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">change master <span class="token keyword">to</span> master_host<span class="token operator">=</span> <span class="token string">'192.168.192.130'</span><span class="token punctuation">,</span> master_user<span class="token operator">=</span><span class="token string">'itcast'</span><span class="token punctuation">,</span> master_password<span class="token operator">=</span><span class="token string">'itcast'</span><span class="token punctuation">,</span> master_log_file<span class="token operator">=</span><span class="token string">'mysqlbin.000001'</span><span class="token punctuation">,</span> master_log_pos<span class="token operator">=</span><span class="token number">413</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>指定当前从库对应的主库的IP地址，用户名，密码，从哪个日志文件开始的那个位置开始同步推送日志。</p><p>4） 开启同步操作</p><pre class="line-numbers language-none"><code class="language-none">start slave;show slave status;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="/posts/9982416a/1554479387365.png" class="" width="1554479387365"> <p>5） 停止同步操作</p><pre class="line-numbers language-none"><code class="language-none">stop slave;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="3-4-3-验证同步操作"><a href="#3-4-3-验证同步操作" class="headerlink" title="3.4.3 验证同步操作"></a>3.4.3 验证同步操作</h5><p>1） 在主库中创建数据库，创建表，并插入数据 ：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">database</span> db01<span class="token punctuation">;</span><span class="token keyword">user</span> db01<span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token keyword">user</span><span class="token punctuation">(</span>id <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">auto_increment</span><span class="token punctuation">,</span>name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>sex <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">engine</span><span class="token operator">=</span><span class="token keyword">innodb</span> <span class="token keyword">default</span> <span class="token keyword">charset</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token keyword">user</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>sex<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token string">'Tom'</span><span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token keyword">user</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>sex<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token string">'Trigger'</span><span class="token punctuation">,</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token keyword">user</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>sex<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token string">'Dawn'</span><span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2） 在从库中查询数据，进行验证 ：</p><p>在从库中，可以查看到刚才创建的数据库：</p><img src="/posts/9982416a/1554544658640.png" class="" width="1554544658640"> <p>在该数据库中，查询user表中的数据：</p><img src="/posts/9982416a/1554544679538.png" class="" width="1554544679538"> <h3 id="4-综合案例"><a href="#4-综合案例" class="headerlink" title="4. 综合案例"></a>4. 综合案例</h3><h4 id="4-1-需求分析"><a href="#4-1-需求分析" class="headerlink" title="4.1 需求分析"></a>4.1 需求分析</h4><p>在业务系统中，需要记录当前业务系统的访问日志，该访问日志包含：操作人，操作时间，访问类，访问方法，请求参数，请求结果，请求结果类型，请求时长 等信息。记录详细的系统访问日志，主要便于对系统中的用户请求进行追踪，并且在系统 的管理后台可以查看到用户的访问记录。</p><p>记录系统中的日志信息，可以通过Spring 框架的AOP来实现。具体的请求处理流程，如下：</p><img src="/posts/9982416a/1555075760661.png" class="" width="1555075760661"> <h4 id="4-2-搭建案例环境"><a href="#4-2-搭建案例环境" class="headerlink" title="4.2 搭建案例环境"></a>4.2 搭建案例环境</h4><h5 id="4-2-1-数据库表"><a href="#4-2-1-数据库表" class="headerlink" title="4.2.1 数据库表"></a>4.2.1 数据库表</h5><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> mysql_demo <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8mb4 ；<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>brand<span class="token punctuation">`</span> <span class="token punctuation">(</span>  <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'品牌名称'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>first_char<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'品牌首字母'</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>item<span class="token punctuation">`</span> <span class="token punctuation">(</span>  <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'商品id'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>title<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'商品标题'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>price<span class="token punctuation">`</span> <span class="token keyword">double</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'商品价格，单位为：元'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>num<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'库存数量'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>categoryid<span class="token punctuation">`</span> <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'所属类目，叶子类目'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span><span class="token keyword">status</span><span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'商品状态，1-正常，2-下架，3-删除'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>sellerid<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'商家ID'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>createtime<span class="token punctuation">`</span> <span class="token keyword">datetime</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'创建时间'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>updatetime<span class="token punctuation">`</span> <span class="token keyword">datetime</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'更新时间'</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8 <span class="token keyword">COMMENT</span><span class="token operator">=</span><span class="token string">'商品表'</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span> <span class="token punctuation">(</span>  <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>username<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>password<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">96</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>birthday<span class="token punctuation">`</span> <span class="token keyword">datetime</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>sex<span class="token punctuation">`</span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>email<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>phone<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>qq<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>operation_log<span class="token punctuation">`</span> <span class="token punctuation">(</span>  <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'ID'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>operate_class<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'操作类'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>operate_method<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'操作方法'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>return_class<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'返回值类型'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>operate_user<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'操作用户'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>operate_time<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'操作时间'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>param_and_value<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'请求参数名及参数值'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>cost_time<span class="token punctuation">`</span> <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'执行方法耗时, 单位 ms'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>return_value<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'返回值'</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span>  <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8mb4<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-2-2-pom-xml"><a href="#4-2-2-pom-xml" class="headerlink" title="4.2.2 pom.xml"></a>4.2.2 pom.xml</h5><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">&gt;</span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">&gt;</span></span>1.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">&gt;</span></span>1.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">&gt;</span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring.version</span><span class="token punctuation">&gt;</span></span>5.0.2.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring.version</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slf4j.version</span><span class="token punctuation">&gt;</span></span>1.6.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slf4j.version</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>log4j.version</span><span class="token punctuation">&gt;</span></span>1.2.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>log4j.version</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mybatis.version</span><span class="token punctuation">&gt;</span></span>3.4.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mybatis.version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- spring --&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.aspectj<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>aspectjweaver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.6.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.16.16<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-context-support<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-orm<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-tx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>javax.servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>javax.servlet.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jsp-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${log4j.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${mybatis.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.3.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>c3p0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>c3p0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>0.9.1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.1.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jackson-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.9.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jackson-databind<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.9.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jackson-annotations<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.9.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.tomcat.maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>tomcat7-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>port</span><span class="token punctuation">&gt;</span></span>8080<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>port</span><span class="token punctuation">&gt;</span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>path</span><span class="token punctuation">&gt;</span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>path</span><span class="token punctuation">&gt;</span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>uriEncoding</span><span class="token punctuation">&gt;</span></span>utf-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>uriEncoding</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-2-3-web-xml"><a href="#4-2-3-web-xml" class="headerlink" title="4.2.3 web.xml"></a>4.2.3 web.xml</h5><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://java.sun.com/xml/ns/javaee<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd<span class="token punctuation">"</span></span>       <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2.5<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 解决post乱码 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">&gt;</span></span>org.springframework.web.filter.CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>utf-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>forceEncoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context-param</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>classpath:applicationContext.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context-param</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener-class</span><span class="token punctuation">&gt;</span></span>org.springframework.web.context.ContextLoaderListener<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener-class</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>springmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">&gt;</span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- 指定加载的配置文件 ，通过参数contextConfigLocation加载--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>classpath:springmvc.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>springmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>*.do<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file-list</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file</span><span class="token punctuation">&gt;</span></span>log-datalist.html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file-list</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-2-4-db-properties"><a href="#4-2-4-db-properties" class="headerlink" title="4.2.4 db.properties"></a>4.2.4 db.properties</h5><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">jdbc.driver</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.jdbc.Driver</span><span class="token attr-name">jdbc.url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://192.168.142.128:3306/mysql_demo</span><span class="token attr-name">jdbc.username</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">jdbc.password</span><span class="token punctuation">=</span><span class="token attr-value">itcast</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-2-5-applicationContext-xml"><a href="#4-2-5-applicationContext-xml" class="headerlink" title="4.2.5 applicationContext.xml"></a>4.2.5 applicationContext.xml</h5><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>tx</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/tx<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>   <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd                           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd                            http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd                            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 加载配置文件 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>property-placeholder</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>classpath:db.properties<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token comment">&lt;!-- 配置 spring 创建容器时要扫描的包 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cn.itcast<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>exclude-filter</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>annotation<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.stereotype.Controller<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>exclude-filter</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 配置 MyBatis 的 Session 工厂 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.mybatis.spring.SqlSessionFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>typeAliasesPackage<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cn.itcast.pojo<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 配置数据源 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.mchange.v2.c3p0.ComboPooledDataSource<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driverClass<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${jdbc.driver}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbcUrl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${jdbc.url}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${jdbc.username}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${jdbc.password}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 配置 Mapper 扫描器 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.mybatis.spring.mapper.MapperScannerConfigurer<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>basePackage<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cn.itcast.mapper<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 配置事务管理器 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DataSourceTransactionManager<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 配置事务的注解驱动 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>annotation-driven</span> <span class="token attr-name">transaction-manager</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>annotation-driven</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-2-6-springmvc-xml"><a href="#4-2-6-springmvc-xml" class="headerlink" title="4.2.6 springmvc.xml"></a>4.2.6 springmvc.xml</h5><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>mvc</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/mvc<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans            http://www.springframework.org/schema/beans/spring-beans.xsd            http://www.springframework.org/schema/mvc            http://www.springframework.org/schema/mvc/spring-mvc.xsd            http://www.springframework.org/schema/aop            http://www.springframework.org/schema/aop/spring-aop.xsd            http://www.springframework.org/schema/context            http://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cn.itcast.controller<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspectj-autoproxy</span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-2-7-导入基础工程"><a href="#4-2-7-导入基础工程" class="headerlink" title="4.2.7 导入基础工程"></a>4.2.7 导入基础工程</h5><img src="/posts/9982416a/1555076434270.png" class="" width="1555076434270"> <h4 id="4-3-通过AOP记录操作日志"><a href="#4-3-通过AOP记录操作日志" class="headerlink" title="4.3 通过AOP记录操作日志"></a>4.3 通过AOP记录操作日志</h4><h5 id="4-3-1-自定义注解"><a href="#4-3-1-自定义注解" class="headerlink" title="4.3.1 自定义注解"></a>4.3.1 自定义注解</h5><p>通过自定义注解，来标示方法需不需要进行记录日志，如果该方法在访问时需要记录日志，则在该方法上标示该注解既可。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Inherited</span><span class="token annotation punctuation">@Documented</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>METHOD<span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">OperateLog</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-3-2-定义通知类"><a href="#4-3-2-定义通知类" class="headerlink" title="4.3.2 定义通知类"></a>4.3.2 定义通知类</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Aspect</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OperateAdvice</span> <span class="token punctuation">{</span>      <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Logger</span> log <span class="token operator">=</span> <span class="token class-name">Logger</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">OperateAdvice</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token annotation punctuation">@Autowired</span>   <span class="token keyword">private</span> <span class="token class-name">OperationLogService</span> operationLogService<span class="token punctuation">;</span>      <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"execution(* cn.itcast.controller.*.*(..)) &amp;&amp; @annotation(operateLog)"</span><span class="token punctuation">)</span>   <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">insertLogAround</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> pjp <span class="token punctuation">,</span> <span class="token class-name">OperateLog</span> operateLog<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span><span class="token punctuation">{</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" ************************ 记录日志 [start]  ****************************** "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">OperationLog</span> op <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OperationLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">DateFormat</span> sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      op<span class="token punctuation">.</span><span class="token function">setOperateTime</span><span class="token punctuation">(</span>sdf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      op<span class="token punctuation">.</span><span class="token function">setOperateUser</span><span class="token punctuation">(</span><span class="token class-name">DataUtils</span><span class="token punctuation">.</span><span class="token function">getRandStr</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            op<span class="token punctuation">.</span><span class="token function">setOperateClass</span><span class="token punctuation">(</span>pjp<span class="token punctuation">.</span><span class="token function">getTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      op<span class="token punctuation">.</span><span class="token function">setOperateMethod</span><span class="token punctuation">(</span>pjp<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//获取方法调用时传递的参数</span>      <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> pjp<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      op<span class="token punctuation">.</span><span class="token function">setParamAndValue</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">long</span> start_time <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//放行</span>      <span class="token class-name">Object</span> object <span class="token operator">=</span> pjp<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">long</span> end_time <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      op<span class="token punctuation">.</span><span class="token function">setCostTime</span><span class="token punctuation">(</span>end_time <span class="token operator">-</span> start_time<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>object <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         op<span class="token punctuation">.</span><span class="token function">setReturnClass</span><span class="token punctuation">(</span>object<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         op<span class="token punctuation">.</span><span class="token function">setReturnValue</span><span class="token punctuation">(</span>object<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>         op<span class="token punctuation">.</span><span class="token function">setReturnClass</span><span class="token punctuation">(</span><span class="token string">"java.lang.Object"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         op<span class="token punctuation">.</span><span class="token function">setParamAndValue</span><span class="token punctuation">(</span><span class="token string">"void"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token class-name">JsonUtils</span><span class="token punctuation">.</span><span class="token function">obj2JsonString</span><span class="token punctuation">(</span>op<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      operationLogService<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>op<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" ************************** 记录日志 [end]  *************************** "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> object<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-3-3-方法上加注解"><a href="#4-3-3-方法上加注解" class="headerlink" title="4.3.3 方法上加注解"></a>4.3.3 方法上加注解</h5><p>在需要记录日志的方法上加上注解@OperateLog。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@OperateLog</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/insert"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">Brand</span> brand<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        brandService<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>brand<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token string">"操作成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token string">"操作失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-4-日志查询后端代码实现"><a href="#4-4-日志查询后端代码实现" class="headerlink" title="4.4 日志查询后端代码实现"></a>4.4 日志查询后端代码实现</h4><h5 id="4-4-1-Mapper接口"><a href="#4-4-1-Mapper接口" class="headerlink" title="4.4.1 Mapper接口"></a>4.4.1 Mapper接口</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">OperationLogMapper</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">OperationLog</span> operationLog<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OperationLog</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectListByCondition</span><span class="token punctuation">(</span><span class="token class-name">Map</span> dataMap<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Long</span> <span class="token function">countByCondition</span><span class="token punctuation">(</span><span class="token class-name">Map</span> dataMap<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-4-2-Mapper-xml-映射配置文件"><a href="#4-4-2-Mapper-xml-映射配置文件" class="headerlink" title="4.4.2 Mapper.xml 映射配置文件"></a>4.4.2 Mapper.xml 映射配置文件</h5><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span> <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span> <span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cn.itcast.mapper.OperationLogMapper<span class="token punctuation">"</span></span> <span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>insert<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>operationLog<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        INSERT INTO operation_log(id,return_value,return_class,operate_user,operate_time,param_and_value,        operate_class,operate_method,cost_time)      VALUES(NULL,#{returnValue},#{returnClass},#{operateUser},#{operateTime},#{paramAndValue},        #{operateClass},#{operateMethod},#{costTime})    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectListByCondition<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>operationLog<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>      select        id ,        operate_class as operateClass ,        operate_method as operateMethod,        return_class as returnClass,        operate_user as operateUser,        operate_time as operateTime,        param_and_value as paramAndValue,        cost_time as costTime,        return_value as returnValue      from operation_log      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>oplog_where<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>      limit #{start},#{size}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>countByCondition<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>long<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        select count(*) from operation_log        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>oplog_where<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sql</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>oplog_where<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>operateClass != null and operateClass != <span class="token punctuation">'</span><span class="token punctuation">'</span> <span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                and operate_class = #{operateClass}            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>operateMethod != null and operateMethod != <span class="token punctuation">'</span><span class="token punctuation">'</span> <span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                and operate_method = #{operateMethod}            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>returnClass != null and returnClass != <span class="token punctuation">'</span><span class="token punctuation">'</span> <span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                and return_class = #{returnClass}            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>costTime != null<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                and cost_time =  #{costTime}            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sql</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-4-3-Service"><a href="#4-4-3-Service" class="headerlink" title="4.4.3 Service"></a>4.4.3 Service</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token annotation punctuation">@Transactional</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OperationLogService</span> <span class="token punctuation">{</span>    <span class="token comment">//private static Logger logger = Logger.getLogger(OperationLogService.class);</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">OperationLogMapper</span> operationLogMapper<span class="token punctuation">;</span>    <span class="token comment">//插入数据</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">OperationLog</span> operationLog<span class="token punctuation">)</span><span class="token punctuation">{</span>        operationLogMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>operationLog<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//根据条件查询</span>    <span class="token keyword">public</span> <span class="token class-name">PageResult</span> <span class="token function">selectListByCondition</span><span class="token punctuation">(</span><span class="token class-name">Map</span> dataMap<span class="token punctuation">,</span> <span class="token class-name">Integer</span> pageNum <span class="token punctuation">,</span> <span class="token class-name">Integer</span> pageSize<span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>paramMap <span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            paramMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        paramMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"start"</span> <span class="token punctuation">,</span> <span class="token punctuation">(</span>pageNum<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>rows<span class="token punctuation">)</span><span class="token punctuation">;</span>        paramMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"rows"</span><span class="token punctuation">,</span>rows<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> costTime <span class="token operator">=</span> paramMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"costTime"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>costTime <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>costTime<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                paramMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"costTime"</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                paramMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"costTime"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Long</span><span class="token punctuation">(</span>paramMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"costTime"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dataMap<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> countStart <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Long</span> count <span class="token operator">=</span> operationLogMapper<span class="token punctuation">.</span><span class="token function">countByCondition</span><span class="token punctuation">(</span>dataMap<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> countEnd <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Count Cost Time : "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>countEnd<span class="token operator">-</span>countStart<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" ms"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OperationLog</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> operationLogMapper<span class="token punctuation">.</span><span class="token function">selectListByCondition</span><span class="token punctuation">(</span>dataMap<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> queryEnd <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Query Cost Time : "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>queryEnd<span class="token operator">-</span>countEnd<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" ms"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PageResult</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-4-4-Controller"><a href="#4-4-4-Controller" class="headerlink" title="4.4.4 Controller"></a>4.4.4 Controller</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/operationLog"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OperationLogController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">OperationLogService</span> operationLogService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/findList"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">PageResult</span> <span class="token function">findList</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">Map</span> dataMap<span class="token punctuation">,</span> <span class="token class-name">Integer</span> pageNum <span class="token punctuation">,</span> <span class="token class-name">Integer</span> pageSize<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">PageResult</span> page <span class="token operator">=</span> operationLogService<span class="token punctuation">.</span><span class="token function">selectListByCondition</span><span class="token punctuation">(</span>dataMap<span class="token punctuation">,</span> pageNum<span class="token punctuation">,</span> pageSize<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> page<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-5-日志查询前端代码实现"><a href="#4-5-日志查询前端代码实现" class="headerlink" title="4.5 日志查询前端代码实现"></a>4.5 日志查询前端代码实现</h4><p>前端代码使用 BootStrap + AdminLTE 进行布局， 使用Vuejs 进行视图层展示。</p><h5 id="4-5-1-js"><a href="#4-5-1-js" class="headerlink" title="4.5.1 js"></a>4.5.1 js</h5><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">   <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>       el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>       data<span class="token operator">:</span> <span class="token punctuation">{</span>           dataList<span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>           searchEntity<span class="token operator">:</span><span class="token punctuation">{</span>               operateClass<span class="token operator">:</span><span class="token string">''</span><span class="token punctuation">,</span>               operateMethod<span class="token operator">:</span><span class="token string">''</span><span class="token punctuation">,</span>               returnClass<span class="token operator">:</span><span class="token string">''</span><span class="token punctuation">,</span>               costTime<span class="token operator">:</span><span class="token string">''</span>           <span class="token punctuation">}</span><span class="token punctuation">,</span>           page<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token comment">//显示的是哪一页</span>           pageSize<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token comment">//每一页显示的数据条数</span>           total<span class="token operator">:</span> <span class="token number">150</span><span class="token punctuation">,</span> <span class="token comment">//记录总数</span>           maxPage<span class="token operator">:</span><span class="token number">8</span>  <span class="token comment">//最大页数</span>       <span class="token punctuation">}</span><span class="token punctuation">,</span>       methods<span class="token operator">:</span> <span class="token punctuation">{</span>           <span class="token function-variable function">pageHandler</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">page</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token keyword">this</span><span class="token punctuation">.</span>page <span class="token operator">=</span> page<span class="token punctuation">;</span>               <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span><span class="token punctuation">,</span>           <span class="token function-variable function">search</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token keyword">var</span> _this <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>               <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">showLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/operationLog/findList.do?pageNum='</span> <span class="token operator">+</span> _this<span class="token punctuation">.</span>page <span class="token operator">+</span> <span class="token string">"&amp;pageSize="</span> <span class="token operator">+</span> _this<span class="token punctuation">.</span>pageSize<span class="token punctuation">,</span> _this<span class="token punctuation">.</span>searchEntity<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                   <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token punctuation">{</span>                       _this<span class="token punctuation">.</span>dataList <span class="token operator">=</span> response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>dataList<span class="token punctuation">;</span>                       _this<span class="token punctuation">.</span>total <span class="token operator">=</span> response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>total<span class="token punctuation">;</span>                       _this<span class="token punctuation">.</span><span class="token function">hideLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token punctuation">}</span>               <span class="token punctuation">}</span><span class="token punctuation">)</span>           <span class="token punctuation">}</span><span class="token punctuation">,</span>           <span class="token function-variable function">showLoading</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#loadingModal'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">modal</span><span class="token punctuation">(</span><span class="token punctuation">{</span>backdrop<span class="token operator">:</span> <span class="token string">'static'</span><span class="token punctuation">,</span> keyboard<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span><span class="token punctuation">,</span>           <span class="token function-variable function">hideLoading</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#loadingModal'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">modal</span><span class="token punctuation">(</span><span class="token string">'hide'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span><span class="token punctuation">,</span>       <span class="token punctuation">}</span><span class="token punctuation">,</span>       <span class="token function-variable function">created</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">pageHandler</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-5-2-列表数据展示"><a href="#4-5-2-列表数据展示" class="headerlink" title="4.5.2 列表数据展示"></a>4.5.2 列表数据展示</h5><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item in dataList<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ids<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>{{item.id}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>{{item.operateClass}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>{{item.operateMethod}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>{{item.returnClass}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>{{item.returnValue}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>{{item.operateUser}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>{{item.operateTime}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>{{item.costTime}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text-center<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn bg-olive btn-xs<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>详情<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn bg-olive btn-xs<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>删除<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.5.3 分页插件</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>zpagenav</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>page</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>page<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-bind:</span>page-size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pageSize<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-bind:</span>total</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>total<span class="token punctuation">"</span></span>              <span class="token attr-name"><span class="token namespace">v-bind:</span>max-page</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>maxPage<span class="token punctuation">"</span></span>  <span class="token attr-name"><span class="token namespace">v-on:</span>pagehandler</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pageHandler<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>zpagenav</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-6-联调测试"><a href="#4-6-联调测试" class="headerlink" title="4.6 联调测试"></a>4.6 联调测试</h4><p>可以通过postman来访问业务系统，再查看数据库中的日志信息，验证能不能将用户的访问日志记录下来。</p><img src="/posts/9982416a/1555077276426.png" class="" width="1555077276426"> <h4 id="4-7-分析性能问题"><a href="#4-7-分析性能问题" class="headerlink" title="4.7 分析性能问题"></a>4.7 分析性能问题</h4><p>系统中用户访问日志的数据量，随着时间的推移，这张表的数据量会越来越大，因此我们需要根据业务需求，来对日志查询模块的性能进行优化。</p><p>1） 分页查询优化</p><p>由于在进行日志查询时，是进行分页查询，那也就意味着，在查看时，至少需要查询两次：</p><p>A. 查询符合条件的总记录数。–&gt; count 操作</p><p>B. 查询符合条件的列表数据。–&gt; 分页查询 limit 操作</p><p>通常来说，count() 都需要扫描大量的行（意味着需要访问大量的数据）才能获得精确的结果，因此是很难对该SQL进行优化操作的。如果需要对count进行优化，可以采用另外一种思路，可以增加汇总表，或者redis缓存来专门记录该表对应的记录数，这样的话，就可以很轻松的实现汇总数据的查询，而且效率很高，但是这种统计并不能保证百分之百的准确 。对于数据库的操作，“快速、精确、实现简单”，三者永远只能满足其二，必须舍掉其中一个。</p><p>2） 条件查询优化</p><p>针对于条件查询,需要对查询条件,及排序字段建立索引。</p><p>3） 读写分离</p><p>通过主从复制集群，来完成读写分离，使写操作走主节点， 而读操作，走从节点。</p><p>4） MySQL服务器优化</p><p>5） 应用优化</p><h4 id="4-8-性能优化-分页"><a href="#4-8-性能优化-分页" class="headerlink" title="4.8 性能优化 - 分页"></a>4.8 性能优化 - 分页</h4><h5 id="4-8-1-优化count"><a href="#4-8-1-优化count" class="headerlink" title="4.8.1 优化count"></a>4.8.1 优化count</h5><p>创建一张表用来记录日志表的总数据量：</p><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">create table log_counter(logcount bigint not null)engine = innodb default CHARSET = utf8;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在每次插入数据之后，更新该表 ：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>updateLogCounter<span class="token punctuation">"</span></span> <span class="token punctuation">&gt;</span></span>    update log_counter set logcount = logcount + 1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在进行分页查询时, 获取总记录数，从该表中查询既可。</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>countLogFromCounter<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>long<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    select logcount from log_counter limit 1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="4-8-2-优化-limit"><a href="#4-8-2-优化-limit" class="headerlink" title="4.8.2 优化 limit"></a>4.8.2 优化 limit</h5><p>在进行分页时，一般通过创建覆盖索引，能够比较好的提高性能。一个非常常见，而又非常头疼的分页场景就是 “limit 1000000,10” ，此时MySQL需要搜索出前1000010 条记录后，仅仅需要返回第 1000001 到 1000010 条记录，前1000000 记录会被抛弃，查询代价非常大。 </p><img src="/posts/9982416a/1555081714638.png" class="" width="1555081714638"> <p>当点击比较靠后的页码时，就会出现这个问题，查询效率非常慢。</p><p>优化SQL：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> operation_log <span class="token keyword">limit</span> <span class="token number">3000000</span> <span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将上述SQL优化为 : </p><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">select * from operation_log t , (select id from operation_log order by id limit 3000000,10) b where t.id = b.id ;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectListByCondition<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>operationLog<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  select    id ,    operate_class as operateClass ,    operate_method as operateMethod,    return_class as returnClass,    operate_user as operateUser,    operate_time as operateTime,    param_and_value as paramAndValue,    cost_time as costTime,    return_value as returnValue  from operation_log t,      (select id from operation_log   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>oplog_where<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">&gt;</span></span>  order by id limit #{start},#{rows}) b  where t.id = b.id  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-9-性能优化-索引"><a href="#4-9-性能优化-索引" class="headerlink" title="4.9 性能优化 - 索引"></a>4.9 性能优化 - 索引</h4><img src="/posts/9982416a/1555152703824.png" class="" width="1555152703824"><p>当根据操作人进行查询时， 查询的效率很低，耗时比较长。原因就是因为在创建数据库表结构时，并没有针对于 操作人 字段建立索引。</p><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">CREATE INDEX idx_user_method_return_cost ON operation_log(operate_user,operate_method,return_class,cost_time);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>同上 ， 为了查询效率高，我们也需要对 操作方法、返回值类型、操作耗时 等字段进行创建索引，以提高查询效率。</p><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">CREATE INDEX idx_optlog_method_return_cost ON operation_log(operate_method,return_class,cost_time);CREATE INDEX idx_optlog_return_cost ON operation_log(return_class,cost_time);CREATE INDEX idx_optlog_cost ON operation_log(cost_time);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-10-性能优化-排序"><a href="#4-10-性能优化-排序" class="headerlink" title="4.10 性能优化 - 排序"></a>4.10 性能优化 - 排序</h4><p>在查询数据时，如果业务需求中需要我们对结果内容进行了排序处理 , 这个时候,我们还需要对排序的字段建立适当的索引, 来提高排序的效率 。</p><h4 id="4-11-性能优化-读写分离"><a href="#4-11-性能优化-读写分离" class="headerlink" title="4.11 性能优化 - 读写分离"></a>4.11 性能优化 - 读写分离</h4><h5 id="4-11-1-概述"><a href="#4-11-1-概述" class="headerlink" title="4.11.1 概述"></a>4.11.1 概述</h5><p>在Mysql主从复制的基础上，可以使用读写分离来降低单台Mysql节点的压力，从而来提高访问效率，读写分离的架构如下：</p><img src="/posts/9982416a/1555235426739.png" class="" width="1555235426739"> <p>对于读写分离的实现，可以通过Spring AOP 来进行动态的切换数据源，进行操作 ：</p><h5 id="4-11-2-实现方式"><a href="#4-11-2-实现方式" class="headerlink" title="4.11.2 实现方式"></a>4.11.2 实现方式</h5><p>db.properties</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">jdbc.write.driver</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.jdbc.Driver</span><span class="token attr-name">jdbc.write.url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://192.168.142.128:3306/mysql_demo</span><span class="token attr-name">jdbc.write.username</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">jdbc.write.password</span><span class="token punctuation">=</span><span class="token attr-value">itcast</span><span class="token attr-name">jdbc.read.driver</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.jdbc.Driver</span><span class="token attr-name">jdbc.read.url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://192.168.142.129:3306/mysql_demo</span><span class="token attr-name">jdbc.read.username</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">jdbc.read.password</span><span class="token punctuation">=</span><span class="token attr-value">itcast</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>applicationContext-datasource.xml</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>tx</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/tx<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 配置数据源 - Read --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>readDataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.mchange.v2.c3p0.ComboPooledDataSource<span class="token punctuation">"</span></span> <span class="token attr-name">destroy-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>close<span class="token punctuation">"</span></span>  <span class="token attr-name">lazy-init</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driverClass<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${jdbc.read.driver}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbcUrl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${jdbc.read.url}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${jdbc.read.username}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${jdbc.read.password}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 配置数据源 - Write --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>writeDataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.mchange.v2.c3p0.ComboPooledDataSource<span class="token punctuation">"</span></span>  <span class="token attr-name">destroy-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>close<span class="token punctuation">"</span></span>  <span class="token attr-name">lazy-init</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driverClass<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${jdbc.write.driver}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbcUrl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${jdbc.write.url}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${jdbc.write.username}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${jdbc.write.password}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 配置动态分配的读写 数据源 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cn.itcast.aop.datasource.ChooseDataSource<span class="token punctuation">"</span></span> <span class="token attr-name">lazy-init</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>targetDataSources<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>map</span> <span class="token attr-name">key-type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java.lang.String<span class="token punctuation">"</span></span> <span class="token attr-name">value-type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>javax.sql.DataSource<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>write<span class="token punctuation">"</span></span> <span class="token attr-name">value-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>writeDataSource<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>read<span class="token punctuation">"</span></span> <span class="token attr-name">value-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>readDataSource<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>map</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>defaultTargetDataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>writeDataSource<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>methodType<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>map</span> <span class="token attr-name">key-type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java.lang.String<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>read<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>,get,select,count,list,query,find<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>write<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>,add,create,update,delete,remove,insert<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>map</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ChooseDataSource</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChooseDataSource</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractRoutingDataSource</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> METHOD_TYPE_MAP <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 实现父类中的抽象方法，获取数据源名称     * @return     */</span>    <span class="token keyword">protected</span> <span class="token class-name">Object</span> <span class="token function">determineCurrentLookupKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">DataSourceHandler</span><span class="token punctuation">.</span><span class="token function">getDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 设置方法名前缀对应的数据源</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMethodType</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> map<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> key <span class="token operator">:</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> v <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> types <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> type <span class="token operator">:</span> types<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    v<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            METHOD_TYPE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"METHOD_TYPE_MAP : "</span><span class="token operator">+</span>METHOD_TYPE_MAP<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>DataSourceHandler</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataSourceHandler</span> <span class="token punctuation">{</span>    <span class="token comment">// 数据源名称</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> holder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 在项目启动的时候将配置的读、写数据源加到holder中     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">putDataSource</span><span class="token punctuation">(</span><span class="token class-name">String</span> datasource<span class="token punctuation">)</span> <span class="token punctuation">{</span>        holder<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>datasource<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 从holer中获取数据源字符串     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> holder<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>DataSourceAspect</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Aspect</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">9999</span><span class="token punctuation">)</span><span class="token annotation punctuation">@EnableAspectJAutoProxy</span><span class="token punctuation">(</span>proxyTargetClass <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataSourceAspect</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 配置前置通知,使用在方法aspect()上注册的切入点     */</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"execution(* cn.itcast.service.*.*(..))"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">9999</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> point<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">String</span> className <span class="token operator">=</span> point<span class="token punctuation">.</span><span class="token function">getTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> method <span class="token operator">=</span> point<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>className <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> method <span class="token operator">+</span> <span class="token string">"("</span> <span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>point<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> key <span class="token operator">:</span> <span class="token class-name">ChooseDataSource</span><span class="token punctuation">.</span>METHOD_TYPE_MAP<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> type <span class="token operator">:</span> <span class="token class-name">ChooseDataSource</span><span class="token punctuation">.</span>METHOD_TYPE_MAP<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"key : "</span> <span class="token operator">+</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">DataSourceHandler</span><span class="token punctuation">.</span><span class="token function">putDataSource</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过 @Order(-9999) 注解来控制事务管理器, 与该通知类的加载顺序 , 需要让通知类 , 先加载 , 来判定使用哪个数据源 .</p><h5 id="4-11-3-验证"><a href="#4-11-3-验证" class="headerlink" title="4.11.3 验证"></a>4.11.3 验证</h5><p>在主库和从库中，执行如下SQL语句，来查看是否读的时候， 从从库中读取 ； 写入操作的时候，是否写入到主库。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">status</span> <span class="token operator">like</span> <span class="token string">'Innodb_rows_%'</span> <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/posts/9982416a/1555235982584.png" class="" width="1555235982584"> <h5 id="4-11-4-原理"><a href="#4-11-4-原理" class="headerlink" title="4.11.4 原理"></a>4.11.4 原理</h5><img src="/posts/9982416a/aop-datasource.png" class="" width="1555235982584"><h4 id="4-12-性能优化-应用优化"><a href="#4-12-性能优化-应用优化" class="headerlink" title="4.12 性能优化 - 应用优化"></a>4.12 性能优化 - 应用优化</h4><h5 id="4-12-1-缓存"><a href="#4-12-1-缓存" class="headerlink" title="4.12.1 缓存"></a>4.12.1 缓存</h5><p>可以在业务系统中使用redis来做缓存，缓存一些基础性的数据，来降低关系型数据库的压力，提高访问效率。</p><h5 id="4-12-2-全文检索"><a href="#4-12-2-全文检索" class="headerlink" title="4.12.2 全文检索"></a>4.12.2 全文检索</h5><p>如果业务系统中的数据量比较大（达到千万级别），这个时候，如果再对数据库进行查询，特别是进行分页查询，速度将变得很慢（因为在分页时首先需要count求合计数），为了提高访问效率，这个时候，可以考虑加入Solr 或者 ElasticSearch全文检索服务，来提高访问效率。</p><h5 id="4-13-3-非关系数据库"><a href="#4-13-3-非关系数据库" class="headerlink" title="4.13.3 非关系数据库"></a>4.13.3 非关系数据库</h5><p>也可以考虑将非核心（重要）数据，存在 MongoDB 中，这样可以提高插入以及查询的效率。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="mysql" scheme="https://macongmc.github.io/categories/mysql/"/>
    
    
    <category term="mysql" scheme="https://macongmc.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>SQL</title>
    <link href="https://macongmc.github.io/posts/4d712855.html"/>
    <id>https://macongmc.github.io/posts/4d712855.html</id>
    <published>2022-09-07T12:29:55.000Z</published>
    <updated>2022-09-07T12:29:55.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="第一章-基本的select语句"><a href="#第一章-基本的select语句" class="headerlink" title="第一章 基本的select语句"></a>第一章 基本的select语句</h2><h3 id="1-SQL的分类"><a href="#1-SQL的分类" class="headerlink" title="1.SQL的分类"></a>1.SQL的分类</h3><p>DDL:数据定义语言。create\alter\drop\rename\truncate</p><p>DML:数据操作语言。insert\delete\update\select</p><p>CDL:数据控制语言。cimmit\rollback\savepoint</p><h3 id="2-SQL语言的规则和规范"><a href="#2-SQL语言的规则和规范" class="headerlink" title="2.SQL语言的规则和规范"></a>2.SQL语言的规则和规范</h3><h4 id="2-1基本规则"><a href="#2-1基本规则" class="headerlink" title="2.1基本规则"></a>2.1基本规则</h4><img src="/posts/4d712855/image-20220907205823780.png" class="" title="image-20220907205823780"><h4 id="2-2大小写规范"><a href="#2-2大小写规范" class="headerlink" title="2.2大小写规范"></a>2.2大小写规范</h4><img src="/posts/4d712855/image-20220907210044705.png" class="" title="image-20220907210044705"><h4 id="2-3注释"><a href="#2-3注释" class="headerlink" title="2.3注释"></a>2.3注释</h4><img src="/posts/4d712855/image-20220907210520557.png" class="" title="image-20220907210520557"><h4 id="2-4命名规则"><a href="#2-4命名规则" class="headerlink" title="2.4命名规则"></a>2.4命名规则</h4><img src="/posts/4d712855/image-20220907210603647.png" class="" title="image-20220907210603647"><h3 id="3-最基本的SELECT语句"><a href="#3-最基本的SELECT语句" class="headerlink" title="3.最基本的SELECT语句"></a>3.最基本的SELECT语句</h3><h4 id="3-1SELECT-字段1，字段2-FROM-表名"><a href="#3-1SELECT-字段1，字段2-FROM-表名" class="headerlink" title="3.1SELECT 字段1，字段2 FROM 表名"></a>3.1SELECT 字段1，字段2 FROM 表名</h4><p>SELECT * FROM employess;</p><p>*表示所有字段。</p><h4 id="3-2列的别名"><a href="#3-2列的别名" class="headerlink" title="3.2列的别名"></a>3.2列的别名</h4><p>使用空格，as,as加双引号</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> employee_id <span class="token keyword">AS</span> <span class="token string">"empid"</span> <span class="token punctuation">,</span>last_name <span class="token keyword">AS</span> <span class="token string">"name"</span><span class="token punctuation">,</span>department_id <span class="token keyword">FROM</span> employees<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/posts/4d712855/image-20220907211833744.png" class="" title="image-20220907211833744"><p><strong>注意：起别名中间有空格必须加双引号，</strong></p><h4 id="3-3去除重复行-DISTINCT"><a href="#3-3去除重复行-DISTINCT" class="headerlink" title="3.3去除重复行 DISTINCT"></a>3.3去除重复行 DISTINCT</h4><p>DISTINCT</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#查询员工表一共有那些部门id</span><span class="token keyword">SELECT</span> department_id <span class="token keyword">FROM</span> employees<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#查询员工表一共有那些部门id</span><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> department_id <span class="token keyword">FROM</span> employees<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="3-4空值参与运算"><a href="#3-4空值参与运算" class="headerlink" title="3.4空值参与运算"></a>3.4空值参与运算</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#空值：NULL</span><span class="token comment">#null不等于0</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> employees<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> employee_id<span class="token punctuation">,</span>salary <span class="token keyword">AS</span> <span class="token string">"月工资"</span> <span class="token punctuation">,</span>salary<span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span>commission_pct<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">12</span> <span class="token keyword">AS</span> <span class="token string">"年工资"</span><span class="token punctuation">,</span>commission_pct <span class="token keyword">FROM</span> employees<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> employee_id<span class="token punctuation">,</span>salary <span class="token keyword">AS</span> <span class="token string">"月工资"</span> <span class="token punctuation">,</span>salary<span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span>IFNULL<span class="token punctuation">(</span>commission_pct<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">12</span> <span class="token keyword">AS</span> <span class="token string">"年工资"</span><span class="token punctuation">,</span>commission_pct <span class="token keyword">FROM</span> employees<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>IFNULL(字段，数值)</p><h4 id="3-5着重号"><a href="#3-5着重号" class="headerlink" title="3.5着重号  ``"></a>3.5着重号  ``</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>关键字的表名<span class="token punctuation">`</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-6查询常数"><a href="#3-6查询常数" class="headerlink" title="3.6查询常数"></a>3.6查询常数</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span>  <span class="token string">'常数'</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> 表名   每列都有<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-7显示表结构"><a href="#3-7显示表结构" class="headerlink" title="3.7显示表结构"></a>3.7显示表结构</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DESCRIBE</span> employees<span class="token keyword">DESC</span> 表名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><img src="/posts/4d712855/image-20220907214157412.png" class="" title="image-20220907214157412"><h4 id="3-8WHERE过滤"><a href="#3-8WHERE过滤" class="headerlink" title="3.8WHERE过滤"></a>3.8WHERE过滤</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> emp <span class="token keyword">WHERE</span> id <span class="token operator">=</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="第二章-运算符"><a href="#第二章-运算符" class="headerlink" title="第二章 运算符"></a>第二章 运算符</h2><h3 id="1-算术运算符"><a href="#1-算术运算符" class="headerlink" title="1.算术运算符"></a>1.算术运算符</h3><img src="/posts/4d712855/image-20220908195805396.png" class="" title="image-20220908195805396"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token number">100</span><span class="token operator">+</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token operator">+</span><span class="token number">35.5</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token operator">-</span><span class="token number">35.5</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#查询员工id为偶数的员工信息</span><span class="token keyword">SELECT</span> employee_id<span class="token punctuation">,</span>last_name<span class="token punctuation">,</span>salary <span class="token keyword">FROM</span> employees <span class="token keyword">WHERE</span> employee_id <span class="token operator">%</span><span class="token number">2</span><span class="token operator">=</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-比较运算符"><a href="#2-比较运算符" class="headerlink" title="2.比较运算符"></a>2.比较运算符</h3><img src="/posts/4d712855/image-20220908201241569.png" class="" title="image-20220908201241569"><h4 id="2-1-lt-gt-lt-gt-lt-lt-gt-gt"><a href="#2-1-lt-gt-lt-gt-lt-lt-gt-gt" class="headerlink" title="2.1 = <=> <>!  < <= > >="></a>2.1 = &lt;=&gt; &lt;&gt;!  &lt; &lt;= &gt; &gt;=</h4><p>=</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#=</span><span class="token keyword">SELECT</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token operator">!=</span><span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><img src="/posts/4d712855/image-20220908201500693.png" class="" title="image-20220908201500693"><p><strong>有数字会隐士转化</strong>  字符串为0</p><p><strong>有null参数比较结果为NULL</strong></p><p>&lt;=&gt;为null而生  当有的字段为null时</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token number">1</span> <span class="token operator">&lt;=&gt;</span> <span class="token boolean">null</span><span class="token punctuation">,</span><span class="token boolean">null</span><span class="token operator">&lt;=&gt;</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token operator">=</span><span class="token boolean">null</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/posts/4d712855/image-20220908202346904.png" class="" title="image-20220908202346904"><p>查询表中为null的数据。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> employees <span class="token keyword">WHERE</span> commission_pct <span class="token operator">&lt;=&gt;</span> <span class="token boolean">NULL</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/posts/4d712855/image-20220908202637975.png" class="" title="image-20220908202637975"><h4 id="2-2关键字"><a href="#2-2关键字" class="headerlink" title="2.2关键字"></a>2.2关键字</h4><img src="/posts/4d712855/image-20220908202807116.png" class="" title="image-20220908202807116"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#is null \ is not null \isnull</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>IS NULL </p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> employees <span class="token keyword">WHERE</span> commission_pct <span class="token operator">IS</span> <span class="token boolean">NULL</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>IS NOT NULL</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> employees <span class="token keyword">WHERE</span> commission_pct <span class="token operator">IS</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>ISNULL</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> employees <span class="token keyword">WHERE</span> ISNULL<span class="token punctuation">(</span>commission_pct <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>LEAST() \ GREATEST</p><img src="/posts/4d712855/image-20220908203601639.png" class="" title="image-20220908203601639"><p>BETWEEN   AND  之前</p><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">#查询工资在6000到8000的SELECT employee_id,last_name,salary FROM salary BETWEEN 6000 AND 8000;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>闭区间</p><p>IN</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">id <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>NOT IN</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">id <span class="token operator">NOT</span> <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>LIKE 模糊查询</p><p>%任意字符   </p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> demo <span class="token keyword">WHERE</span> name <span class="token operator">LIKE</span> <span class="token string">'%a'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>_代表一个字符</p><p>REGEXP \ RLIKE</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token string">'字符串'</span> REGEXO <span class="token string">'匹配规则'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-3逻辑运算符"><a href="#2-3逻辑运算符" class="headerlink" title="2.3逻辑运算符"></a>2.3逻辑运算符</h4><img src="/posts/4d712855/image-20220908204747554.png" class="" title="image-20220908204747554"><img src="/posts/4d712855/image-20220908204920652.png" class="" title="image-20220908204920652"><h2 id="第三章-排序与分页"><a href="#第三章-排序与分页" class="headerlink" title="第三章 排序与分页"></a>第三章 排序与分页</h2><h4 id="1-排序数据"><a href="#1-排序数据" class="headerlink" title="1.排序数据"></a>1.排序数据</h4><p>1.1排序规矩</p><p>使用ORDER BY 字句</p><p>ASC :升序</p><p>DESC:降序</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> employee <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> employee_id <span class="token keyword">ASC</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>列的别名只能在ORDER BY 使用，不能再WHERE 中使用</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> employee_id<span class="token punctuation">,</span>salary<span class="token keyword">FROM</span> employees<span class="token keyword">WHERE</span> department_id <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">)</span>OREDR <span class="token keyword">BY</span> department_id <span class="token keyword">DESC</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>1.2二级排序</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#练习：显示员工信息，安装department_id的降序排列，salary的升序排列</span><span class="token keyword">SELECT</span> employee_id<span class="token punctuation">,</span>salary<span class="token keyword">FROM</span> employees<span class="token keyword">WHERE</span> department_id <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">)</span>OREDR <span class="token keyword">BY</span> department_id <span class="token keyword">DESC</span><span class="token punctuation">,</span>salary <span class="token keyword">ASC</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-分页"><a href="#2-分页" class="headerlink" title="2.分页"></a>2.分页</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> employees <span class="token keyword">LIMIT</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>*<em>公式：LIMIT    (pageNo-1)<em>pageSize ,  pageSize;</em></em></p><p>WHERE … OREDER BY … LIMIT</p><p>mysql8.0新特性 LIMIT … OFFSET …</p><p>指定第几条数据 32 33</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> employee_id <span class="token keyword">FROM</span> employees <span class="token keyword">LIMIT</span> <span class="token number">2</span> <span class="token keyword">OFFSET</span> <span class="token number">31</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/posts/4d712855/image-20220912195649339.png" class="" title="image-20220912195649339"><h2 id="第四章-多表查询"><a href="#第四章-多表查询" class="headerlink" title="第四章 多表查询"></a>第四章 多表查询</h2><h3 id="1-熟悉场常见的几个表"><a href="#1-熟悉场常见的几个表" class="headerlink" title="1.熟悉场常见的几个表"></a>1.熟悉场常见的几个表</h3><p>DESC employees;</p><p>DESC departments;</p><p>DESC locations;</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#查询一个员工名为'Abel'的人在那个城市工作？</span><span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token keyword">FROM</span> employees<span class="token keyword">WHERE</span> last_name <span class="token operator">=</span> <span class="token string">'Abel'</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> departments<span class="token keyword">WHERE</span> department_id <span class="token operator">=</span> <span class="token number">80</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> locations<span class="token keyword">WHERE</span> location_id <span class="token operator">=</span> <span class="token number">2500</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-多表查询实现"><a href="#2-多表查询实现" class="headerlink" title="2.多表查询实现"></a>2.多表查询实现</h3><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">#错误方式SELECT * FROM employees,departments;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>笛卡儿积错误。</p><p>正确方式</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> employee_id<span class="token punctuation">,</span>department_name<span class="token keyword">FROM</span> employees<span class="token punctuation">,</span>departments<span class="token keyword">WHERE</span> employees<span class="token punctuation">.</span>department_id <span class="token operator">=</span> departments<span class="token punctuation">.</span>department_id<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#查询字段中两个表都有，必须指定那张表中。</span><span class="token keyword">SELECT</span> employee_id<span class="token punctuation">,</span>department_name<span class="token punctuation">,</span>departments<span class="token punctuation">.</span>department_id<span class="token keyword">FROM</span> employees<span class="token punctuation">,</span>departments<span class="token keyword">WHERE</span> employees<span class="token punctuation">.</span>department_id <span class="token operator">=</span> departments<span class="token punctuation">.</span>department_id<span class="token punctuation">;</span><span class="token comment">#建议：从SQL优化的角度，建议每个字段都加上表名。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>表名  可以起别名 </p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#练习查询员工employee_id,last_name,department_name,city</span><span class="token keyword">SELECT</span> employee_id<span class="token punctuation">,</span>last_name<span class="token punctuation">,</span>department_name<span class="token punctuation">,</span>city<span class="token keyword">FROM</span> employees e<span class="token punctuation">,</span>departments d<span class="token punctuation">,</span>locations l<span class="token keyword">WHERE</span> e<span class="token punctuation">.</span>department_id<span class="token operator">=</span>d<span class="token punctuation">.</span>department_id <span class="token operator">AND</span> d<span class="token punctuation">.</span>location_id <span class="token operator">=</span> l<span class="token punctuation">.</span>location_id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-多表查询分类"><a href="#3-多表查询分类" class="headerlink" title="3.多表查询分类"></a>3.多表查询分类</h3><p>角度1:等值连接  VS 非等值连接</p><p>角度2: 自连接     VS  非自连接</p><p>角度3: 内连接      VS 外连接</p><h4 id="3-1等值-VS-非等值连接"><a href="#3-1等值-VS-非等值连接" class="headerlink" title="3.1等值 VS 非等值连接"></a>3.1等值 VS 非等值连接</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#非等值连接的例子</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> job_grades<span class="token punctuation">;</span><span class="token keyword">SELECT</span> last_name<span class="token punctuation">,</span>salary<span class="token punctuation">,</span>grade_level<span class="token keyword">FROM</span> employees e<span class="token punctuation">,</span>job_grades j<span class="token keyword">WHERE</span> e<span class="token punctuation">.</span>salary <span class="token operator">BETWEEN</span> j<span class="token punctuation">.</span>lowest_sal <span class="token operator">AND</span> j<span class="token punctuation">.</span>highest_sal<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-2自连接-VS-非自连接"><a href="#3-2自连接-VS-非自连接" class="headerlink" title="3.2自连接  VS 非自连接"></a>3.2自连接  VS 非自连接</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#练习 查询员工id,员工姓名，及管理者的id和姓名</span><span class="token keyword">SELECT</span> emp<span class="token punctuation">.</span>employee_id<span class="token punctuation">,</span>emp<span class="token punctuation">.</span>last_name<span class="token punctuation">,</span>mgr<span class="token punctuation">.</span>employee_id<span class="token punctuation">,</span>mgr<span class="token punctuation">.</span>last_name<span class="token keyword">FROM</span> employees emp<span class="token punctuation">,</span>employees mgr<span class="token keyword">WHERE</span> emp<span class="token punctuation">.</span>manager_id <span class="token operator">=</span> mgr<span class="token punctuation">.</span>employee_id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-3内连接-VS-外连接"><a href="#3-3内连接-VS-外连接" class="headerlink" title="3.3内连接  VS 外连接"></a>3.3内连接  VS 外连接</h4><p>内连接 :合并具有同一列的两个以上的表的行，结果集中不包含一个表与另一个表不匹配的行</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> employee_id<span class="token punctuation">,</span>department_name<span class="token punctuation">,</span>departments<span class="token punctuation">.</span>department_id<span class="token keyword">FROM</span> employees<span class="token punctuation">,</span>departments<span class="token keyword">WHERE</span> employees<span class="token punctuation">.</span>department_id <span class="token operator">=</span> departments<span class="token punctuation">.</span>department_id<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>外连接：合并具有同一列的两个以上的表的行，结果集中除了匹配的行外，还查询到左表中不匹配的行。</p><p>外连接分类：</p><p>SQL92语法实现内连接：见上</p><p>SQL92实现外连接：使用+</p><p>MYSQL不支持92的外连接。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> employee_id<span class="token punctuation">,</span>department_name<span class="token punctuation">,</span>departments<span class="token punctuation">.</span>department_id<span class="token keyword">FROM</span> employees<span class="token punctuation">,</span>departments<span class="token keyword">WHERE</span> employees<span class="token punctuation">.</span>department_id <span class="token operator">=</span> departments<span class="token punctuation">.</span>department_id<span class="token punctuation">(</span><span class="token operator">+</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>SQL99语法 join on</p><p>内连接</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> last_name<span class="token punctuation">,</span>department_name<span class="token keyword">FROM</span> employees e <span class="token keyword">JOIN</span> departments d<span class="token keyword">ON</span> e<span class="token punctuation">.</span>department_id<span class="token operator">=</span>d<span class="token punctuation">.</span>department_id<span class="token punctuation">;</span><span class="token keyword">SELECT</span> last_name<span class="token punctuation">,</span>department_name<span class="token punctuation">,</span>city<span class="token keyword">FROM</span> employees e <span class="token keyword">JOIN</span> departments d<span class="token keyword">ON</span> e<span class="token punctuation">.</span>department_id<span class="token operator">=</span>d<span class="token punctuation">.</span>department_id<span class="token keyword">JOIN</span> locations l<span class="token keyword">ON</span> d<span class="token punctuation">.</span>location_id<span class="token operator">=</span>l<span class="token punctuation">.</span>location_id<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>左外连接：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#练习 查询所有的员工的last_name,department_name信息</span><span class="token keyword">SELECT</span> employee_id<span class="token punctuation">,</span>department_name<span class="token punctuation">,</span>departments<span class="token punctuation">.</span>department_id<span class="token keyword">FROM</span> employees <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> departments <span class="token keyword">ON</span>  employees<span class="token punctuation">.</span>department_id <span class="token operator">=</span> departments<span class="token punctuation">.</span>department_id<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>右外连接：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#练习 查询所有的员工的last_name,department_name信息</span><span class="token keyword">SELECT</span> employee_id<span class="token punctuation">,</span>department_name<span class="token punctuation">,</span>departments<span class="token punctuation">.</span>department_id<span class="token keyword">FROM</span> employees <span class="token keyword">RIGHT</span> <span class="token keyword">JOIN</span> departments <span class="token keyword">ON</span>  employees<span class="token punctuation">.</span>department_id <span class="token operator">=</span> departments<span class="token punctuation">.</span>department_id<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>MySQL不支持FULL JOIN … ON</p><p>满外连接：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#练习 查询所有的员工的last_name,department_name信息</span><span class="token keyword">SELECT</span> employee_id<span class="token punctuation">,</span>department_name<span class="token punctuation">,</span>departments<span class="token punctuation">.</span>department_id<span class="token keyword">FROM</span> employees <span class="token keyword">FULL</span> <span class="token keyword">JOIN</span> departments <span class="token keyword">ON</span>  employees<span class="token punctuation">.</span>department_id <span class="token operator">=</span> departments<span class="token punctuation">.</span>department_id<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-4UNION"><a href="#3-4UNION" class="headerlink" title="3.4UNION"></a>3.4UNION</h4><img src="/posts/4d712855/image-20220913221208684.png" class="" title="image-20220913221208684"><p>UNION  自己去重</p><p>UNION ALL  两份中间部分</p><p>去重效率低</p><h4 id="3-5-7种SQL-JOINS-的实现"><a href="#3-5-7种SQL-JOINS-的实现" class="headerlink" title="3.5  7种SQL JOINS 的实现"></a>3.5  7种SQL JOINS 的实现</h4><img src="/posts/4d712855/image-20220913221733713.png" class="" title="image-20220913221733713"><p>中图</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> employee_id<span class="token punctuation">,</span>department_name<span class="token keyword">FROM</span> employees e <span class="token keyword">JOIN</span> departments d<span class="token keyword">ON</span> e<span class="token punctuation">.</span>department_id<span class="token operator">=</span>d<span class="token punctuation">.</span>department_id<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>左上图</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> employee_id<span class="token punctuation">,</span>department_name<span class="token keyword">FROM</span> employees e <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> departments d<span class="token keyword">ON</span> e<span class="token punctuation">.</span>department_id<span class="token operator">=</span>d<span class="token punctuation">.</span>department_id<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>右上图</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> employee_id<span class="token punctuation">,</span>department_name<span class="token keyword">FROM</span> employees e <span class="token keyword">RIGHT</span> <span class="token keyword">JOIN</span> departments d<span class="token keyword">ON</span> e<span class="token punctuation">.</span>department_id<span class="token operator">=</span>d<span class="token punctuation">.</span>department_id<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>左中图</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> employee_id<span class="token punctuation">,</span>department_name<span class="token keyword">FROM</span> employees e <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> departments d<span class="token keyword">ON</span> e<span class="token punctuation">.</span>department_id<span class="token operator">=</span>d<span class="token punctuation">.</span>department_id<span class="token keyword">WHERE</span> d<span class="token punctuation">.</span>department_id <span class="token operator">IS</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>右中图</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> employee_id<span class="token punctuation">,</span>department_name<span class="token keyword">FROM</span> employees e <span class="token keyword">RIGHT</span>  <span class="token keyword">JOIN</span> departments d<span class="token keyword">ON</span> e<span class="token punctuation">.</span>department_id<span class="token operator">=</span>d<span class="token punctuation">.</span>department_id<span class="token keyword">WHERE</span> e<span class="token punctuation">.</span>department_id <span class="token operator">IS</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>左下图</p><p>方式一</p><p>左上图 UNION ALL 右中图</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> employee_id<span class="token punctuation">,</span>department_name<span class="token keyword">FROM</span> employees e <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> departments d<span class="token keyword">ON</span> e<span class="token punctuation">.</span>department_id<span class="token operator">=</span>d<span class="token punctuation">.</span>department_id<span class="token keyword">UNION</span> <span class="token keyword">ALL</span><span class="token keyword">SELECT</span> employee_id<span class="token punctuation">,</span>department_name<span class="token keyword">FROM</span> employees e <span class="token keyword">RIGHT</span>  <span class="token keyword">JOIN</span> departments d<span class="token keyword">ON</span> e<span class="token punctuation">.</span>department_id<span class="token operator">=</span>d<span class="token punctuation">.</span>department_id<span class="token keyword">WHERE</span> e<span class="token punctuation">.</span>department_id <span class="token operator">IS</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方式二</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> employee_id<span class="token punctuation">,</span>department_name<span class="token punctuation">,</span>departments<span class="token punctuation">.</span>department_id<span class="token keyword">FROM</span> employees <span class="token keyword">FULL</span> <span class="token keyword">JOIN</span> departments <span class="token keyword">ON</span>  employees<span class="token punctuation">.</span>department_id <span class="token operator">=</span> departments<span class="token punctuation">.</span>department_id<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="3-6-SQL99新特性"><a href="#3-6-SQL99新特性" class="headerlink" title="3.6  SQL99新特性"></a>3.6  SQL99新特性</h4><p>SQL99 自然连接</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> employee_id<span class="token punctuation">,</span>department_name<span class="token punctuation">,</span>departments<span class="token punctuation">.</span>department_id<span class="token keyword">FROM</span> employees <span class="token keyword">NATURAL</span> <span class="token keyword">JOIN</span> departments<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>自动连接所有相同的字段</p><p> SQL99 USING</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> employee_id<span class="token punctuation">,</span>department_name<span class="token punctuation">,</span>departments<span class="token punctuation">.</span>department_id<span class="token keyword">FROM</span> employees <span class="token keyword">JOIN</span> departments <span class="token keyword">USING</span> <span class="token punctuation">(</span>department_id<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>状态的不同的个数</p><p>COUNT(字段==状态 OR NULL)；</p><h2 id="第五章-聚合函数"><a href="#第五章-聚合函数" class="headerlink" title="第五章 聚合函数"></a>第五章 聚合函数</h2><h3 id="1-聚合函数介绍"><a href="#1-聚合函数介绍" class="headerlink" title="1. 聚合函数介绍"></a>1. 聚合函数介绍</h3><p><strong>什么是聚合函数</strong></p><p>聚合函数作用于一组数据，并对一组数据返回一个值。</p><p><strong>AVG()</strong> </p><p><strong>SUM()</strong> </p><p><strong>MAX()</strong> </p><p><strong>MIN()</strong> </p><p><strong>COUNT()</strong></p><h4 id="1-1AVG-SUM"><a href="#1-1AVG-SUM" class="headerlink" title="1.1AVG/SUM"></a>1.1AVG/SUM</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token function">AVG</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">SUM</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">107</span><span class="token keyword">From</span> employees<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>字符串求和是0；</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token function">SUM</span><span class="token punctuation">(</span><span class="token keyword">CASE</span> STATE <span class="token keyword">WHEN</span> <span class="token string">'0'</span> <span class="token keyword">THEN</span> <span class="token number">1</span> <span class="token keyword">ELSE</span> <span class="token number">0</span> <span class="token keyword">END</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="1-2MAX-MIN"><a href="#1-2MAX-MIN" class="headerlink" title="1.2MAX/MIN"></a>1.2MAX/MIN</h4><p>适用于：数值，字符串，日期。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token function">MAX</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">MIN</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token keyword">FROM</span> employees<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="1-3COUNT"><a href="#1-3COUNT" class="headerlink" title="1.3COUNT"></a>1.3COUNT</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token function">COUNT</span><span class="token punctuation">(</span>字段<span class="token operator">=</span><span class="token operator">=</span>状态 <span class="token operator">OR</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span>；<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">COUNT(1);COUNT(*);#方式1：COUNT(1);#方式2：COUNT(*);#方式3;COUNT(字段);COUNT(1);=COUNT(*);&gt;COUNT(字段);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>控制过滤</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token function">SUM</span><span class="token punctuation">(</span>commission_pct<span class="token punctuation">)</span> <span class="token operator">/</span><span class="token function">COUNT</span> <span class="token punctuation">(</span>IFNULL<span class="token punctuation">(</span>commission_pct<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>终极写法AVG(IFNULL)</strong></p><h3 id="2-GROUP-BY"><a href="#2-GROUP-BY" class="headerlink" title="2.GROUP BY"></a>2.GROUP BY</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">GROUP</span> <span class="token keyword">BY</span> ID<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>没有id的自己成一组；</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> department_id<span class="token punctuation">,</span><span class="token function">AVG</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token keyword">FROM</span> employees <span class="token keyword">WHERE</span> department_id <span class="token operator">&gt;</span> <span class="token number">80</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> department_id <span class="token keyword">WITH ROLLUP</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/posts/4d712855/image-20220915111827312.png" class="" title="image-20220915111827312"><h3 id="3-HAVING"><a href="#3-HAVING" class="headerlink" title="3.HAVING"></a>3.HAVING</h3><p>\1. 行已经被分组。</p><p>\2. 使用了聚合函数。</p><p>\3. 满足HAVING 子句中条件的分组将被显示。</p><p>\4. HAVING 不能单独使用，必须要跟 GROUP BY 一起使用。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> department_id<span class="token punctuation">,</span> <span class="token function">MAX</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token keyword">FROM</span> employees <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> department_id <span class="token keyword">HAVING</span> <span class="token function">MAX</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">10000</span> <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> department_id<span class="token punctuation">,</span> <span class="token function">MAX</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token keyword">FROM</span> employees <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> department_id <span class="token keyword">HAVING</span> <span class="token function">MAX</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">10000</span> <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>区别**</strong>1**<strong>：**</strong>WHERE** <strong>可以直接使用表中的字段作为筛选条件，但不能使用分组中的计算函数作为筛选条件；</strong></p><p><strong>HAVING</strong> <strong>必须要与</strong> <strong>GROUP BY</strong> <strong>配合使用，可以把分组计算的函数和分组字段作为筛选条件。</strong></p><p>这决定了，在需要对数据进行分组统计的时候，HAVING 可以完成 WHERE 不能完成的任务。这是因为，</p><p>在查询语法结构中，WHERE 在 GROUP BY 之前，所以无法对分组结果进行筛选。HAVING 在 GROUP BY 之</p><p>后，可以使用分组字段和分组中的计算函数，对分组的结果集进行筛选，这个功能是 WHERE 无法完成</p><p>的。另外，WHERE排除的记录不再包括在分组中。</p><p><strong>区别**</strong>2**<strong>：如果需要通过连接从关联表中获取需要的数据，**</strong>WHERE** <strong>是先筛选后连接，而</strong> <strong>HAVING</strong> <strong>是先连接</strong></p><p><strong>后筛选。</strong> 这一点，就决定了在关联查询中，WHERE 比 HAVING 更高效。因为 WHERE 可以先筛选，用一</p><p>个筛选后的较小数据集和关联表进行连接，这样占用的资源比较少，执行效率也比较高。HAVING 则需要</p><p>先把结果集准备好，也就是用未被筛选的数据集进行关联，然后对这个大的数据集进行筛选，这样占用</p><p>的资源就比较多，执行效率也较低。</p><h3 id="4-SQL-底层原理"><a href="#4-SQL-底层原理" class="headerlink" title="4.SQL 底层原理"></a>4.SQL 底层原理</h3><p><strong>SELECT**</strong>的执行过程**</p><h4 id="4-1-查询的结构"><a href="#4-1-查询的结构" class="headerlink" title="4.1 查询的结构"></a><strong>4.1</strong> <strong>查询的结构</strong></h4><img src="/posts/4d712855/image-20220914212157538.png" class="" title="image-20220914212157538"><h4 id="4-2顺序"><a href="#4-2顺序" class="headerlink" title="4.2顺序"></a>4.2顺序</h4><p><strong>关键字的顺序是不能颠倒的：</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">FROM</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">WHERE</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">HAVING</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">LIMIT</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">FROM</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token keyword">WHERE</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token keyword">HAVING</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> 的字段 <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token keyword">DISTINCT</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token keyword">LIMIT</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> player_id<span class="token punctuation">,</span> player_name<span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">as</span> num <span class="token comment"># 顺序 5 </span><span class="token keyword">FROM</span> player <span class="token keyword">JOIN</span> team <span class="token keyword">ON</span> player<span class="token punctuation">.</span>team_id <span class="token operator">=</span> team<span class="token punctuation">.</span>team_id <span class="token comment"># 顺序 1 </span><span class="token keyword">WHERE</span> height <span class="token operator">&gt;</span> <span class="token number">1.80</span> <span class="token comment"># 顺序 2 </span><span class="token keyword">GROUP</span> <span class="token keyword">BY</span> player<span class="token punctuation">.</span>team_id <span class="token comment"># 顺序 3 </span><span class="token keyword">HAVING</span> num <span class="token operator">&gt;</span> <span class="token number">2</span> <span class="token comment"># 顺序 4 ORDER BY num DESC </span><span class="token comment"># 顺序 6 LIMIT 2 </span><span class="token comment"># 顺序 7</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-3执行原理"><a href="#4-3执行原理" class="headerlink" title="4.3执行原理"></a>4.3执行原理</h4><p>FROM </p><p>ON</p><p>GROUP</p><p>HAVING</p><p>SELECT</p><p>DISTINCT</p><p>ORDER BY</p><p>LIMIT</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="sql" scheme="https://macongmc.github.io/categories/sql/"/>
    
    
    <category term="sql" scheme="https://macongmc.github.io/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>java8</title>
    <link href="https://macongmc.github.io/posts/92a2fe0d.html"/>
    <id>https://macongmc.github.io/posts/92a2fe0d.html</id>
    <published>2022-09-04T02:51:55.000Z</published>
    <updated>2022-09-04T02:51:55.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一-Lambda表达式"><a href="#一-Lambda表达式" class="headerlink" title="一.Lambda表达式"></a>一.Lambda表达式</h2><h3 id="1-定义"><a href="#1-定义" class="headerlink" title="1.定义"></a>1.定义</h3><p>lambda表达式：简化匿名内部类调用</p><h3 id="2-Lambda表达式规范"><a href="#2-Lambda表达式规范" class="headerlink" title="2.Lambda表达式规范"></a>2.Lambda表达式规范</h3><p>1.在接口中只能允许有一个抽象方法。</p><p>2.在函数接口中定义object类中方法。</p><p>3.使用默认或者静态方法。</p><p>4.@FunctionalInterface表示函数接口。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>it<span class="token punctuation">.</span>javanew<span class="token punctuation">.</span>service</span><span class="token punctuation">;</span><span class="token comment">/** * 只能定义一个接口 */</span><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MyFunctionalInterface</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"add"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">del</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"del"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * object类的方法可以在函数接口中重写     * @return     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-Lambda基本语法"><a href="#3-Lambda基本语法" class="headerlink" title="3.Lambda基本语法"></a>3.Lambda基本语法</h3><img src="/posts/92a2fe0d/image-20220904112735313.png" class="" title="image-20220904112735313"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**         * lambda简化         * 无参调用         */</span>        <span class="token keyword">new</span> <span class="token class-name">AcanthopanaxInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"get"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">AcanthopanaxInterface</span> acanthopanaxInterface<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        acanthopanaxInterface<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有参调用</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**        * 有参调用        */</span>       <span class="token class-name">YouShenInterface</span> youShenInterface <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">YouShenInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token annotation punctuation">@Override</span>           <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token keyword">return</span> i<span class="token operator">+</span><span class="token string">"--"</span><span class="token operator">+</span>j<span class="token punctuation">;</span>           <span class="token punctuation">}</span>       <span class="token punctuation">}</span><span class="token punctuation">;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>youShenInterface<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">YouShenInterface</span> youShenInterface1<span class="token operator">=</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span>           <span class="token keyword">return</span> i<span class="token operator">+</span><span class="token string">"--"</span><span class="token operator">+</span>j<span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token punctuation">;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>youShenInterface1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-精简模式"><a href="#4-精简模式" class="headerlink" title="4.精简模式"></a>4.精简模式</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 精简模式 * ((接口类型)(参数列表)-&gt;{ *方法体 *         }).方法 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 精简模式 * ((接口类型)(参数列表)-&gt;{ *方法体 *         }).方法 */</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">AcanthopanaxInterface</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** * 只有一条语句不需要{} */</span><span class="token class-name">AcanthopanaxInterface</span> acanthopanaxInterface1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"简化"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">AcanthopanaxInterface</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"简化"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">YouShenInterface</span> youShenInterface2 <span class="token operator">=</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token operator">-&gt;</span>j<span class="token operator">+</span><span class="token string">"--"</span><span class="token operator">+</span>i<span class="token punctuation">;</span><span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">YouShenInterface</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> i <span class="token operator">+</span> <span class="token string">"--"</span> <span class="token operator">+</span> j<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-集合使用"><a href="#5-集合使用" class="headerlink" title="5.集合使用"></a>5.集合使用</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**        * 集合使用        */</span>       <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>s<span class="token operator">-&gt;</span><span class="token punctuation">{</span>           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**         * 集合使用         */</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>s<span class="token operator">-&gt;</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/**         * 集合排序         */</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> userList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userList<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token annotation punctuation">@Override</span>           <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">User</span> o1<span class="token punctuation">,</span> <span class="token class-name">User</span> o2<span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token keyword">return</span> o1<span class="token punctuation">.</span><span class="token function">getYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>o2<span class="token punctuation">.</span><span class="token function">getYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userList<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>o1<span class="token punctuation">,</span> o2<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> o1<span class="token punctuation">.</span><span class="token function">getYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>o2<span class="token punctuation">.</span><span class="token function">getYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">/** * 多线程 */new Thread(new Runnable() {    @Override    public void run() {        System.out.println("线程开始");    }}).start();new Thread(()-&gt; System.out.println("线程开始")).start();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二-stream流"><a href="#二-stream流" class="headerlink" title="二.stream流"></a>二.stream流</h2><p>stream:非常方便精简的形式遍历集合实现过滤查询排序；</p><h3 id="1-创建流的方式"><a href="#1-创建流的方式" class="headerlink" title="1.创建流的方式"></a>1.创建流的方式</h3><p>1.串行流l ist.stream();<br>2.并行流 list.parallelStream();</p><h3 id="2-操作"><a href="#2-操作" class="headerlink" title="2.操作"></a>2.操作</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//转换set集合  重复数据删除</span>      <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> collect <span class="token operator">=</span> stream<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      collect<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>s <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      list<span class="token punctuation">.</span><span class="token function">parallelStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">/**       * 转化为map       */</span>      <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> users <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      users<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"java"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      users<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      users<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"c++"</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      users<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">,</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getYear</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"c++"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/**         * 串行         */</span>        <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> stream <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//转换set集合  重复数据删除</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> collect <span class="token operator">=</span> stream<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        collect<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>s <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">parallelStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/**         * 转化为map         */</span>        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> users <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        users<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"java"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        users<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        users<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"c++"</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        users<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">,</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getYear</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/**         * 求和         */</span>        <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> integerStream <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        integerStream<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BinaryOperator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> integer<span class="token punctuation">,</span> <span class="token class-name">Integer</span> integer2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> integer<span class="token operator">+</span>integer2<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        integerStream<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>integer<span class="token punctuation">,</span> integer2<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> integer<span class="token operator">+</span>integer2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/**         * match         */</span>        <span class="token keyword">boolean</span> b <span class="token operator">=</span> users<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">allMatch</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token string">"java"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        users<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">allMatch</span><span class="token punctuation">(</span>user <span class="token operator">-&gt;</span> <span class="token string">"java"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/**         * 过滤器         */</span>        users<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token string">"java"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        users<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>user <span class="token operator">-&gt;</span> <span class="token string">"java"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/**         * 分页         */</span>        users<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>user <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/**         * 排序         */</span>        users<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">(</span>u1<span class="token punctuation">,</span>u2<span class="token punctuation">)</span><span class="token operator">-&gt;</span> u2<span class="token punctuation">.</span><span class="token function">getYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>u1<span class="token punctuation">.</span><span class="token function">getYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三-方法引入"><a href="#三-方法引入" class="headerlink" title="三.方法引入"></a>三.方法引入</h2><img src="/posts/92a2fe0d/image-20220904124544193.png" class="" title="image-20220904124544193"><img src="/posts/92a2fe0d/image-20220904125134097.png" class="" title="image-20220904125134097"><h2 id="4-gitee"><a href="#4-gitee" class="headerlink" title="4.gitee"></a>4.gitee</h2><p><a href="https://gitee.com/macongxuexi/javanew.git">https://gitee.com/macongxuexi/javanew.git</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="流" scheme="https://macongmc.github.io/categories/%E6%B5%81/"/>
    
    
    <category term="java" scheme="https://macongmc.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Git</title>
    <link href="https://macongmc.github.io/posts/69c3279c.html"/>
    <id>https://macongmc.github.io/posts/69c3279c.html</id>
    <published>2022-09-01T01:47:44.000Z</published>
    <updated>2022-09-01T01:47:44.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一-上传代码步骤"><a href="#一-上传代码步骤" class="headerlink" title="一.上传代码步骤"></a>一.上传代码步骤</h2><h3 id="1-代码编写完毕-添加到暂存区"><a href="#1-代码编写完毕-添加到暂存区" class="headerlink" title="1.代码编写完毕  添加到暂存区"></a>1.代码编写完毕  添加到暂存区</h3><pre class="line-numbers language-none"><code class="language-none">git add xx;git stash;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><img src="/posts/69c3279c/image-20220901095201594.png" class="" title="image-20220901095201594"><img src="/posts/69c3279c/image-20220901095211968.png" class="" title="image-20220901095211968"><h3 id="2-把线上最新代码合并到自己的代码"><a href="#2-把线上最新代码合并到自己的代码" class="headerlink" title="2.把线上最新代码合并到自己的代码"></a>2.把线上最新代码合并到自己的代码</h3><img src="/posts/69c3279c/image-20220901095304092.png" class="" title="image-20220901095304092"><h3 id="3-释放暂存区"><a href="#3-释放暂存区" class="headerlink" title="3.释放暂存区"></a>3.释放暂存区</h3><img src="/posts/69c3279c/image-20220901095429858.png" class="" title="image-20220901095429858"><p>如果和线上有代码冲突，在此处解决冲突。</p><pre class="line-numbers language-none"><code class="language-none">git pop<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-提交代码"><a href="#4-提交代码" class="headerlink" title="4.提交代码"></a>4.提交代码</h3><img src="/posts/69c3279c/image-20220901095510689.png" class="" title="image-20220901095510689"><h3 id="5-提交到远程自己的分支"><a href="#5-提交到远程自己的分支" class="headerlink" title="5.提交到远程自己的分支"></a>5.提交到远程自己的分支</h3><img src="/posts/69c3279c/image-20220901095539194.png" class="" title="image-20220901095539194"><h2 id="二-合并提交记录"><a href="#二-合并提交记录" class="headerlink" title="二.合并提交记录"></a>二.合并提交记录</h2><p>当上次提交的代码出错或有两次提交，进行合并。</p><p>合并步骤，</p><p>重复上述步骤到释放commit.</p><h3 id="1-进行合拼"><a href="#1-进行合拼" class="headerlink" title="1.进行合拼"></a>1.进行合拼</h3><img src="/posts/69c3279c/image-20220901100550180.png" class="" title="image-20220901100550180"><img src="/posts/69c3279c/image-20220901100520615.png" class="" title="image-20220901100520615"><h3 id="2-push"><a href="#2-push" class="headerlink" title="2.push"></a>2.push</h3><img src="/posts/69c3279c/image-20220901100605078.png" class="" title="image-20220901100605078"><h2 id="三-IDEA-git和GitLab失去联系"><a href="#三-IDEA-git和GitLab失去联系" class="headerlink" title="三.IDEA git和GitLab失去联系"></a>三.IDEA git和GitLab失去联系</h2><h3 id="1-问题错误信息"><a href="#1-问题错误信息" class="headerlink" title="1.问题错误信息"></a>1.问题错误信息</h3><img src="/posts/69c3279c/image-20220927091347102.png" class="" title="image-20220927091347102"><h3 id="2-问题解决方式"><a href="#2-问题解决方式" class="headerlink" title="2.问题解决方式"></a>2.问题解决方式</h3><p>修改远程Remote</p><img src="/posts/69c3279c/image-20220927091426839.png" class="" title="image-20220927091426839"><p>修改前</p><p>git remote add origin <code>http://localhost/study/study_project.git</code></p><p>修改后</p><p>git remote add origin <code>http://username:password@localhost/study/study_project.git</code></p><h2 id="四-命令总结"><a href="#四-命令总结" class="headerlink" title="四.命令总结"></a>四.命令总结</h2><p>切换远程分支</p><pre class="line-numbers language-none"><code class="language-none">git checkout -b 本地分支名 origin/远程分支名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加到暂存区</p><pre class="line-numbers language-none"><code class="language-none">git add xx;git stash;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>更新本地代码</p><pre class="line-numbers language-none"><code class="language-none">git pull origin xx;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">git fetch origin master;git merge origin/master mc-dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>释放暂存区</p><pre class="line-numbers language-none"><code class="language-none">git stash pop;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解决冲突后</p><p>回退版本</p><pre class="line-numbers language-none"><code class="language-none">git reset --hard<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>commit撤销</p><pre class="line-numbers language-none"><code class="language-none">git revert  commitId<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>提交代码</p><pre class="line-numbers language-none"><code class="language-none">git commit -am 'xxx'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>获取另外分支的commit</p><pre class="line-numbers language-none"><code class="language-none">git cherry-pick<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>合并成一条commit</p><pre class="line-numbers language-none"><code class="language-none">git log git rebase -i xxx改成s  保存编辑  注释<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>刷新到远程分支</p><pre class="line-numbers language-none"><code class="language-none">git push origin xxx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>审视错误代码   重新合并</p><pre class="line-numbers language-none"><code class="language-none">git push -f origin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>增量代码包</p><pre class="line-numbers language-none"><code class="language-none">git diff commitID HEAD --name-only | xargs tar -rf name.tar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Git" scheme="https://macongmc.github.io/categories/Git/"/>
    
    
    <category term="git" scheme="https://macongmc.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ 高级特性</title>
    <link href="https://macongmc.github.io/posts/cce8d692.html"/>
    <id>https://macongmc.github.io/posts/cce8d692.html</id>
    <published>2022-08-26T06:03:31.000Z</published>
    <updated>2022-08-26T06:03:31.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一-RabbitMQ高级-学习目标"><a href="#一-RabbitMQ高级-学习目标" class="headerlink" title="一.RabbitMQ高级 学习目标"></a>一.RabbitMQ高级 学习目标</h2><ul><li>掌握RabbitMQ 高级特性</li><li>理解RabbitMQ 应用问题</li><li>能够搭建RabbitMQ 集群</li></ul><img src="/posts/cce8d692/image-20200320230112442.9919b2e6-16615912546561.png" class="" title="image-20200320230112442"><h2 id="二-RabbitMQ-高级特性"><a href="#二-RabbitMQ-高级特性" class="headerlink" title="二. RabbitMQ 高级特性"></a>二. RabbitMQ 高级特性</h2><img src="/posts/cce8d692/image-20200616093631383.0e0db4ef-16615912878363.png" class="" title="image-20200616093631383"><h3 id="1-消息可靠性投递"><a href="#1-消息可靠性投递" class="headerlink" title="1.消息可靠性投递"></a>1.消息可靠性投递</h3><p>在使用 RabbitMQ 的时候，作为消息发送方希望杜绝任何消息丢失或者投递失败场景。RabbitMQ 为我们提供了两种方式用来控制消息的投递可靠性模式。</p><ul><li>confirm <strong>确认模式</strong></li><li>return <strong>退回模式</strong></li></ul><p>rabbitmq 整个消息投递的路径为：</p><p> <strong>producer —&gt; rabbitmq broker —&gt; exchange —&gt; queue —&gt; consumer</strong></p><ul><li>消息从 producer 到 exchange 则会返回一个 confirmCallback 。</li><li>消息从 exchange 到 queue 投递失败则会返回一个 returnCallback 。</li></ul><p>我们将利用这两个 callback 控制消息的可靠性投递</p><h4 id="（1）confirm确认模式代码实现"><a href="#（1）confirm确认模式代码实现" class="headerlink" title="（1）confirm确认模式代码实现"></a>（1）confirm确认模式代码实现</h4><p>1.添加依赖</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>           <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>           <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>amqp<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>       <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>2.配置文件</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">spring<span class="token operator">:</span>  rabbitmq<span class="token operator">:</span>    host<span class="token operator">:</span> localhost    port<span class="token operator">:</span> <span class="token number">5672</span>    virtual<span class="token operator">-</span>host<span class="token operator">:</span> <span class="token operator">/</span>    username<span class="token operator">:</span> guest    password<span class="token operator">:</span> guest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.配置交换机和队列</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>it<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Qualifier</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitConfig</span> <span class="token punctuation">{</span>    <span class="token comment">//发布订阅模式</span>    <span class="token comment">//交换机名称</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> FANOUT_EXCHAGE <span class="token operator">=</span> <span class="token string">"boot_fanout_exchange"</span><span class="token punctuation">;</span>    <span class="token comment">//队列名称</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> FANOUT_QUEUE_1 <span class="token operator">=</span> <span class="token string">"boot_fanout_queue_1"</span><span class="token punctuation">;</span>    <span class="token comment">//队列名称</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> FANOUT_QUEUE_2 <span class="token operator">=</span> <span class="token string">"boot_fanout_queue_2"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>FANOUT_QUEUE_1<span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">FANOUT_QUEUE_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span>FANOUT_QUEUE_1<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>FANOUT_QUEUE_2<span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">FANOUT_QUEUE_2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span>FANOUT_QUEUE_2<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>FANOUT_EXCHAGE<span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Exchange</span> <span class="token function">FANOUT_EXCHAGE</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">ExchangeBuilder</span><span class="token punctuation">.</span><span class="token function">fanoutExchange</span><span class="token punctuation">(</span>FANOUT_EXCHAGE<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">durable</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">Binding</span> <span class="token function">FANOUT_QUEUE_1_FANOUT_EXCHAGE</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span>FANOUT_QUEUE_1<span class="token punctuation">)</span> <span class="token class-name">Queue</span> queue<span class="token punctuation">,</span>                                                 <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span>FANOUT_EXCHAGE<span class="token punctuation">)</span> <span class="token class-name">Exchange</span> exchange<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">BindingBuilder</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">noargs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">Binding</span> <span class="token function">FANOUT_QUEUE_2_FANOUT_EXCHAGE</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span>FANOUT_QUEUE_2<span class="token punctuation">)</span> <span class="token class-name">Queue</span> queue<span class="token punctuation">,</span>                                                 <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span>FANOUT_EXCHAGE<span class="token punctuation">)</span> <span class="token class-name">Exchange</span> exchange<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">BindingBuilder</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">noargs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编写发送方</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">confirm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        rabbitTemplate<span class="token punctuation">.</span><span class="token function">setConfirmCallback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RabbitTemplate</span><span class="token punctuation">.</span><span class="token class-name">ConfirmCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">/**             *             * @param correlationData 相关配置信息             * @param ack   exchange交换机 是否成功收到了消息。true 成功，false代表失败             * @param cause 失败原因             */</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">confirm</span><span class="token punctuation">(</span><span class="token class-name">CorrelationData</span> correlationData<span class="token punctuation">,</span> <span class="token keyword">boolean</span> ack<span class="token punctuation">,</span> <span class="token class-name">String</span> cause<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"confirm方法被执行了...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>ack<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment">//接收成功</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"接收成功消息"</span> <span class="token operator">+</span> cause<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token comment">//接收失败</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"接收失败消息"</span> <span class="token operator">+</span> cause<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">//做一些处理，让消息再次发送。</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> hello <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>        rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token class-name">RabbitConfig</span><span class="token punctuation">.</span>FANOUT_EXCHAGE<span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span>hello<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>改配置文件</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">spring<span class="token operator">:</span>  rabbitmq<span class="token operator">:</span>    host<span class="token operator">:</span> localhost    port<span class="token operator">:</span> <span class="token number">5672</span>    virtual<span class="token operator">-</span>host<span class="token operator">:</span> <span class="token operator">/</span>    username<span class="token operator">:</span> guest    password<span class="token operator">:</span> guest    publisher<span class="token operator">-</span>confirm<span class="token operator">-</span>type<span class="token operator">:</span> correlated   #开启确认模式<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/posts/cce8d692/image-20220827172222180.png" class="" title="image-20220827172222180"><img src="/posts/cce8d692/image-20220827172442421.png" class="" title="image-20220827172442421"><h4 id="（2）-return退回模式代码实现"><a href="#（2）-return退回模式代码实现" class="headerlink" title="（2） return退回模式代码实现"></a>（2） return退回模式代码实现</h4><p>回退模式： 当消息发送给Exchange后，Exchange路由到Queue失败是 才会执行 ReturnCallBack，具体实现如下：</p><p>修改配置文件</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">spring<span class="token operator">:</span>  rabbitmq<span class="token operator">:</span>    host<span class="token operator">:</span> localhost    port<span class="token operator">:</span> <span class="token number">5672</span>    virtual<span class="token operator">-</span>host<span class="token operator">:</span> <span class="token operator">/</span>    username<span class="token operator">:</span> guest    password<span class="token operator">:</span> guest    #   publisher<span class="token operator">-</span>confirm<span class="token operator">-</span>type<span class="token operator">:</span> correlated   #开启确认模式    publisher<span class="token operator">-</span>returns<span class="token operator">:</span> <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编写生产者</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//设置交换机处理失败消息的模式</span>rabbitTemplate<span class="token punctuation">.</span><span class="token function">setMandatory</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">returns</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//设置交换机处理失败消息的模式</span>        rabbitTemplate<span class="token punctuation">.</span><span class="token function">setMandatory</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        rabbitTemplate<span class="token punctuation">.</span><span class="token function">setReturnsCallback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RabbitTemplate</span><span class="token punctuation">.</span><span class="token class-name">ReturnsCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">/**             *             * @param message   消息对象             * @param replyCode 错误码             * @param replyText 错误信息             * @param exchange  交换机             * @param routingKey 路由键             */</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">returnedMessage</span><span class="token punctuation">(</span><span class="token class-name">ReturnedMessage</span> returnedMessage<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"returnedMessage.getMessage() = "</span> <span class="token operator">+</span> returnedMessage<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"returnedMessage.getExchange() = "</span> <span class="token operator">+</span> returnedMessage<span class="token punctuation">.</span><span class="token function">getExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"returnedMessage.getReplyText() = "</span> <span class="token operator">+</span> returnedMessage<span class="token punctuation">.</span><span class="token function">getReplyText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"returnedMessage.getRoutingKey() = "</span> <span class="token operator">+</span> returnedMessage<span class="token punctuation">.</span><span class="token function">getRoutingKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"returnedMessage.getReplyCode() = "</span> <span class="token operator">+</span> returnedMessage<span class="token punctuation">.</span><span class="token function">getReplyCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> hello <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>        <span class="token comment">//成功发送案例</span>        rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token class-name">RabbitConfig</span><span class="token punctuation">.</span>FANOUT_EXCHAGE<span class="token punctuation">,</span><span class="token string">"hello"</span><span class="token punctuation">,</span>hello<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>成功无返回</p><img src="/posts/cce8d692/image-20220827190000016.png" class="" title="image-20220827190000016"><p>对于确认模式：</p><ul><li>设置ConnectionFactory的publisher-confirms=”true” 开启 确认模式。</li><li>使用rabbitTemplate.setConfirmCallback设置回调函数。当消息发送到exchange后回调confirm方法。在方法中判断ack，如果为true，则发送成功，如果为false，则发送失败，需要处理。</li></ul><p>对于退回模式</p><ul><li>设置ConnectionFactory的publisher-returns=”true” 开启 退回模式。</li><li>使用rabbitTemplate.setReturnCallback设置退回函数，当消息从exchange路由到queue失败后，如果设置了rabbitTemplate.setMandatory(true)参数，则会将消息退回给producer。并执行回调函数returnedMessage。</li></ul><blockquote><p>在RabbitMQ中也提供了事务机制，但是性能较差，此处不做讲解。</p><p>使用channel列方法，完成事务控制：</p><p>txSelect(), 用于将当前channel设置成transaction模式</p><p>txCommit()，用于提交事务</p><p>txRollback(),用于回滚事务</p></blockquote><h3 id="2-Consumer-ACK"><a href="#2-Consumer-ACK" class="headerlink" title="2.Consumer ACK"></a>2.Consumer ACK</h3><p>ack指 <strong>Acknowledge</strong>，确认。 表示消费端收到消息后的确认方式。</p><p>有三种确认方式：</p><p>• 自动确认：acknowledge=”<strong>none</strong>“</p><p>• 手动确认：acknowledge=”<strong>manual</strong>“</p><p>• 根据异常情况确认：acknowledge=”<strong>auto</strong>“，（这种方式使用麻烦，不作讲解）</p><p>其中自动确认是指，当消息一旦被Consumer接收到，则自动确认收到，并将相应 message 从 RabbitMQ 的消息缓存中移除。但是在实际业务处理中，很可能消息接收到，业务处理出现异常，那么该消息就会丢失。</p><p>如果设置了手动确认方式，则需要在业务处理成功后，调用channel.basicAck()，手动签收，如果出现异常，则调用channel.basicNack()方法，让其自动重新发送消息。</p><p>改配置文件</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">spring<span class="token operator">:</span>  rabbitmq<span class="token operator">:</span>    host<span class="token operator">:</span> localhost    port<span class="token operator">:</span> <span class="token number">5672</span>    virtual<span class="token operator">-</span>host<span class="token operator">:</span> <span class="token operator">/</span>    username<span class="token operator">:</span> guest    password<span class="token operator">:</span> guest    publisher<span class="token operator">-</span>returns<span class="token operator">:</span> <span class="token boolean">true</span>    listener<span class="token operator">:</span>      direct<span class="token operator">:</span>        acknowledge<span class="token operator">-</span>mode<span class="token operator">:</span> manual<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编写监听器</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token class-name">RabbitConfig</span><span class="token punctuation">.</span>FANOUT_QUEUE_2<span class="token punctuation">)</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receiveMsg</span><span class="token punctuation">(</span><span class="token class-name">Message</span> orderMsg<span class="token punctuation">,</span> <span class="token class-name">Channel</span> channel<span class="token punctuation">,</span><span class="token annotation punctuation">@Header</span><span class="token punctuation">(</span><span class="token class-name">AmqpHeaders</span><span class="token punctuation">.</span>DELIVERY_TAG<span class="token punctuation">)</span> <span class="token keyword">long</span> tag<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>       <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body <span class="token operator">=</span> orderMsg<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ok"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           channel<span class="token punctuation">.</span><span class="token function">basicAck</span><span class="token punctuation">(</span>tag<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>           channel<span class="token punctuation">.</span><span class="token function">basicNack</span><span class="token punctuation">(</span>tag<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/posts/cce8d692/image-20220827192256540.png" class="" title="image-20220827192256540"><img src="/posts/cce8d692/image-20220827192335128.png" class="" title="image-20220827192335128"><p>消息的接收者也可使用普通类实现<code>ChannelAwareMessageListener</code>接口，重写方法完成，这种是直接全局性接收的。没有最好的，只有最合适的，根据项目情况选择全局接收还是单个类接收自己监听的。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token comment">/** * 接收者 * **/</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Consumer</span> <span class="token keyword">implements</span> <span class="token class-name">ChannelAwareMessageListener</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onMessage</span><span class="token punctuation">(</span><span class="token class-name">Message</span> message<span class="token punctuation">,</span> <span class="token class-name">Channel</span> channel<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span>    <span class="token punctuation">{</span>        <span class="token keyword">long</span> deliveryTag <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">getMessageProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeliveryTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"queue_name"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getMessageProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getConsumerQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费的消息来自的队列名为："</span><span class="token operator">+</span>message<span class="token punctuation">.</span><span class="token function">getMessageProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getConsumerQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"接收消息: "</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行queue_name中的消息的业务处理流程......"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"fanout.A"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getMessageProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getConsumerQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费的消息来自的队列名为："</span> <span class="token operator">+</span> message<span class="token punctuation">.</span><span class="token function">getMessageProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getConsumerQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"接收消息: "</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行fanout.A中的消息的业务处理流程......"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token comment">// 手动提交ack，并且批量确认消息</span>            channel<span class="token punctuation">.</span><span class="token function">basicAck</span><span class="token punctuation">(</span>deliveryTag<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">/**             * 拒绝消息，参数说明：             * long deliveryTag：唯一标识 ID。             * boolean requeue：如果 requeue 参数设置为 true，             * 则 RabbitMQ 会重新将这条消息存入队列，以便发送给下一个订阅的消费者；             * 如果 requeue 参数设置为 false，则 RabbitMQ 立即会还把消息从队列中移除，             * 而不会把它发送给新的消费者。             */</span>            channel<span class="token punctuation">.</span><span class="token function">basicReject</span><span class="token punctuation">(</span>deliveryTag<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-消费端限流"><a href="#3-消费端限流" class="headerlink" title="3.消费端限流"></a>3.消费端限流</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">rabbitmq<span class="token operator">:</span>    #服务器    host<span class="token operator">:</span> <span class="token number">192.168</span><span class="token number">.174</span><span class="token number">.182</span>    #用户名    username<span class="token operator">:</span> guest#密码    password<span class="token operator">:</span> guest    #虚拟机    virtual<span class="token operator">-</span>host<span class="token operator">:</span> <span class="token operator">/</span>    #端口    port<span class="token operator">:</span> <span class="token number">5672</span>    #监听    listener<span class="token operator">:</span>      simle<span class="token operator">:</span>        #消费者最下数量        concurrency<span class="token operator">:</span> <span class="token number">10</span>        #消费者最大数量        max<span class="token operator">-</span>concurrency<span class="token operator">:</span> <span class="token number">10</span>        #限制消费者每次只处理一条信息，处理完在继续下一条        prefetch<span class="token operator">:</span> <span class="token number">1</span>        #启动时是否默认启动容器        auto<span class="token operator">-</span>startup<span class="token operator">:</span> ture        #被拒绝时重新进入队列        <span class="token keyword">default</span><span class="token operator">-</span>requeue<span class="token operator">-</span>rejected<span class="token operator">:</span> ture        #模板    template<span class="token operator">:</span>      retry<span class="token operator">:</span>        #发布重试，默认<span class="token boolean">false</span>        enabled<span class="token operator">:</span> <span class="token boolean">true</span>        #重试时间 默认<span class="token number">1000</span>ms        initial<span class="token operator">-</span>interval<span class="token operator">:</span> <span class="token number">1000</span>ms        #重试最大次数 最大<span class="token number">3</span>        max<span class="token operator">-</span>attempts<span class="token operator">:</span> <span class="token number">3</span>        #重试最大间隔时间        max<span class="token operator">-</span>interval<span class="token operator">:</span> <span class="token number">10000</span>ms        #重试的时间隔乘数，比如配<span class="token number">2</span>，<span class="token number">0</span> 第一次等于<span class="token number">10</span>s，第二次等于<span class="token number">20</span>s，第三次等于<span class="token number">40</span>s        multiplier<span class="token operator">:</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">配置文件中进行配置<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-TTL"><a href="#4-TTL" class="headerlink" title="4.TTL"></a>4.TTL</h3><p>设置队列参数、交换机参数、发消息都可以用页面。</p><p>也能用代码。</p><p>TTL 全称 Time To Live（存活时间/过期时间）。当消息到达存活时间后，还没有被消费，会被自动清除。</p><p>RabbitMQ可以对消息设置过期时间，也可以对整个队列（Queue）设置过期时间。</p><img src="/posts/cce8d692/1569166173852.55444692.png" class="" width="1569166173852"><p>设置队列的过期时间</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">Binding</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">BindingBuilder</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">DirectExchange</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">Queue</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span><span class="token punctuation">;</span> <span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DirectRabbitConfig</span> <span class="token punctuation">{</span>     <span class="token comment">//队列 起名：TestDirectQueue</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token class-name">TestDirectQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// durable:是否持久化,默认是false,持久化队列：会被存储在磁盘上，当消息代理重启时仍然存在，暂存队列：当前连接有效</span>        <span class="token comment">// exclusive:默认也是false，只能被当前创建的连接使用，而且当连接关闭后队列即被删除。此参考优先级高于durable</span>        <span class="token comment">// autoDelete:是否自动删除，当没有生产者或者消费者使用此队列，该队列会自动删除。</span>                <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 队列中的消息未被消费则10秒后过期</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"x-message-ttl"</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token string">"TestDirectQueue"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token comment">//Direct交换机 起名：TestDirectExchange</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token class-name">DirectExchange</span> <span class="token class-name">TestDirectExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DirectExchange</span><span class="token punctuation">(</span><span class="token string">"TestDirectExchange"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token comment">//绑定  将队列和交换机绑定, 并设置用于匹配键：TestDirectRouting</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token class-name">Binding</span> <span class="token function">bindingDirect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">BindingBuilder</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token class-name">TestDirectQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span><span class="token class-name">TestDirectExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token string">"TestDirectRouting"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>单独设置某条消息的方式</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">cn<span class="token punctuation">.</span>huawei<span class="token punctuation">.</span>rabbitmqtest1<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span></span><span class="token class-name">User</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span></span>JSON<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">Message</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">MessageProperties</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>connection<span class="token punctuation">.</span></span><span class="token class-name">CorrelationData</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">RabbitTemplate</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">GetMapping</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestController</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>charset<span class="token punctuation">.</span></span><span class="token class-name">StandardCharsets</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>UUID<span class="token punctuation">;</span> <span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SendMessageController</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@Autowired</span>    <span class="token class-name">RabbitTemplate</span> rabbitTemplate<span class="token punctuation">;</span>  <span class="token comment">//使用RabbitTemplate,这提供了接收/发送等等方法</span>     <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/sendDirectMessage"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendDirectMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token class-name">MessageProperties</span> messageProperties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MessageProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 设置过期时间，单位：毫秒</span>        messageProperties<span class="token punctuation">.</span><span class="token function">setExpiration</span><span class="token punctuation">(</span><span class="token string">"30000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">50</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//这个参数是用来做消息的唯一标识</span>            <span class="token comment">//发布消息时使用，存储在消息的headers中</span>            <span class="token class-name">CorrelationData</span> correlationData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CorrelationData</span><span class="token punctuation">(</span>UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"陈四 "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Message</span> message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">,</span> messageProperties<span class="token punctuation">)</span><span class="token punctuation">;</span>             rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"TestDirectExchange"</span><span class="token punctuation">,</span> <span class="token string">"TestDirectRouting"</span><span class="token punctuation">,</span> message<span class="token punctuation">,</span> correlationData<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注解方式</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//在队列设置超时时间</span> <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>bindings <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@QueueBinding</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token annotation punctuation">@Queue</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"liveQueue"</span><span class="token punctuation">,</span> arguments <span class="token operator">=</span>                    <span class="token punctuation">{</span><span class="token annotation punctuation">@Argument</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"x-dead-letter-exchange"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"deadExchange"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                            <span class="token annotation punctuation">@Argument</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"x-dead-letter-routing-key"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"deadKey"</span><span class="token punctuation">)</span>                            <span class="token punctuation">,</span> <span class="token annotation punctuation">@Argument</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"x-message-ttl"</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">"10000"</span><span class="token punctuation">,</span>type <span class="token operator">=</span> <span class="token string">"java.lang.Integer"</span><span class="token punctuation">)</span>                           <span class="token comment">// ,@Argument(name = "x-max-length",value = "5",type = "java.lang.Integer")队列最大长度</span>                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment">//可以指定多种属性</span>                    exchange <span class="token operator">=</span> <span class="token annotation punctuation">@Exchange</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"liveExchange"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    key <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"info"</span><span class="token punctuation">,</span> <span class="token string">"error"</span><span class="token punctuation">,</span> <span class="token string">"warning"</span><span class="token punctuation">}</span>            <span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@RabbitHandler</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onMessage</span><span class="token punctuation">(</span><span class="token class-name">Message</span> message<span class="token punctuation">,</span> <span class="token class-name">Channel</span> channel<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token keyword">long</span> consumerTag <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">getMessageProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeliveryTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"收到消息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            channel<span class="token punctuation">.</span><span class="token function">basicNack</span><span class="token punctuation">(</span>consumerTag<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//消息确认</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-死信队列"><a href="#5-死信队列" class="headerlink" title="5.死信队列"></a>5.死信队列</h3><p><strong>消息成为死信的三种情况：</strong></p><ol><li>队列消息长度到达限制；</li><li>消费者拒接消费消息，basicNack/basicReject,并且不把消息重新放入原目标队列,requeue=false；</li><li>原队列存在消息过期设置，消息到达超时时间未被消费；</li></ol><p><strong>队列绑定死信交换机：</strong></p><p>给队列设置参数： x-dead-letter-exchange 和 x-dead-letter-routing-key</p><p>在消息的生产方中，在 spring-rabbitmq-producer.xml 配置文件中，添加如下配置</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitMQConfig</span> <span class="token punctuation">{</span>    <span class="token comment">// 声明业务Exchange</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">TopicExchange</span> <span class="token function">businessExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TopicExchange</span><span class="token punctuation">(</span><span class="token string">"businessExchange"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 声明业务队列A</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">businessQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> args <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//       x-dead-letter-exchange    这里声明当前队列绑定的死信交换机</span>        args<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"x-dead-letter-exchange"</span><span class="token punctuation">,</span> <span class="token string">"deadLetterExchange"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//       x-dead-letter-routing-key  这里声明当前队列的死信路由key</span>        args<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"x-dead-letter-routing-key"</span><span class="token punctuation">,</span> <span class="token string">"dle.err"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token string">"businessQueue"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 声明业务队列A绑定关系</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">Binding</span> <span class="token function">businessBinding</span><span class="token punctuation">(</span><span class="token class-name">Queue</span> businessQueue<span class="token punctuation">,</span> <span class="token class-name">TopicExchange</span> businessExchange<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">BindingBuilder</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>businessQueue<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span>businessExchange<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token string">"emp.*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//声明死信Exchange</span>   <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">TopicExchange</span> <span class="token function">deadLetterExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TopicExchange</span><span class="token punctuation">(</span><span class="token string">"deadLetterExchange"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 声明死信队列A</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">deadLetterQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token string">"dle-queue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>   <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">Binding</span> <span class="token function">deadLetterQueueBinding</span><span class="token punctuation">(</span><span class="token class-name">Queue</span> deadLetterQueue<span class="token punctuation">,</span> <span class="token class-name">TopicExchange</span> deadLetterExchange<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">BindingBuilder</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>deadLetterQueue<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span>deadLetterExchange<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token string">"dle.*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DedaLetterListener</span> <span class="token punctuation">{</span>    <span class="token comment">// 监听业务队列</span>    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">"businessQueue"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">businessQueue</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">,</span> <span class="token class-name">Channel</span> channel<span class="token punctuation">,</span> <span class="token class-name">Message</span> message<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"业务消费者出现问题:"</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment">// 无法消费消息，nack</span>                channel<span class="token punctuation">.</span><span class="token function">basicNack</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getMessageProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeliveryTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"正常消费消息:"</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 正常消费了消息，手动ack</span>            channel<span class="token punctuation">.</span><span class="token function">basicAck</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getMessageProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeliveryTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">// 监听死信队列</span>    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">"dle-queue"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deadLetterQueue</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">,</span> <span class="token class-name">Channel</span> channel<span class="token punctuation">,</span> <span class="token class-name">Message</span> message<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"死信队列消费消息:"</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        channel<span class="token punctuation">.</span><span class="token function">basicAck</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getMessageProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeliveryTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参数说明</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// deliveryTag:该消息的index</span><span class="token comment">// multiple：是否批量.true:将一次性ack所有小于deliveryTag的消息。</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">basicAck</span><span class="token punctuation">(</span><span class="token keyword">long</span> deliveryTag<span class="token punctuation">,</span> <span class="token keyword">boolean</span> multiple<span class="token punctuation">)</span>    <span class="token comment">//deliveryTag:该消息的index</span><span class="token comment">//multiple：是否批量.true:将一次性拒绝所有小于deliveryTag的消息。</span><span class="token comment">//requeue：是否重新入队列   </span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">basicNack</span><span class="token punctuation">(</span><span class="token keyword">long</span> deliveryTag<span class="token punctuation">,</span> <span class="token keyword">boolean</span> multiple<span class="token punctuation">,</span> <span class="token keyword">boolean</span> requeue<span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>死信交换机和死信队列和普通的没有区别</li><li>当消息成为死信后，如果该队列绑定了死信交换机，则消息会被死信交换机重新路由到死信队列</li><li>消息成为死信的三种情况：<ul><li>队列消息长度到达限制；</li><li>消费者拒接消费消息，并且不重回队列；</li><li>原队列存在消息过期设置，消息到达超时时间未被消费；</li></ul></li></ol><h3 id="6-延迟队列-重点"><a href="#6-延迟队列-重点" class="headerlink" title="6.延迟队列-重点"></a>6.延迟队列-重点</h3><p>延迟队列，即消息进入队列后不会立即被消费，只有到达指定时间后，才会被消费。</p><p>提出需求：</p><ol><li>下单后，30分钟未支付，取消订单，回滚库存。</li><li>新用户注册成功7天后，发送短信问候。</li></ol><p>实现方式：</p><ol><li><p>定时器（不优雅！）</p></li><li><p>延迟队列</p><img src="/posts/cce8d692/1569168202661.c342efd8-16617675288583.png" class="" width="1569168202661"></li></ol><p>注意：在RabbitMQ中并未提供延迟队列功能。</p><p>但是可以使用：<strong>TTL+死信队列</strong> 组合实现延迟队列的效果。</p><img src="/posts/cce8d692/1569168255196.be484518.png" class="" width="1569168255196"><h2 id="gitee地址"><a href="#gitee地址" class="headerlink" title="gitee地址"></a>gitee地址</h2><p><a href="https://gitee.com/macongxuexi/RabbitMQSenior.git">https://gitee.com/macongxuexi/RabbitMQSenior.git</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="RabbitMQ" scheme="https://macongmc.github.io/categories/RabbitMQ/"/>
    
    
    <category term="消息队列" scheme="https://macongmc.github.io/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ</title>
    <link href="https://macongmc.github.io/posts/b543ced0.html"/>
    <id>https://macongmc.github.io/posts/b543ced0.html</id>
    <published>2022-08-25T05:56:10.000Z</published>
    <updated>2022-08-25T05:56:10.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一-消息中间件"><a href="#一-消息中间件" class="headerlink" title="一.消息中间件"></a>一.消息中间件</h2><p>MQ全称为Message Queue，消息队列是应用程序和应用程序之间的通信方法。</p><h3 id="1-MQ的优劣势"><a href="#1-MQ的优劣势" class="headerlink" title="1.MQ的优劣势"></a>1.MQ的优劣势</h3><p>优势：</p><p>应用解耦</p><p>异步调用</p><p>消峰添谷</p><p>缺点：</p><p>系统可用性降低</p><p>系统复杂度提高 </p><p>一致性问题</p><p>解决：消息重复    消息丢失    消息顺序   消息一致性（失败）</p><h3 id="2-MQ的应用场合"><a href="#2-MQ的应用场合" class="headerlink" title="2.MQ的应用场合"></a>2.MQ的应用场合</h3><p>① 生产者不需要从消费者处获得反馈。引入消息队列之前的直接调用，其接口的返回值应该为空，这才让明 明下层的动作还没做，上层却当成动作做完了继续往后走，即所谓异步成为了可能。</p><p>② 容许短暂的不一致性。</p><p>③ 确实是用了有效果。即解耦、提速、削峰这些方面的收益，超过加入MQ，管理MQ这些成本。</p><h3 id="3-MQ产品"><a href="#3-MQ产品" class="headerlink" title="3.MQ产品"></a>3.MQ产品</h3><img src="/posts/b543ced0/image-20220825144445041.png" class="" title="image-20220825144445041"><h3 id="4-特点"><a href="#4-特点" class="headerlink" title="4.特点"></a>4.特点</h3><p>1.使用简单，功能强大</p><p>2.跨语言</p><p>3.社区活跃，文档完善</p><p>4.高并发性能好</p><p>5.spring boot 默认集成</p><h3 id="5-工作模式"><a href="#5-工作模式" class="headerlink" title="5.工作模式"></a>5.工作模式</h3><p>RabbitMQ提供了6种模式：简单模式，work模式，Publish/Subscribe发布与订阅模式，<strong>Routing</strong>路由模式，<strong>Topics</strong>主题模式，RPC远程调用模式（远程调用，不太算MQ；暂不作介绍）；</p><p>官网对应模式介绍：<a href="https://www.rabbitmq.com/getstarted.html">https://www.rabbitmq.com/getstarted.html</a></p><img src="/posts/b543ced0/image-20220825145457725.png" class="" title="image-20220825145457725"><h2 id="二-RabbitMQ工作原理"><a href="#二-RabbitMQ工作原理" class="headerlink" title="二.RabbitMQ工作原理"></a>二.RabbitMQ工作原理</h2><h3 id="1-重点："><a href="#1-重点：" class="headerlink" title="1.重点："></a>1.重点：</h3><img src="/posts/b543ced0/image-20220825145655285.png" class="" title="image-20220825145655285"><p>http 三次握手 四次挥手 一个长连接</p><p><strong>一个消费者监听“一个”“队列”</strong></p><ul><li>Broker：消息队列服务进程，此进程包括两个部分：Exchange和Queue。</li><li>Exchange：消息队列交换机，按一定的规则将消息路由转发到某个队列，对消息进行过虑。</li><li>Queue：消息队列，存储消息的队列，消息到达队列并转发给指定的消费方。</li><li>Producer：消息生产者，即生产方客户端，生产方客户端将消息发送到MQ。</li><li>Consumer：消息消费者，即消费方客户端，接收MQ转发的消息。</li></ul><p>消息发布接收流程：</p><p>—–发送消息—–</p><p>1、生产者和Broker建立TCP连接。</p><p>2、生产者和Broker建立通道。</p><p>3、生产者通过通道消息发送给Broker，由Exchange将消息进行转发。</p><p>4、Exchange将消息转发到指定的Queue（队列）</p><p>—-接收消息—–</p><p>1、消费者和Broker建立TCP连接</p><p>2、消费者和Broker建立通道</p><p>3、消费者监听指定的Queue（队列）</p><p>4、当有消息到达Queue时Broker默认将消息推送给消费者。</p><p>5、消费者接收到消息。</p><h3 id="2-RabbitMQ运转流程"><a href="#2-RabbitMQ运转流程" class="headerlink" title="2.RabbitMQ运转流程"></a>2.RabbitMQ运转流程</h3><p>在入门案例中：</p><ul><li>生产者发送消息<ol><li>生产者创建连接（Connection），开启一个信道（Channel），连接到RabbitMQ Broker；</li><li>声明队列并设置属性；如是否排它，是否持久化，是否自动删除；</li><li>将路由键（空字符串）与队列绑定起来；</li><li>发送消息至RabbitMQ Broker；</li><li>关闭信道；</li><li>关闭连接；</li></ol></li><li>消费者接收消息<ol><li>消费者创建连接（Connection），开启一个信道（Channel），连接到RabbitMQ Broker</li><li>向Broker 请求消费相应队列中的消息，设置相应的回调函数；</li><li>等待Broker回应闭关投递响应队列中的消息，消费者接收消息；</li><li>确认（ack，自动确认）接收到的消息；</li><li>RabbitMQ从队列中删除相应已经被确认的消息；</li><li>关闭信道；</li><li>关闭连接；</li></ol></li></ul><img src="/posts/b543ced0/1565105223969.976e339d.png" class="" width="1565105223969"><h3 id="3-生产者流转过程说明"><a href="#3-生产者流转过程说明" class="headerlink" title="3.生产者流转过程说明"></a>3.生产者流转过程说明</h3><ol><li>客户端与代理服务器Broker建立连接。会调用newConnection() 方法,这个方法会进一步封装Protocol Header 0-9-1 的报文头发送给Broker ，以此通知Broker 本次交互采用的是AMQPO-9-1 协议，紧接着Broker 返回Connection.Start 来建立连接，在连接的过程中涉及Connection.Start/.Start-OK 、Connection.Tune/.Tune-Ok ，Connection.Open/ .Open-Ok 这6 个命令的交互。</li><li>客户端调用connection.createChannel方法。此方法开启信道，其包装的channel.open命令发送给Broker,等待channel.basicPublish方法，对应的AMQP命令为Basic.Publish,这个命令包含了content Header 和content Body()。content Header 包含了消息体的属性，例如:投递模式，优先级等，content Body 包含了消息体本身。</li><li>客户端发送完消息需要关闭资源时，涉及到Channel.Close和Channl.Close-Ok 与Connetion.Close和Connection.Close-Ok的命令交互。</li></ol><h3 id="4-消费者流转过程说明"><a href="#4-消费者流转过程说明" class="headerlink" title="4.消费者流转过程说明"></a>4.消费者流转过程说明</h3><ol><li>消费者客户端与代理服务器Broker建立连接。会调用newConnection() 方法,这个方法会进一步封装Protocol Header 0-9-1 的报文头发送给Broker ，以此通知Broker 本次交互采用的是AMQPO-9-1 协议，紧接着Broker 返回Connection.Start 来建立连接，在连接的过程中涉及Connection.Start/.Start-OK 、Connection.Tune/.Tune-Ok ，Connection.Open/ .Open-Ok 这6 个命令的交互。</li><li>消费者客户端调用connection.createChannel方法。和生产者客户端一样，协议涉及Channel . Open/Open-Ok命令。</li><li>在真正消费之前，消费者客户端需要向Broker 发送Basic.Consume 命令(即调用channel.basicConsume 方法〉将Channel 置为接收模式，之后Broker 回执Basic . Consume - Ok 以告诉消费者客户端准备好消费消息。</li><li>Broker 向消费者客户端推送(Push) 消息，即Basic.Deliver 命令，这个命令和Basic.Publish 命令一样会携带Content Header 和Content Body。</li><li>消费者接收到消息并正确消费之后，向Broker 发送确认，即Basic.Ack 命令。</li><li>客户端发送完消息需要关闭资源时，涉及到Channel.Close和Channl.Close-Ok 与Connetion.Close和Connection.Close-Ok的命令交互。</li></ol><h2 id="三-入门"><a href="#三-入门" class="headerlink" title="三.入门"></a>三.入门</h2><h3 id="1-启动"><a href="#1-启动" class="headerlink" title="1.启动"></a>1.启动</h3><pre class="line-numbers language-text" data-language="text"><code class="language-text">在sbin目录下，管理员身份运行cmdrabbitmq-plugins.bat enable rabbitmq_managementhttp://localhost:15672/username:guestpassword:guest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-简单模式"><a href="#2-简单模式" class="headerlink" title="2.简单模式"></a>2.简单模式</h3><img src="/posts/b543ced0/image-20220825151134024.png" class="" title="image-20220825151134024"><p>依赖</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token generics"><span class="token punctuation">&lt;</span>dependencies<span class="token punctuation">&gt;</span></span>        <span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>            <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>com<span class="token punctuation">.</span>rabbitmq<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>            <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>amqp<span class="token operator">-</span>client<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>            <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">&gt;</span></span><span class="token number">5.6</span><span class="token number">.0</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>dependencies<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编写生产者</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>ydlclass<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>simple</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span>AMQP<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">Channel</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">Connection</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">ConnectionFactory</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeoutException</span><span class="token punctuation">;</span><span class="token comment">/** * @Created by IT李老师 * 公主号 “元动力课堂” * 个人微 itlils */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Producer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token comment">//1创建连接工厂</span>        <span class="token class-name">ConnectionFactory</span> connectionFactory<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//连接的ip</span>        connectionFactory<span class="token punctuation">.</span><span class="token function">setHost</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//连接的端口</span>        connectionFactory<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span><span class="token number">5672</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置虚拟主机</span>        connectionFactory<span class="token punctuation">.</span><span class="token function">setVirtualHost</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置用户名</span>        connectionFactory<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"guest"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置密码</span>        connectionFactory<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"guest"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2创建长连接</span>        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> connectionFactory<span class="token punctuation">.</span><span class="token function">newConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3创建channel</span>        <span class="token class-name">Channel</span> channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//声明队列</span>        <span class="token comment">//String queue,  队列名</span>        <span class="token comment">// boolean durable, 持久化</span>        <span class="token comment">// boolean exclusive, 排他的</span>        <span class="token comment">// boolean autoDelete, 自动删除</span>        <span class="token comment">// Map&lt;String, Object&gt; arguments 属性</span>        channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token string">"ydlqueue"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//4发消息</span>        <span class="token comment">// String exchange,  交换机</span>        <span class="token comment">// String routingKey, 路由键</span>        <span class="token comment">// AMQP.BasicProperties props, 属性</span>        <span class="token comment">// byte[] body 消息      string byte[] char[]如何相互转换的？</span>        <span class="token class-name">String</span> msg<span class="token operator">=</span><span class="token string">"hello rabbitmq!"</span><span class="token punctuation">;</span>        channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">"ydlqueue"</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span>msg<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//5关闭连接  资源关闭的顺序，先关后出来的资源，最后关，第一个资源</span>        channel<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编写消费者</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>ydlclass<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>simple</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>ydlclass<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ConnectionUtil</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Consumer</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> QUEUE_NAME <span class="token operator">=</span> <span class="token string">"simple_queue"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token comment">//1创建连接工厂</span>        <span class="token class-name">ConnectionFactory</span> connectionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//主机地址;默认为 localhost</span>        connectionFactory<span class="token punctuation">.</span><span class="token function">setHost</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//连接端口;默认为 5672</span>        connectionFactory<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span><span class="token number">5672</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//虚拟主机名称;默认为 /</span>        connectionFactory<span class="token punctuation">.</span><span class="token function">setVirtualHost</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//连接用户名；默认为guest</span>        connectionFactory<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"itlils"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//连接密码；默认为guest</span>        connectionFactory<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"itlils"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2创建连接</span>        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> connectionFactory<span class="token punctuation">.</span><span class="token function">newConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3创建频道</span>        <span class="token class-name">Channel</span> channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//6声明（创建）队列</span>        <span class="token comment">/**         * 参数1：队列名称         * 参数2：是否定义持久化队列         * 参数3：是否独占本次连接         * 参数4：是否在不使用的时候自动删除队列         * 参数5：队列其它参数         */</span>        channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span>QUEUE_NAME<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//5创建消费者；并设置消息处理</span>        <span class="token class-name">DefaultConsumer</span> consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token comment">/**             * consumerTag 消息者标签，在channel.basicConsume时候可以指定             * envelope 消息包的内容，可从中获取消息id，消息routingkey，交换机，消息和重传标志(收到消息失败后是否需要重新发送)             * properties 属性信息             * body 消息             */</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelivery</span><span class="token punctuation">(</span><span class="token class-name">String</span> consumerTag<span class="token punctuation">,</span> <span class="token class-name">Envelope</span> envelope<span class="token punctuation">,</span> AMQP<span class="token punctuation">.</span><span class="token class-name">BasicProperties</span> properties<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>                <span class="token comment">//消费者标签</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费者标签为："</span> <span class="token operator">+</span> consumerTag<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//路由key</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"路由key为："</span> <span class="token operator">+</span> envelope<span class="token punctuation">.</span><span class="token function">getRoutingKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//交换机</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"交换机为："</span> <span class="token operator">+</span> envelope<span class="token punctuation">.</span><span class="token function">getExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//消息id</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消息id为："</span> <span class="token operator">+</span> envelope<span class="token punctuation">.</span><span class="token function">getDeliveryTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//收到的消息</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"接收到的消息为："</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">,</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment">//4监听消息</span>        <span class="token comment">/**         * 参数1：队列名称         * 参数2：是否自动确认，设置为true为表示消息接收到自动向mq回复接收到了，mq接收到回复会删除消息，设置为false则需要手动确认         * 参数3：消息接收到后回调         */</span>        channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span>QUEUE_NAME<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> consumer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//不关闭资源，应该一直监听消息</span>        <span class="token comment">//channel.close();</span>        <span class="token comment">//connection.close();</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/posts/b543ced0/image-20220825155847117.png" class="" title="image-20220825155847117"><h3 id="3-工作队列模式"><a href="#3-工作队列模式" class="headerlink" title="3.工作队列模式"></a>3.工作队列模式</h3><img src="/posts/b543ced0/image-20220825155924309.png" class="" title="image-20220825155924309"><p><code>Work Queues</code>与入门程序的<code>简单模式</code>相比，多了一个或一些消费端，多个消费端共同消费同一个队列中的消息。</p><p><strong>应用场景</strong>：对于 任务过重或任务较多情况使用工作队列可以提高任务处理的速度。</p><p>生产者，多运行几次，观察连个消费者</p><p>设置，消费者能启多份：</p><img src="/posts/b543ced0/image-20220411210105591.b88f5e92.png" class="" title="image-20220411210105591"><h3 id="4-订阅发布模式类型（微博）"><a href="#4-订阅发布模式类型（微博）" class="headerlink" title="4. 订阅发布模式类型（微博）"></a>4. 订阅发布模式类型（微博）</h3><img src="/posts/b543ced0/1556014499573.535fc6ca.png" class="" width="1556014499573"><p>前面2个案例中，只有3个角色：</p><ul><li>P：生产者，也就是要发送消息的程序</li><li>C：消费者：消息的接受者，会一直等待消息到来。</li><li>queue：消息队列，图中红色部分</li></ul><p>而在订阅模型中，多了一个exchange角色，而且过程略有变化：</p><ul><li>P：生产者，也就是要发送消息的程序，但是不再发送到队列中，而是发给X（交换机）</li><li>C：消费者，消息的接受者，会一直等待消息到来。</li><li>Queue：消息队列，接收消息、缓存消息。</li><li>Exchange：交换机，图中的X。一方面，接收生产者发送的消息。另一方面，知道如何处理消息，例如递交给某个特别队列、递交给所有队列、或是将消息丢弃。到底如何操作，取决于Exchange的类型。Exchange有常见以下3种类型：<ul><li>Fanout：广播，将消息交给所有绑定到交换机的队列</li><li>Direct：定向，把消息交给符合指定routing key 的队列</li><li>Topic：通配符，把消息交给符合routing pattern（路由模式） 的队列</li></ul></li></ul><p><strong>Exchange（交换机）只负责转发消息，不具备存储消息的能力</strong>，因此如果没有任何队列与Exchange绑定，或者没有符合路由规则的队列，那么消息会丢失！</p><p>生产者</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>ydlclass<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>simple</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">BuiltinExchangeType</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">Channel</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">Connection</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">ConnectionFactory</span><span class="token punctuation">;</span><span class="token comment">/** * creste by ydlclass. */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Producer_pubsub</span> <span class="token punctuation">{</span>    <span class="token comment">//交换机名称</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> FANOUT_EXCHAGE <span class="token operator">=</span> <span class="token string">"fanout_exchange"</span><span class="token punctuation">;</span>    <span class="token comment">//队列名称</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> FANOUT_QUEUE_1 <span class="token operator">=</span> <span class="token string">"fanout_queue_1"</span><span class="token punctuation">;</span>    <span class="token comment">//队列名称</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> FANOUT_QUEUE_2 <span class="token operator">=</span> <span class="token string">"fanout_queue_2"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token comment">//1创建连接工厂</span>        <span class="token class-name">ConnectionFactory</span> connectionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//主机地址;默认为 localhost</span>        connectionFactory<span class="token punctuation">.</span><span class="token function">setHost</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//连接端口;默认为 5672</span>        connectionFactory<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span><span class="token number">5672</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//虚拟主机名称;默认为 /</span>        connectionFactory<span class="token punctuation">.</span><span class="token function">setVirtualHost</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//连接用户名；默认为guest</span>        connectionFactory<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"itlils"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//连接密码；默认为guest</span>        connectionFactory<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"itlils"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2创建连接</span>        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> connectionFactory<span class="token punctuation">.</span><span class="token function">newConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3创建频道</span>        <span class="token class-name">Channel</span> channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/**         * 声明交换机         * 参数1：交换机名称         * 参数2：交换机类型，fanout、topic、direct、headers         * 参数3：是否定义持久化         * 参数4：是否在不使用的时候自动删除         */</span>        channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span>FANOUT_EXCHAGE<span class="token punctuation">,</span> <span class="token class-name">BuiltinExchangeType</span><span class="token punctuation">.</span>FANOUT<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 声明（创建）队列</span>        <span class="token comment">/**         * 参数1：队列名称         * 参数2：是否定义持久化队列         * 参数3：是否独占本次连接         * 参数4：是否在不使用的时候自动删除队列         * 参数5：队列其它参数         */</span>        channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span>FANOUT_QUEUE_1<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span>FANOUT_QUEUE_2<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//队列绑定交换机</span>        channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>FANOUT_QUEUE_1<span class="token punctuation">,</span> FANOUT_EXCHAGE<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>FANOUT_QUEUE_2<span class="token punctuation">,</span> FANOUT_EXCHAGE<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 发送信息</span>            <span class="token class-name">String</span> message <span class="token operator">=</span> <span class="token string">"你好；小兔子！发布订阅模式--"</span> <span class="token operator">+</span> i<span class="token punctuation">;</span>            <span class="token comment">/**             * 参数1：交换机名称，如果没有指定则使用默认Default Exchage             * 参数2：路由key,简单模式可以传递队列名称             * 参数3：消息其它属性             * 参数4：消息内容             */</span>            channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span>FANOUT_EXCHAGE<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> message<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"已发送消息："</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 关闭资源</span>        channel<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>消费者1</p><pre class="line-numbers language-none"><code class="language-none">package com.ydlclass.rabbitmq.publish;import com.rabbitmq.client.*;import java.io.IOException;/** * @Created by IT李老师 * 公主号 “元动力课堂” * 个人微 itlils */public class Consumer1 {    //交换机名称    static final String FANOUT_EXCHAGE = "fanout_exchange";    //队列名称    static final String FANOUT_QUEUE_1 = "fanout_queue_1";    //队列名称    static final String FANOUT_QUEUE_2 = "fanout_queue_2";    public static void main(String[] args) throws Exception {        //1创建连接工厂        ConnectionFactory connectionFactory=new ConnectionFactory();        //连接的ip        connectionFactory.setHost("localhost");        //连接的端口        connectionFactory.setPort(5672);        //设置虚拟主机        connectionFactory.setVirtualHost("/");        //设置用户名        connectionFactory.setUsername("itlils");        //设置密码        connectionFactory.setPassword("itlils");        //2创建长连接        Connection connection = connectionFactory.newConnection();        //3创建channel        Channel channel = connection.createChannel();        //声明队列        //String queue,  队列名        // boolean durable, 持久化        // boolean exclusive, 排他的        // boolean autoDelete, 自动删除        // Map&lt;String, Object&gt; arguments 属性        channel.queueDeclare(FANOUT_QUEUE_1,true,false,false,null);        channel.queueDeclare(FANOUT_QUEUE_2,true,false,false,null);        // 声明交换机        // String exchange,  交换机名称        // BuiltinExchangeType type, 交换机类型        // boolean durable,  持久化        // boolean autoDelete, 自动删除        // Map&lt;String, Object&gt; arguments 属性        channel.exchangeDeclare(FANOUT_EXCHAGE, BuiltinExchangeType.FANOUT,true,false,null);        //队列绑定交换机        // String queue, 队列名称        // String exchange, 交换机名称        // String routingKey 路由键        channel.queueBind(FANOUT_QUEUE_1,FANOUT_EXCHAGE,"");        channel.queueBind(FANOUT_QUEUE_2,FANOUT_EXCHAGE,"");        //4监听某个队列        // String queue, 监听的队列名        // boolean autoAck, 是否自动应答        // Consumer callback 回调函数，收到消息，我要干啥        com.rabbitmq.client.Consumer consumer=new DefaultConsumer(channel){            // 回调函数，收到消息，我要干啥            //  String consumerTag, 消费者标签            // Envelope envelope, 信封 保存很多信息            // AMQP.BasicProperties properties, 属性            // byte[] body  消息字节数组            @Override            public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException {                //业务逻辑                //现在的业务逻辑就是打印//                System.out.println("consumerTag:"+consumerTag);//                System.out.println("Exchange:"+envelope.getExchange());//                System.out.println("RoutingKey:"+envelope.getRoutingKey());//                System.out.println("DeliveryTag:"+envelope.getDeliveryTag()); //消息id                System.out.println(new String(body));            }        };        channel.basicConsume(FANOUT_QUEUE_1,true,consumer);        //5 千万别关闭连接，要不然queue有了消息 推不过来了//        channel.close();//        connection.close();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>消费者2</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>ydlclass<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>publish</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token comment">/** * @Created by IT李老师 * 公主号 “元动力课堂” * 个人微 itlils */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Consumer2</span> <span class="token punctuation">{</span>    <span class="token comment">//交换机名称</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> FANOUT_EXCHAGE <span class="token operator">=</span> <span class="token string">"fanout_exchange"</span><span class="token punctuation">;</span>    <span class="token comment">//队列名称</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> FANOUT_QUEUE_1 <span class="token operator">=</span> <span class="token string">"fanout_queue_1"</span><span class="token punctuation">;</span>    <span class="token comment">//队列名称</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> FANOUT_QUEUE_2 <span class="token operator">=</span> <span class="token string">"fanout_queue_2"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token comment">//1创建连接工厂</span>        <span class="token class-name">ConnectionFactory</span> connectionFactory<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//连接的ip</span>        connectionFactory<span class="token punctuation">.</span><span class="token function">setHost</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//连接的端口</span>        connectionFactory<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span><span class="token number">5672</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置虚拟主机</span>        connectionFactory<span class="token punctuation">.</span><span class="token function">setVirtualHost</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置用户名</span>        connectionFactory<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"itlils"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置密码</span>        connectionFactory<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"itlils"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2创建长连接</span>        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> connectionFactory<span class="token punctuation">.</span><span class="token function">newConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3创建channel</span>        <span class="token class-name">Channel</span> channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//声明队列</span>        <span class="token comment">//String queue,  队列名</span>        <span class="token comment">// boolean durable, 持久化</span>        <span class="token comment">// boolean exclusive, 排他的</span>        <span class="token comment">// boolean autoDelete, 自动删除</span>        <span class="token comment">// Map&lt;String, Object&gt; arguments 属性</span>        channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span>FANOUT_QUEUE_1<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span>FANOUT_QUEUE_2<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 声明交换机</span>        <span class="token comment">// String exchange,  交换机名称</span>        <span class="token comment">// BuiltinExchangeType type, 交换机类型</span>        <span class="token comment">// boolean durable,  持久化</span>        <span class="token comment">// boolean autoDelete, 自动删除</span>        <span class="token comment">// Map&lt;String, Object&gt; arguments 属性</span>        channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span>FANOUT_EXCHAGE<span class="token punctuation">,</span> <span class="token class-name">BuiltinExchangeType</span><span class="token punctuation">.</span>FANOUT<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//队列绑定交换机</span>        <span class="token comment">// String queue, 队列名称</span>        <span class="token comment">// String exchange, 交换机名称</span>        <span class="token comment">// String routingKey 路由键</span>        channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>FANOUT_QUEUE_1<span class="token punctuation">,</span>FANOUT_EXCHAGE<span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>FANOUT_QUEUE_2<span class="token punctuation">,</span>FANOUT_EXCHAGE<span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//4监听某个队列</span>        <span class="token comment">// String queue, 监听的队列名</span>        <span class="token comment">// boolean autoAck, 是否自动应答</span>        <span class="token comment">// Consumer callback 回调函数，收到消息，我要干啥</span>        <span class="token class-name">Consumer</span> consumer<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">DefaultConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">// 回调函数，收到消息，我要干啥</span>            <span class="token comment">//  String consumerTag, 消费者标签</span>            <span class="token comment">// Envelope envelope, 信封 保存很多信息</span>            <span class="token comment">// AMQP.BasicProperties properties, 属性</span>            <span class="token comment">// byte[] body  消息字节数组</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelivery</span><span class="token punctuation">(</span><span class="token class-name">String</span> consumerTag<span class="token punctuation">,</span> <span class="token class-name">Envelope</span> envelope<span class="token punctuation">,</span> AMQP<span class="token punctuation">.</span><span class="token class-name">BasicProperties</span> properties<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>                <span class="token comment">//业务逻辑</span>                <span class="token comment">//现在的业务逻辑就是打印</span><span class="token comment">//                System.out.println("consumerTag:"+consumerTag);</span><span class="token comment">//                System.out.println("Exchange:"+envelope.getExchange());</span><span class="token comment">//                System.out.println("RoutingKey:"+envelope.getRoutingKey());</span><span class="token comment">//                System.out.println("DeliveryTag:"+envelope.getDeliveryTag()); //消息id</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span>FANOUT_QUEUE_2<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span>consumer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//5 千万别关闭连接，要不然queue有了消息 推不过来了</span><span class="token comment">//        channel.close();</span><span class="token comment">//        connection.close();</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>1、工作队列模式不用定义交换机，而发布/订阅模式需要定义交换机。</p><p>2、发布/订阅模式的生产方是面向交换机发送消息，工作队列模式的生产方是面向队列发送消息(底层使用默认交换机)。</p><p>3、发布/订阅模式需要设置队列和交换机的绑定，工作队列模式不需要设置，实际上工作队列模式会将队列绑 定到默认的交换机 。</p><h3 id="5-Routing路由模式（分布式日志收集系统）"><a href="#5-Routing路由模式（分布式日志收集系统）" class="headerlink" title="5.Routing路由模式（分布式日志收集系统）"></a>5.Routing路由模式（分布式日志收集系统）</h3><p>路由模式特点：</p><ul><li>队列与交换机的绑定，不能是任意绑定了，而是要指定一个<code>RoutingKey</code>（路由key）</li><li>消息的发送方在 向 Exchange发送消息时，也必须指定消息的 <code>RoutingKey</code>。</li><li>Exchange不再把消息交给每一个绑定的队列，而是根据消息的<code>Routing Key</code>进行判断，只有队列的<code>Routingkey</code>与消息的 <code>Routing key</code>完全一致，才会接收到消息</li></ul><img src="/posts/b543ced0/1556029284397.8f3e1d3c.png" class="" width="1556029284397"><p>图解：</p><ul><li><p>P：生产者，向Exchange发送消息，发送消息时，会指定一个routing key。</p></li><li><p>X：Exchange（交换机），接收生产者的消息，然后把消息递交给 与routing key完全匹配的队列</p></li><li><p>C1：消费者，其所在队列指定了需要routing key 为 error 的消息</p></li><li><p>C2：消费者，其所在队列指定了需要routing key 为 info、error、warning 的消息</p><p>生产者</p></li></ul><pre class="line-numbers language-none"><code class="language-none">package com.ydlclass.rabbitmq.routing;import com.rabbitmq.client.BuiltinExchangeType;import com.rabbitmq.client.Channel;import com.rabbitmq.client.Connection;import com.rabbitmq.client.ConnectionFactory;/** * @Created by IT李老师 * 公主号 “元动力课堂” * 个人微 itlils */public class Producer {    //交换机名称    static final String DIRECT_EXCHAGE = "direct_exchange";    //队列名称    static final String DIRECT_QUEUE_1 = "direct_queue_1";    //队列名称    static final String DIRECT_QUEUE_2 = "direct_queue_2";    public static void main(String[] args) throws Exception {        //1创建连接工厂        ConnectionFactory connectionFactory=new ConnectionFactory();        //连接的ip        connectionFactory.setHost("localhost");        //连接的端口        connectionFactory.setPort(5672);        //设置虚拟主机        connectionFactory.setVirtualHost("/");        //设置用户名        connectionFactory.setUsername("itlils");        //设置密码        connectionFactory.setPassword("itlils");        //2创建长连接        Connection connection = connectionFactory.newConnection();        //3创建channel        Channel channel = connection.createChannel();        //声明队列        //String queue,  队列名        // boolean durable, 持久化        // boolean exclusive, 排他的        // boolean autoDelete, 自动删除        // Map&lt;String, Object&gt; arguments 属性        channel.queueDeclare(DIRECT_QUEUE_1,true,false,false,null);        channel.queueDeclare(DIRECT_QUEUE_2,true,false,false,null);        // 声明交换机        // String exchange,  交换机名称        // BuiltinExchangeType type, 交换机类型        // boolean durable,  持久化        // boolean autoDelete, 自动删除        // Map&lt;String, Object&gt; arguments 属性        channel.exchangeDeclare(DIRECT_EXCHAGE, BuiltinExchangeType.DIRECT,true,false,null);        //队列绑定交换机        // String queue, 队列名称        // String exchange, 交换机名称        // String routingKey 路由键        channel.queueBind(DIRECT_QUEUE_1,DIRECT_EXCHAGE,"error");        channel.queueBind(DIRECT_QUEUE_2,DIRECT_EXCHAGE,"info");        channel.queueBind(DIRECT_QUEUE_2,DIRECT_EXCHAGE,"error");        channel.queueBind(DIRECT_QUEUE_2,DIRECT_EXCHAGE,"warning");        //4发消息        // String exchange,  交换机        // String routingKey, 路由键        // AMQP.BasicProperties props, 属性        // byte[] body 消息      string byte[] char[]如何相互转换的？        String msg="hello rabbitmq!routing error";        channel.basicPublish(DIRECT_EXCHAGE,"error",null,msg.getBytes());        String msg1="hello rabbitmq!routing info";        channel.basicPublish(DIRECT_EXCHAGE,"info",null,msg1.getBytes());        String msg2="hello rabbitmq!routing warning";        channel.basicPublish(DIRECT_EXCHAGE,"warning",null,msg2.getBytes());        //5关闭连接  资源关闭的顺序，先关后出来的资源，最后关，第一个资源        channel.close();        connection.close();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>消费者1</p><pre class="line-numbers language-none"><code class="language-none">package com.ydlclass.rabbitmq.routing;import com.rabbitmq.client.*;import java.io.IOException;/** * @Created by IT李老师 * 公主号 “元动力课堂” * 个人微 itlils */public class Consumer1 {    //交换机名称    static final String DIRECT_EXCHAGE = "direct_exchange";    //队列名称    static final String DIRECT_QUEUE_1 = "direct_queue_1";    //队列名称    static final String DIRECT_QUEUE_2 = "direct_queue_2";    public static void main(String[] args) throws Exception {        //1创建连接工厂        ConnectionFactory connectionFactory=new ConnectionFactory();        //连接的ip        connectionFactory.setHost("localhost");        //连接的端口        connectionFactory.setPort(5672);        //设置虚拟主机        connectionFactory.setVirtualHost("/");        //设置用户名        connectionFactory.setUsername("itlils");        //设置密码        connectionFactory.setPassword("itlils");        //2创建长连接        Connection connection = connectionFactory.newConnection();        //3创建channel        Channel channel = connection.createChannel();        //声明队列        //String queue,  队列名        // boolean durable, 持久化        // boolean exclusive, 排他的        // boolean autoDelete, 自动删除        // Map&lt;String, Object&gt; arguments 属性        channel.queueDeclare(DIRECT_QUEUE_1,true,false,false,null);        channel.queueDeclare(DIRECT_QUEUE_2,true,false,false,null);        // 声明交换机        // String exchange,  交换机名称        // BuiltinExchangeType type, 交换机类型        // boolean durable,  持久化        // boolean autoDelete, 自动删除        // Map&lt;String, Object&gt; arguments 属性        channel.exchangeDeclare(DIRECT_EXCHAGE, BuiltinExchangeType.DIRECT,true,false,null);        //队列绑定交换机        // String queue, 队列名称        // String exchange, 交换机名称        // String routingKey 路由键        channel.queueBind(DIRECT_QUEUE_1,DIRECT_EXCHAGE,"error");        channel.queueBind(DIRECT_QUEUE_2,DIRECT_EXCHAGE,"info");        channel.queueBind(DIRECT_QUEUE_2,DIRECT_EXCHAGE,"error");        channel.queueBind(DIRECT_QUEUE_2,DIRECT_EXCHAGE,"warning");        //4监听某个队列        // String queue, 监听的队列名        // boolean autoAck, 是否自动应答        // Consumer callback 回调函数，收到消息，我要干啥        com.rabbitmq.client.Consumer consumer=new DefaultConsumer(channel){            // 回调函数，收到消息，我要干啥            //  String consumerTag, 消费者标签            // Envelope envelope, 信封 保存很多信息            // AMQP.BasicProperties properties, 属性            // byte[] body  消息字节数组            @Override            public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException {                //业务逻辑                //现在的业务逻辑就是打印//                System.out.println("consumerTag:"+consumerTag);//                System.out.println("Exchange:"+envelope.getExchange());//                System.out.println("RoutingKey:"+envelope.getRoutingKey());//                System.out.println("DeliveryTag:"+envelope.getDeliveryTag()); //消息id                System.out.println(new String(body));            }        };        channel.basicConsume(DIRECT_QUEUE_1,true,consumer);        //5 千万别关闭连接，要不然queue有了消息 推不过来了//        channel.close();//        connection.close();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>消费者2</p><pre class="line-numbers language-none"><code class="language-none">package com.ydlclass.rabbitmq.routing;import com.rabbitmq.client.*;import java.io.IOException;/** * @Created by IT李老师 * 公主号 “元动力课堂” * 个人微 itlils */public class Consumer2 {    //交换机名称    static final String DIRECT_EXCHAGE = "direct_exchange";    //队列名称    static final String DIRECT_QUEUE_1 = "direct_queue_1";    //队列名称    static final String DIRECT_QUEUE_2 = "direct_queue_2";    public static void main(String[] args) throws Exception {        //1创建连接工厂        ConnectionFactory connectionFactory=new ConnectionFactory();        //连接的ip        connectionFactory.setHost("localhost");        //连接的端口        connectionFactory.setPort(5672);        //设置虚拟主机        connectionFactory.setVirtualHost("/");        //设置用户名        connectionFactory.setUsername("itlils");        //设置密码        connectionFactory.setPassword("itlils");        //2创建长连接        Connection connection = connectionFactory.newConnection();        //3创建channel        Channel channel = connection.createChannel();        //声明队列        //String queue,  队列名        // boolean durable, 持久化        // boolean exclusive, 排他的        // boolean autoDelete, 自动删除        // Map&lt;String, Object&gt; arguments 属性        channel.queueDeclare(DIRECT_QUEUE_1,true,false,false,null);        channel.queueDeclare(DIRECT_QUEUE_2,true,false,false,null);        // 声明交换机        // String exchange,  交换机名称        // BuiltinExchangeType type, 交换机类型        // boolean durable,  持久化        // boolean autoDelete, 自动删除        // Map&lt;String, Object&gt; arguments 属性        channel.exchangeDeclare(DIRECT_EXCHAGE, BuiltinExchangeType.DIRECT,true,false,null);        //队列绑定交换机        // String queue, 队列名称        // String exchange, 交换机名称        // String routingKey 路由键        channel.queueBind(DIRECT_QUEUE_1,DIRECT_EXCHAGE,"error");        channel.queueBind(DIRECT_QUEUE_2,DIRECT_EXCHAGE,"info");        channel.queueBind(DIRECT_QUEUE_2,DIRECT_EXCHAGE,"error");        channel.queueBind(DIRECT_QUEUE_2,DIRECT_EXCHAGE,"warning");        //4监听某个队列        // String queue, 监听的队列名        // boolean autoAck, 是否自动应答        // Consumer callback 回调函数，收到消息，我要干啥        Consumer consumer=new DefaultConsumer(channel){            // 回调函数，收到消息，我要干啥            //  String consumerTag, 消费者标签            // Envelope envelope, 信封 保存很多信息            // AMQP.BasicProperties properties, 属性            // byte[] body  消息字节数组            @Override            public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException {                //业务逻辑                //现在的业务逻辑就是打印//                System.out.println("consumerTag:"+consumerTag);//                System.out.println("Exchange:"+envelope.getExchange());//                System.out.println("RoutingKey:"+envelope.getRoutingKey());//                System.out.println("DeliveryTag:"+envelope.getDeliveryTag()); //消息id                System.out.println(new String(body));            }        };        channel.basicConsume(DIRECT_QUEUE_2,true,consumer);        //5 千万别关闭连接，要不然queue有了消息 推不过来了//        channel.close();//        connection.close();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Routing模式要求队列在绑定交换机时要指定routing key，消息会转发到符合routing key的队列。</p><h3 id="6-Topics通配符模式"><a href="#6-Topics通配符模式" class="headerlink" title="6.Topics通配符模式"></a>6.Topics通配符模式</h3><p>通配符规则：</p><p><code>#</code>：匹配一个或多个词</p><p><code>*</code>：匹配不多不少恰好1个词</p><p><code>Topic</code>类型与<code>Direct</code>相比，都是可以根据<code>RoutingKey</code>把消息路由到不同的队列。只不过<code>Topic</code>类型<code>Exchange</code>可以让队列在绑定<code>Routing key</code> 的时候<strong>使用通配符</strong>！</p><pre class="line-numbers language-none"><code class="language-none">Routingkey` 一般都是有一个或多个单词组成，多个单词之间以”.”分割，例如： `item.insert<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/posts/b543ced0/1556031362048.6cfc1105.png" class="" width="1556031362048"><img src="/posts/b543ced0/1556031519931.49fe6b22.png" class="" width="1556031519931"><p>图解：</p><ul><li>红色Queue：绑定的是<code>usa.#</code> ，因此凡是以 <code>usa.</code>开头的<code>routing key</code> 都会被匹配到</li><li>黄色Queue：绑定的是<code>#.news</code> ，因此凡是以 <code>.news</code>结尾的 <code>routing key</code> 都会被匹配</li></ul><p>生产者</p><pre class="line-numbers language-none"><code class="language-none">package com.ydlclass.rabbitmq.topic;import com.rabbitmq.client.BuiltinExchangeType;import com.rabbitmq.client.Channel;import com.rabbitmq.client.Connection;import com.rabbitmq.client.ConnectionFactory;/** * @Created by IT李老师 * 公主号 “元动力课堂” * 个人微 itlils */public class Producer {    //交换机名称    static final String TOPIC_EXCHAGE = "topic_exchange";    //队列名称    static final String TOPIC_QUEUE_1 = "topic_queue_1";    //队列名称    static final String TOPIC_QUEUE_2 = "topic_queue_2";    public static void main(String[] args) throws Exception {        //1创建连接工厂        ConnectionFactory connectionFactory=new ConnectionFactory();        //连接的ip        connectionFactory.setHost("localhost");        //连接的端口        connectionFactory.setPort(5672);        //设置虚拟主机        connectionFactory.setVirtualHost("/");        //设置用户名        connectionFactory.setUsername("itlils");        //设置密码        connectionFactory.setPassword("itlils");        //2创建长连接        Connection connection = connectionFactory.newConnection();        //3创建channel        Channel channel = connection.createChannel();        //声明队列        //String queue,  队列名        // boolean durable, 持久化        // boolean exclusive, 排他的        // boolean autoDelete, 自动删除        // Map&lt;String, Object&gt; arguments 属性        channel.queueDeclare(TOPIC_QUEUE_1,true,false,false,null);        channel.queueDeclare(TOPIC_QUEUE_2,true,false,false,null);        // 声明交换机        // String exchange,  交换机名称        // BuiltinExchangeType type, 交换机类型        // boolean durable,  持久化        // boolean autoDelete, 自动删除        // Map&lt;String, Object&gt; arguments 属性        channel.exchangeDeclare(TOPIC_EXCHAGE, BuiltinExchangeType.TOPIC,true,false,null);        //队列绑定交换机        // String queue, 队列名称        // String exchange, 交换机名称        // String routingKey 路由键        channel.queueBind(TOPIC_QUEUE_1,TOPIC_EXCHAGE,"ydlclass.taiyuan.*.*"); //我是太原校区校长的队列        channel.queueBind(TOPIC_QUEUE_2,TOPIC_EXCHAGE,"ydlclass.*.caiwubu.*");//我是总部财务主管的队列        //4发消息        // String exchange,  交换机        // String routingKey, 路由键        // AMQP.BasicProperties props, 属性        // byte[] body 消息      string byte[] char[]如何相互转换的？        String msg1="hello rabbitmq!topic  本月工资大家涨两千！";        channel.basicPublish(TOPIC_EXCHAGE,"ydlclass.taiyuan.caiwubu.info",null,msg1.getBytes());        String msg2="hello rabbitmq!topic 李老师携款潜逃！";        channel.basicPublish(TOPIC_EXCHAGE,"ydlclass.taiyuan.renshi.error",null,msg2.getBytes());        String msg3="hello rabbitmq!topic  因为李老师逃了，全国所有校区降薪两千。不行就毕业！";        channel.basicPublish(TOPIC_EXCHAGE,"ydlclass.beijing.caiwubu.error",null,msg3.getBytes());        //5关闭连接  资源关闭的顺序，先关后出来的资源，最后关，第一个资源        channel.close();        connection.close();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>消费者1</p><pre class="line-numbers language-none"><code class="language-none">package com.ydlclass.rabbitmq.topic;import com.rabbitmq.client.*;import java.io.IOException;/** * @Created by IT李老师 * 公主号 “元动力课堂” * 个人微 itlils */public class Consumer1 {    //交换机名称    static final String TOPIC_EXCHAGE = "topic_exchange";    //队列名称    static final String TOPIC_QUEUE_1 = "topic_queue_1";    //队列名称    static final String TOPIC_QUEUE_2 = "topic_queue_2";    public static void main(String[] args) throws Exception {        //1创建连接工厂        ConnectionFactory connectionFactory=new ConnectionFactory();        //连接的ip        connectionFactory.setHost("localhost");        //连接的端口        connectionFactory.setPort(5672);        //设置虚拟主机        connectionFactory.setVirtualHost("/");        //设置用户名        connectionFactory.setUsername("itlils");        //设置密码        connectionFactory.setPassword("itlils");        //2创建长连接        Connection connection = connectionFactory.newConnection();        //3创建channel        Channel channel = connection.createChannel();        //声明队列        //String queue,  队列名        // boolean durable, 持久化        // boolean exclusive, 排他的        // boolean autoDelete, 自动删除        // Map&lt;String, Object&gt; arguments 属性        channel.queueDeclare(TOPIC_QUEUE_1,true,false,false,null);        channel.queueDeclare(TOPIC_QUEUE_2,true,false,false,null);        // 声明交换机        // String exchange,  交换机名称        // BuiltinExchangeType type, 交换机类型        // boolean durable,  持久化        // boolean autoDelete, 自动删除        // Map&lt;String, Object&gt; arguments 属性        channel.exchangeDeclare(TOPIC_EXCHAGE, BuiltinExchangeType.TOPIC,true,false,null);        //队列绑定交换机        // String queue, 队列名称        // String exchange, 交换机名称        // String routingKey 路由键        channel.queueBind(TOPIC_QUEUE_1,TOPIC_EXCHAGE,"ydlclass.taiyuan.*.*"); //我是太原校区校长的队列        channel.queueBind(TOPIC_QUEUE_2,TOPIC_EXCHAGE,"ydlclass.*.caiwubu.*");//我是总部财务主管的队列        //4监听某个队列        // String queue, 监听的队列名        // boolean autoAck, 是否自动应答        // Consumer callback 回调函数，收到消息，我要干啥        Consumer consumer=new DefaultConsumer(channel){            // 回调函数，收到消息，我要干啥            //  String consumerTag, 消费者标签            // Envelope envelope, 信封 保存很多信息            // AMQP.BasicProperties properties, 属性            // byte[] body  消息字节数组            @Override            public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException {                //业务逻辑                //现在的业务逻辑就是打印//                System.out.println("consumerTag:"+consumerTag);//                System.out.println("Exchange:"+envelope.getExchange());//                System.out.println("RoutingKey:"+envelope.getRoutingKey());//                System.out.println("DeliveryTag:"+envelope.getDeliveryTag()); //消息id                System.out.println(new String(body));            }        };        channel.basicConsume(TOPIC_QUEUE_1,true,consumer);        //5 千万别关闭连接，要不然queue有了消息 推不过来了//        channel.close();//        connection.close();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>消费者2</p><pre class="line-numbers language-none"><code class="language-none">package com.ydlclass.rabbitmq.topic;import com.rabbitmq.client.*;import java.io.IOException;/** * @Created by IT李老师 * 公主号 “元动力课堂” * 个人微 itlils */public class Consumer2 {    //交换机名称    static final String TOPIC_EXCHAGE = "topic_exchange";    //队列名称    static final String TOPIC_QUEUE_1 = "topic_queue_1";    //队列名称    static final String TOPIC_QUEUE_2 = "topic_queue_2";    public static void main(String[] args) throws Exception {        //1创建连接工厂        ConnectionFactory connectionFactory=new ConnectionFactory();        //连接的ip        connectionFactory.setHost("localhost");        //连接的端口        connectionFactory.setPort(5672);        //设置虚拟主机        connectionFactory.setVirtualHost("/");        //设置用户名        connectionFactory.setUsername("itlils");        //设置密码        connectionFactory.setPassword("itlils");        //2创建长连接        Connection connection = connectionFactory.newConnection();        //3创建channel        Channel channel = connection.createChannel();        //声明队列        //String queue,  队列名        // boolean durable, 持久化        // boolean exclusive, 排他的        // boolean autoDelete, 自动删除        // Map&lt;String, Object&gt; arguments 属性        channel.queueDeclare(TOPIC_QUEUE_1,true,false,false,null);        channel.queueDeclare(TOPIC_QUEUE_2,true,false,false,null);        // 声明交换机        // String exchange,  交换机名称        // BuiltinExchangeType type, 交换机类型        // boolean durable,  持久化        // boolean autoDelete, 自动删除        // Map&lt;String, Object&gt; arguments 属性        channel.exchangeDeclare(TOPIC_EXCHAGE, BuiltinExchangeType.TOPIC,true,false,null);        //队列绑定交换机        // String queue, 队列名称        // String exchange, 交换机名称        // String routingKey 路由键        channel.queueBind(TOPIC_QUEUE_1,TOPIC_EXCHAGE,"ydlclass.taiyuan.*.*"); //我是太原校区校长的队列        channel.queueBind(TOPIC_QUEUE_2,TOPIC_EXCHAGE,"ydlclass.*.caiwubu.*");//我是总部财务主管的队列        //4监听某个队列        // String queue, 监听的队列名        // boolean autoAck, 是否自动应答        // Consumer callback 回调函数，收到消息，我要干啥        Consumer consumer=new DefaultConsumer(channel){            // 回调函数，收到消息，我要干啥            //  String consumerTag, 消费者标签            // Envelope envelope, 信封 保存很多信息            // AMQP.BasicProperties properties, 属性            // byte[] body  消息字节数组            @Override            public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException {                //业务逻辑                //现在的业务逻辑就是打印//                System.out.println("consumerTag:"+consumerTag);//                System.out.println("Exchange:"+envelope.getExchange());//                System.out.println("RoutingKey:"+envelope.getRoutingKey());//                System.out.println("DeliveryTag:"+envelope.getDeliveryTag()); //消息id                System.out.println(new String(body));            }        };        channel.basicConsume(TOPIC_QUEUE_2,true,consumer);        //5 千万别关闭连接，要不然queue有了消息 推不过来了//        channel.close();//        connection.close();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Topic主题模式可以实现 <code>Publish/Subscribe发布与订阅模式</code> 和 <code>Routing路由模式</code> 的功能；只是Topic在配置routing key 的时候可以使用通配符，显得更加灵活。</p><h3 id="7-模式总结"><a href="#7-模式总结" class="headerlink" title="7.模式总结"></a>7.模式总结</h3><h4 id="（1）简单模式-HelloWorld"><a href="#（1）简单模式-HelloWorld" class="headerlink" title="（1）简单模式 HelloWorld"></a><strong>（1）简单模式 HelloWorld</strong></h4><p>一个生产者、一个消费者，不需要设置交换机（使用默认的交换机）。</p><h4 id="（2）工作队列模式-Work-Queue"><a href="#（2）工作队列模式-Work-Queue" class="headerlink" title="（2）工作队列模式 Work Queue**"></a>（2）工作队列模式 Work Queue**</h4><p>一个生产者、多个消费者（竞争关系），不需要设置交换机（使用默认的交换机）。</p><h4 id="（3）发布订阅模式-Publish-subscribe"><a href="#（3）发布订阅模式-Publish-subscribe" class="headerlink" title="（3）发布订阅模式 Publish/subscribe**"></a>（3）发布订阅模式 Publish/subscribe**</h4><p>需要设置类型为fanout的交换机，并且交换机和队列进行绑定，当发送消息到交换机后，交换机会将消息发送到绑定的队列。</p><h4 id="（4）路由模式-Routing"><a href="#（4）路由模式-Routing" class="headerlink" title="（4）路由模式 Routing**"></a>（4）路由模式 Routing**</h4><p>需要设置类型为direct的交换机，交换机和队列进行绑定，并且指定routing key，当发送消息到交换机后，交换机会根据routing key将消息发送到对应的队列。</p><h4 id="（5）通配符模式-Topic"><a href="#（5）通配符模式-Topic" class="headerlink" title="（5）通配符模式 Topic**"></a>（5）通配符模式 Topic**</h4><p>需要设置类型为topic的交换机，交换机和队列进行绑定，并且指定通配符方式的routing key，当发送消息到交换机后，交换机会根据routing key将消息发送到对应的队列。</p><h2 id="四-Spring-Boot-集成RabbitMQ"><a href="#四-Spring-Boot-集成RabbitMQ" class="headerlink" title="四.Spring Boot 集成RabbitMQ"></a>四.Spring Boot 集成RabbitMQ</h2><p><strong>生产者工程：</strong></p><ol><li>application.yml文件配置RabbitMQ相关信息；</li><li>在生产者工程中编写配置类，用于创建交换机和队列，并进行绑定</li><li>注入RabbitTemplate对象，通过RabbitTemplate对象发送消息到交换机</li></ol><p><strong>消费者工程：</strong></p><ol><li>application.yml文件配置RabbitMQ相关信息</li><li>创建消息处理类，用于接收队列中的消息并进行处理</li></ol><pre class="line-numbers language-none"><code class="language-none">&lt;dependency&gt;           &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;           &lt;artifactId&gt;spring-boot-starter-amqp&lt;/artifactId&gt;       &lt;/dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">spring:  rabbitmq:    host: localhost    port: 5672    virtual-host: /    username: guest    password: guest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">绑定交换机和队列创建RabbitMQ队列与交换机绑定的配置类com.ydlclass.rabbitmq.config.RabbitMQConfigpackage com.ydlclass.rabbitmq.config;import org.springframework.amqp.core.*;import org.springframework.beans.factory.annotation.Qualifier;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;/** * @Created by IT李老师 * 公主号 “元动力课堂” * 个人微 itlils */@Configurationpublic class RabbitConfig {    @Bean("boot_hello_queue")    public Queue queue(){        //String queue,  队列名        // boolean durable, 持久化        // boolean exclusive, 排他的        // boolean autoDelete, 自动删除        // Map&lt;String, Object&gt; arguments 属性        return new Queue("boot_hello_queue",true,false,false,null);    }    //发布订阅模式    //交换机名称   public static final String FANOUT_EXCHAGE = "boot_fanout_exchange";    //队列名称    public static final String FANOUT_QUEUE_1 = "boot_fanout_queue_1";    //队列名称    public static final String FANOUT_QUEUE_2 = "boot_fanout_queue_2";    @Bean(FANOUT_QUEUE_1)    public Queue FANOUT_QUEUE_1(){        return new Queue(FANOUT_QUEUE_1,true,false,false,null);    }    @Bean(FANOUT_QUEUE_2)    public Queue FANOUT_QUEUE_2(){        return new Queue(FANOUT_QUEUE_2,true,false,false,null);    }    @Bean(FANOUT_EXCHAGE)    public Exchange FANOUT_EXCHAGE(){        return ExchangeBuilder.fanoutExchange(FANOUT_EXCHAGE).durable(true).build();    }    @Bean    public Binding FANOUT_QUEUE_1_FANOUT_EXCHAGE(@Qualifier(FANOUT_QUEUE_1) Queue queue,                                                 @Qualifier(FANOUT_EXCHAGE) Exchange exchange){        return BindingBuilder.bind(queue).to(exchange).with("").noargs();    }    @Bean    public Binding FANOUT_QUEUE_2_FANOUT_EXCHAGE(@Qualifier(FANOUT_QUEUE_2) Queue queue,                                                 @Qualifier(FANOUT_EXCHAGE) Exchange exchange){        return BindingBuilder.bind(queue).to(exchange).with("").noargs();    }    //作业    //routing模式    //topic模式}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">package com.ydlclass.rabbitmq;import com.ydlclass.rabbitmq.config.RabbitConfig;import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.amqp.rabbit.core.RabbitTemplate;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.test.context.junit4.SpringRunner;/** * @Created by IT李老师 * 公主号 “元动力课堂” * 个人微 itlils */@RunWith(SpringRunner.class)@SpringBootTest(classes = ProducerApp.class)public class ProducerTest {    @Autowired    RabbitTemplate rabbitTemplate;    @Test    public void helloTest(){        String msg="hello rabbitmq!";        rabbitTemplate.convertAndSend("","boot_hello_queue",msg);    }    @Test    public void publishTest(){        String msg="hello rabbitmq!publishTest";        rabbitTemplate.convertAndSend(RabbitConfig.FANOUT_EXCHAGE,"",msg);    }    //作业 routing    //topic}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">package com.ydlclass.rabbitmq.listener;import com.ydlclass.rabbitmq.config.RabbitConfig;import org.springframework.amqp.core.Message;import org.springframework.amqp.core.MessageProperties;import org.springframework.amqp.rabbit.annotation.RabbitListener;import org.springframework.stereotype.Component;/** * @Created by IT李老师 * 公主号 “元动力课堂” * 个人微 itlils */@Componentpublic class MyListener {    @RabbitListener(queues = RabbitConfig.FANOUT_QUEUE_1)    public void receiveMsg(Message message){        //业务逻辑        byte[] body = message.getBody();        System.out.println(new String(body));        MessageProperties messageProperties = message.getMessageProperties(); //参数        System.out.println(messageProperties.getMessageId());        System.out.println(messageProperties.getDeliveryTag());        System.out.println(messageProperties.getReceivedRoutingKey());        System.out.println(messageProperties.getConsumerTag());    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注解</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>bindings <span class="token operator">=</span><span class="token annotation punctuation">@QueueBinding</span><span class="token punctuation">(</span>        <span class="token comment">// email.fanout.queue 是队列名字，这个名字你可以自定随便定义。</span>        value <span class="token operator">=</span> <span class="token annotation punctuation">@Queue</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"email.topic.queue"</span><span class="token punctuation">,</span>autoDelete <span class="token operator">=</span> <span class="token string">"false"</span><span class="token punctuation">,</span>durable <span class="token operator">=</span> <span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token comment">// order.fanout 交换机的名字 必须和生产者保持一致</span>        exchange <span class="token operator">=</span> <span class="token annotation punctuation">@Exchange</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"topic_order_exchange"</span><span class="token punctuation">,</span>                <span class="token comment">// 这里是确定的rabbitmq模式是：fanout 是以广播模式 、 发布订阅模式</span>                type <span class="token operator">=</span> <span class="token class-name">ExchangeTypes</span><span class="token punctuation">.</span>TOPIC<span class="token punctuation">)</span><span class="token punctuation">,</span>key <span class="token operator">=</span> <span class="token string">"*.email.#"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五-gitee地址"><a href="#五-gitee地址" class="headerlink" title="五.gitee地址"></a>五.gitee地址</h2><p><a href="https://gitee.com/macongxuexi/RabbitMQDemo.git">https://gitee.com/macongxuexi/RabbitMQDemo.git</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="消息队列" scheme="https://macongmc.github.io/categories/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
    <category term="RabbitMQ" scheme="https://macongmc.github.io/categories/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/RabbitMQ/"/>
    
    
    <category term="消息队列" scheme="https://macongmc.github.io/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>Redis</title>
    <link href="https://macongmc.github.io/posts/bae4ff13.html"/>
    <id>https://macongmc.github.io/posts/bae4ff13.html</id>
    <published>2022-08-17T09:51:43.000Z</published>
    <updated>2022-08-17T09:51:43.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一-单节点Redis"><a href="#一-单节点Redis" class="headerlink" title="一.单节点Redis"></a>一.单节点Redis</h2><p>存在问题</p><p>1.数据丢失问题</p><p>实现Redis数据持久化</p><p>2.并发能力问题</p><p>负载均衡集群   主从集群   读写分离</p><p>3.存储能力问题</p><p>搭建分片集群，插槽机制实现动态扩容。</p><p>4.故障恢复问题</p><p>哨兵机制</p><h2 id="二-Redis持久化"><a href="#二-Redis持久化" class="headerlink" title="二.Redis持久化"></a>二.Redis持久化</h2><h3 id="1-RDB持久化"><a href="#1-RDB持久化" class="headerlink" title="1.RDB持久化"></a>1.RDB持久化</h3><p>备份机制，也叫快照</p><p>主进程   单线程</p><pre class="line-numbers language-none"><code class="language-none">redis-clisave<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>数据写入磁盘</p><p>快结束执行</p><p>缺点：单线程使用不能执行别得操作。</p><p>推荐</p><p>用额外得线程执行，主进行不受影响   后台异步</p><pre class="line-numbers language-none"><code class="language-none">bgsave<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>运行过程中执行</p><p>后台备份</p><p><strong>停机时会主动一次RDB</strong></p><p>当突然宕机导致数据丢失，再Redis.conf 的配置文件中</p><p>修改触发机制</p><pre class="line-numbers language-none"><code class="language-none">#900秒内，如果至少有一个key被修改执行bgsavesave "" #禁用RDBsave 900 1save 300 10save 60  1000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/posts/bae4ff13/image-20220817181115089.png" class="" title="image-20220817181115089"><h3 id="2-RDB原理"><a href="#2-RDB原理" class="headerlink" title="2.RDB原理"></a>2.RDB原理</h3><p>RDB bgsave开始时会fork主进程得到子进程，子进程共享主进程的内存数据。完成fork后读取内存数据并写入RDB文件。</p><img src="/posts/bae4ff13/image-20220817182637366.png" class="" title="image-20220817182637366"><img src="/posts/bae4ff13/image-20220817182916234.png" class="" title="image-20220817182916234"><h3 id="3-AOF"><a href="#3-AOF" class="headerlink" title="3.AOF"></a>3.AOF</h3><p>AOF：Redis处理的每一个写命令都会记录再AOF文件中，可以看做是命令日志文件。</p><img src="/posts/bae4ff13/image-20220817183341834.png" class="" title="image-20220817183341834"><h3 id=""><a href="#" class="headerlink" title=""></a><img src="/posts/bae4ff13/image-20220817183414540.png" class="" title="image-20220817183414540"></h3><p>AOF频率：  主进程</p><img src="/posts/bae4ff13/image-20220817183454021.png" class="" title="image-20220817183454021"><img src="/posts/bae4ff13/image-20220817183717261.png" class="" title="image-20220817183717261"><pre class="line-numbers language-none"><code class="language-none">执行 bgrewriteaof   压缩体积后台异步执行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><img src="/posts/bae4ff13/image-20220817184522557.png" class="" title="image-20220817184522557"><img src="/posts/bae4ff13/image-20220817184729838.png" class="" title="image-20220817184729838"><p>触发重写机制</p><p>两者之间的优缺点</p><img src="/posts/bae4ff13/image-20220817185050972.png" class="" title="image-20220817185050972"><p>redis和AOF结合使用</p><p>AOF　</p><p>优点：</p><p>数据更完整，秒级数据丢失(取决于设置fsync策略)。</p><p>兼容性较高，由于是基于redis通讯协议而形成的命令追加方式，无论何种版本的redis都兼容，再者aof文件是明文的，可阅读性较好。</p><p>缺点：</p><p>数据文件体积较大,即使有重写机制，但是在相同的数据集情况下，AOF文件通常比RDB文件大。</p><p>相对RDB方式，AOF速度慢于RDB，并且在数据量大时候，恢复速度AOF速度也是慢于RDB。</p><p>由于频繁地将命令同步到文件中，AOF持久化对性能的影响相对RDB较大，但是对于我们来说是可以接受的。</p><h3 id="4-混合使用"><a href="#4-混合使用" class="headerlink" title="4.混合使用"></a>4.混合使用</h3><p>优点：</p><p>混合持久化结合了RDB持久化 和 AOF 持久化的优点, 由于绝大部分都是RDB格式，加载速度快，同时结合AOF，增量的数据以AOF方式保存了，数据更少的丢失。</p><p>缺点：</p><p>兼容性差，一旦开启了混合持久化，同时由于前部分是RDB格式，阅读性较差</p><p>混合模式开关设置：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">aof-use-rdb-preamble y<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>混合模式兼顾了RDB数据恢复快以及AOF数据完整性的优点。</p><p>bgrewirteof的触发机制是怎样的呢？</p><pre class="line-numbers language-none"><code class="language-none">auto-aof-rewrite-percentage 100auto-aof-rewrite-min-size 64mb<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol><li>新启动空闲实例，开启混合持久化功能，写入数据，此时AOF文件内容是操作指令；</li><li>执行AOF重写功能，fork()的子进程会把共享内存中所有的数据以RDB形式写到AOF临时文件中，然后继续把重写缓冲区中的增量数据以操作指令类型到AOF临时文件中，最后用AOF临时文件替换原AOF文件，AOF重写完成；</li><li>继续写入数据，此时写入的新数据依然是操作指令类型；</li><li>执行AOF重写，重复步骤2操作….. ；</li><li>Redis重启，此时会加载AOF文件(前面部分是二进制数据，后面部分是指令数据的AOF文件)置内存；</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Redis" scheme="https://macongmc.github.io/categories/Redis/"/>
    
    <category term="分布式缓存" scheme="https://macongmc.github.io/categories/Redis/%E5%88%86%E5%B8%83%E5%BC%8F%E7%BC%93%E5%AD%98/"/>
    
    
    <category term="API" scheme="https://macongmc.github.io/tags/API/"/>
    
  </entry>
  
  <entry>
    <title>jenkins(三）</title>
    <link href="https://macongmc.github.io/posts/a5cd10b.html"/>
    <id>https://macongmc.github.io/posts/a5cd10b.html</id>
    <published>2022-08-12T14:10:48.000Z</published>
    <updated>2022-08-12T14:10:48.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一-gitliab自动构建项目"><a href="#一-gitliab自动构建项目" class="headerlink" title="一.gitliab自动构建项目"></a>一.gitliab自动构建项目</h2><p>选择构建触发器<img src="/posts/a5cd10b/20220812221544.png" class="" width="20220812221544"></p><p>点击触发远程构建</p><img src="/posts/a5cd10b/20220812221741.png" class="" width="20220812221741"><p>在gitlab中头像设置 Access Tokens 最后找到令牌写入。</p><p>在浏览器中输入 </p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">JENKINS_URL/job/first/build?token<span class="token operator">=</span>TOKEN_NAME <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以直接构建。</p><p>通过配置地址来让gitLab进行构建。</p><p>注意：跨浏览器会要求登录。</p><p>解决在Jenkins安装<a href="https://plugins.jenkins.io/build-token-root">Build Authorization Token Root Plugin</a></p><p>用于免登录jenkins</p><p>使用如下地址配置</p><pre class="line-numbers language-none"><code class="language-none">JENKINS_URL/buildByToken/build?job=NAME&amp;token=SECRET.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用gitlab</p><p>在项目中的设置选择集成</p><img src="/posts/a5cd10b/20220812224141.png" class="" width="20220812224141"><p>填写相应的url 和令牌</p><p>选择触发方式。</p><p>去掉ssl</p><img src="/posts/a5cd10b/20220812224553.png" class="" width="20220812224553"><p>把网络勾上。</p><p>添加成功后测试</p><img src="/posts/a5cd10b/20220812225121.png" class="" width="20220812225121"><h2 id="二-几种构建触发器详情"><a href="#二-几种构建触发器详情" class="headerlink" title="二.几种构建触发器详情"></a>二.几种构建触发器详情</h2><img src="/posts/a5cd10b/20220813110834.png" class="" width="20220813110834"><p>Build whenever a SNAPSHOT dependency is built</p><pre class="line-numbers language-none"><code class="language-none">依赖快照<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>触发远程构建</p><pre class="line-numbers language-none"><code class="language-none">gitLab<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其他工程构建后触发</p><pre class="line-numbers language-none"><code class="language-none">父子项目，先子项目，后父项目<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>定时构建</p><pre class="line-numbers language-none"><code class="language-none">表达式<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>gitHub</p><pre class="line-numbers language-none"><code class="language-none">git 托管<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>轮询</p><pre class="line-numbers language-none"><code class="language-none">定时，查看是否发生变化   也是时间表达式<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="三-配置邮箱"><a href="#三-配置邮箱" class="headerlink" title="三.配置邮箱"></a>三.配置邮箱</h2><h3 id="1-首先注册一个网易邮箱"><a href="#1-首先注册一个网易邮箱" class="headerlink" title="1.首先注册一个网易邮箱"></a>1.首先注册一个网易邮箱</h3><img src="/posts/a5cd10b/image-20220813115218234.png" class="" title="image-20220813115218234"><p>设置开启 POP3</p><pre class="line-numbers language-none"><code class="language-none">HENOQKOTQLHEJITL<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-用QQ收邮件"><a href="#2-用QQ收邮件" class="headerlink" title="2.用QQ收邮件"></a>2.用QQ收邮件</h3><h3 id="3-配置"><a href="#3-配置" class="headerlink" title="3.配置"></a>3.配置</h3><img src="/posts/a5cd10b/image-20220813113616870.png" class="" title="image-20220813113616870"><img src="/posts/a5cd10b/image-20220813113754886.png" class="" title="image-20220813113754886"><img src="/posts/a5cd10b/image-20220813113844069.png" class="" title="image-20220813113844069"><p>触发器。</p><img src="/posts/a5cd10b/image-20220813120251347.png" class="" title="image-20220813120251347"><p>后面设置测试。</p><h3 id="4-项目配置邮件"><a href="#4-项目配置邮件" class="headerlink" title="4.项目配置邮件"></a>4.项目配置邮件</h3><p>选择构建后操作</p><img src="/posts/a5cd10b/image-20220813120510511.png" class="" title="image-20220813120510511"><img src="/posts/a5cd10b/image-20220813121310824.png" class="" title="image-20220813121310824"><p>选择设置发送时机和人。</p><p>Project Recipient List</p><pre class="line-numbers language-none"><code class="language-none">收件人邮件 多个用空格隔开<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加 Project Recipient List发送</p><h2 id="四-配置钉钉机器人"><a href="#四-配置钉钉机器人" class="headerlink" title="四.配置钉钉机器人"></a>四.配置钉钉机器人</h2><p><a href="https://blog.csdn.net/belief_009/article/details/124176552?ops_request_misc=%7B%22request_id%22:%22166053125016782246491418%22,%22scm%22:%2220140713.130102334..%22%7D&amp;request_id=166053125016782246491418&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-1-124176552-null-null.142%5Ev40%5Econtrol,185%5Ev2%5Econtrol&amp;utm_term=jenkins%E9%85%8D%E7%BD%AE%E6%9C%BA%E5%99%A8%E4%BA%BA&amp;spm=1018.2226.3001.4187">(199条消息) Jenkins配置钉钉机器人_三千花灯的博客-CSDN博客_jenkins钉钉机器人</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="持续集成" scheme="https://macongmc.github.io/categories/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"/>
    
    
    <category term="Jenkins" scheme="https://macongmc.github.io/tags/Jenkins/"/>
    
  </entry>
  
  <entry>
    <title>jenkins(二）</title>
    <link href="https://macongmc.github.io/posts/47427259.html"/>
    <id>https://macongmc.github.io/posts/47427259.html</id>
    <published>2022-08-12T03:33:12.000Z</published>
    <updated>2022-08-12T03:33:12.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一-启动jenkins"><a href="#一-启动jenkins" class="headerlink" title="一.启动jenkins"></a>一.启动jenkins</h2><h3 id="1-基本配置"><a href="#1-基本配置" class="headerlink" title="1.基本配置"></a>1.基本配置</h3><p>切换到jdk11运行</p><pre class="line-numbers language-none"><code class="language-none">alternatives --config java<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>启动命令</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">nohup</span> java -jar jenkins.war --httpPort<span class="token operator">=</span><span class="token number">8383</span> <span class="token operator">&gt;</span>my.file <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token file-descriptor important">&amp;1</span> <span class="token operator">&amp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>切换回1.8</p><pre class="line-numbers language-none"><code class="language-none">alternatives --config java<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>浏览器访问</p><pre class="line-numbers language-none"><code class="language-none">http://localhost:8383<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/posts/47427259/20220812113623.png" class="" width="20220812113623"><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">cat</span> 位置查看密码<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>选择安装推荐的插件</p><img src="/posts/47427259/20220812114257.png" class="" width="20220812114257"><p>设置账户密码</p><p>成功登录</p><img src="/posts/47427259/20220812114632.png" class="" width="20220812114632"><p>在系统管理里</p><img src="/posts/47427259/20220812114709.png" class="" width="20220812114709"><p>插件管理 高级设置国内站点  </p><p>升级站点</p><pre class="line-numbers language-none"><code class="language-none">https://updates.jenkins.io/update-center.json<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-安装插件"><a href="#2-安装插件" class="headerlink" title="2.安装插件"></a>2.安装插件</h3><p>安装maven构建插件和远程连接插件。</p><p><a href="https://plugins.jenkins.io/maven-plugin">Maven Integration plugin</a></p><p><a href="https://plugins.jenkins.io/publish-over-ssh">Publish Over SSH</a></p><h2 id="二启动配置"><a href="#二启动配置" class="headerlink" title="二启动配置"></a>二启动配置</h2><p>系统管理</p><img src="/posts/47427259/20220812115405.png" class="" width="20220812115405"><p>全局工具配置</p><p>把mavn,git，jdk进行路径配置。</p><p>三.配置主机连接</p><p>系统管理的系统配置里</p><p>找到Publish over SSH</p><p>进行配置，22端口，root,主机号，以及密码。最后测试连接。</p><h2 id="三-基本使用"><a href="#三-基本使用" class="headerlink" title="三.基本使用"></a>三.基本使用</h2><h3 id="1-新建任务"><a href="#1-新建任务" class="headerlink" title="1.新建任务"></a>1.新建任务</h3><img src="/posts/47427259/20220812133707.png" class="" width="20220812133707"><p>创建一个maven项目</p><h3 id="2-General"><a href="#2-General" class="headerlink" title="2.General"></a>2.General</h3><p>项目描述</p><p>JDK选择对应项目版本</p><h3 id="3-源码管理"><a href="#3-源码管理" class="headerlink" title="3.源码管理"></a>3.源码管理</h3><p>选择git</p><img src="/posts/47427259/20220812133801.png" class="" width="20220812133801"><p>输入git仓库地址</p><p>添加凭证  及登录的账号密码</p><h3 id="4-构建触发器"><a href="#4-构建触发器" class="headerlink" title="4.构建触发器"></a>4.构建触发器</h3><p>可以选择定时构建</p><h3 id="5-构建环境"><a href="#5-构建环境" class="headerlink" title="5.构建环境"></a>5.构建环境</h3><p>Add timestamps to the Console Output</p><h3 id="6-Pre-Steps"><a href="#6-Pre-Steps" class="headerlink" title="6.Pre Steps"></a>6.Pre Steps</h3><img src="/posts/47427259/20220812133830.png" class="" width="20220812133830"><p>选择Send files or execute commands over SSH</p><img src="/posts/47427259/20220812133955.png" class="" width="20220812133955"><p>选择之前设置的主机号，如果没有设置，在系统全局配置的最后。</p><p>Source files: 要传入远程服务器的文件</p><p>默认根目录为</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">/root/.jenkins/workspace<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Remove prefix：移除外部文件</p><p>Remote directory:传入文件的目录，默认root下创建</p><pre class="line-numbers language-none"><code class="language-none">例如：xxoo   会在远程服务器的/root/xxoo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Exec command:执行命令</p><pre class="line-numbers language-none"><code class="language-none">一般设置脚本   用来结束进程，删除文件。执行脚本文件mkdir go.shchmod u+x go.shsh /root/sh/go.sh start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token shebang important">#!/bin/bash</span><span class="token assign-left variable">PID</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">ps</span> -ef <span class="token operator">|</span> <span class="token function">grep</span> demo <span class="token operator">|</span> <span class="token function">grep</span> -v <span class="token function">grep</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'{ print <span class="token variable">$2</span> }'</span><span class="token variable">)</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> -z <span class="token string">"<span class="token variable">$PID</span>"</span> <span class="token punctuation">]</span><span class="token keyword">then</span>    <span class="token builtin class-name">echo</span> Application is  stopped<span class="token keyword">else</span>    <span class="token builtin class-name">echo</span> <span class="token function">kill</span> <span class="token variable">$PID</span>    <span class="token function">kill</span> -9 <span class="token variable">$PID</span>    <span class="token function">rm</span> -rf /root/xxoo<span class="token keyword">fi</span><span class="token builtin class-name">source</span> /etc/profile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Exec command:可以使用./go.sh</p><pre class="line-numbers language-none"><code class="language-none">./go.sh  必须创建在~目录下可以传参  例如 ./go.sh demo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">appname <span class="token operator">=</span><span class="token variable">$1</span><span class="token comment">#获取参数</span><span class="token builtin class-name">echo</span> <span class="token string">"arg:<span class="token variable">$1</span>"</span>pid <span class="token operator">=</span><span class="token variable"><span class="token variable">`</span>ps-ef <span class="token operator">|</span><span class="token function">grep</span> $1 <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">'java-jar'</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'{printf <span class="token variable">$2</span>}'</span><span class="token variable">`</span></span><span class="token builtin class-name">echo</span> <span class="token variable">$pid</span><span class="token comment">#如果pid为空，提示一下，否则kill</span><span class="token keyword">if</span> <span class="token punctuation">[</span> -z <span class="token variable">$pid</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">#空值判断</span>    <span class="token keyword">then</span>          <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$appname</span> not started"</span>    eles           <span class="token function">kill</span> -9 <span class="token variable">$pid</span>           <span class="token comment">#删除历史</span>           <span class="token function">rm</span>  -rf xxoo           <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$appname</span> stoping....."</span>pid <span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">ps</span> -ef <span class="token operator">|</span> <span class="token function">grep</span> -w $pid <span class="token operator">|</span> <span class="token function">grep</span> java <span class="token variable">`</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> -z <span class="token variable">$pid</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token keyword">then</span>            <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$appname</span> pid:<span class="token variable">$pid</span> is stop"</span>       <span class="token keyword">else</span>            <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$appname</span> stop failed"</span><span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-Build"><a href="#7-Build" class="headerlink" title="7.Build"></a>7.Build</h3><img src="/posts/47427259/20220812133856.png" class="" width="20220812133856"><p>Root POM:填写gitlab中pom地址</p><p>Goals and options:填写maven打包命令</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">clean  package -Dmaven.test.skip<span class="token operator">=</span>true -Pdev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="8-Post-Steps"><a href="#8-Post-Steps" class="headerlink" title="8.Post Steps"></a>8.Post Steps</h3><img src="/posts/47427259/20220812133919.png" class="" width="20220812133919"><p>选择Send files or execute commands over SSH</p><img src="/posts/47427259/20220812133955.png" class="" width="20220812133955"><p>选择之前设置的主机号，如果没有设置，在系统全局配置的最后。</p><p>Source files: 要传入远程服务器的文件</p><p>默认根目录为</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">/root/.jenkins/workspace<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例如</p><pre class="line-numbers language-none"><code class="language-none">**/fn-safeedu*.jar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Remove prefix：移除外部文件</p><p>例如</p><pre class="line-numbers language-none"><code class="language-none">safe-edu-server/fn-safeedu/target/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Remote directory:传入文件的目录，默认root下创建</p><pre class="line-numbers language-none"><code class="language-none">例如：xxoo   会在远程服务器的/root/xxoo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">xxoo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Exec command:执行命令</p><p>执行启动命名</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">nohup</span> java -jar /root/xxoo/fn-safeedu*.jar <span class="token operator">&gt;</span>my.log.log <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token file-descriptor important">&amp;1</span> <span class="token operator">&amp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="9-构建设置"><a href="#9-构建设置" class="headerlink" title="9.构建设置"></a>9.构建设置</h3><img src="/posts/47427259/20220812140311.png" class="" width="20220812140311"><p>用于失败发送邮件</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="持续集成" scheme="https://macongmc.github.io/categories/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"/>
    
    
    <category term="Jenkins" scheme="https://macongmc.github.io/tags/Jenkins/"/>
    
  </entry>
  
  <entry>
    <title>jenkisn(一）</title>
    <link href="https://macongmc.github.io/posts/cd651f5d.html"/>
    <id>https://macongmc.github.io/posts/cd651f5d.html</id>
    <published>2022-08-12T03:11:41.000Z</published>
    <updated>2022-08-12T03:11:41.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一-环境需求"><a href="#一-环境需求" class="headerlink" title="一.环境需求"></a>一.环境需求</h2><p>jenkins最新版目前需要JDK11。</p><p>环境需求：jdk,mavn,git.</p><p>jdk采取linux多环境安装。</p><h2 id="二-安装JDK"><a href="#二-安装JDK" class="headerlink" title="二.安装JDK"></a>二.安装JDK</h2><h3 id="1-下载JDK8和JDK11"><a href="#1-下载JDK8和JDK11" class="headerlink" title="1.下载JDK8和JDK11"></a>1.下载JDK8和JDK11</h3><p>linux安装多版本</p><p>百度网盘<a href="https://pan.baidu.com/s/1UybyZL9fg4aWBZQLAbzHrA">https://pan.baidu.com/s/1UybyZL9fg4aWBZQLAbzHrA</a></p><p>提取码：7777</p><p>解压两个JDK</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">tar</span> zxvf jdk-8u181-linux-x64.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>设置环境变量</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">vim <span class="token operator">/</span>etc<span class="token operator">/</span>profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>配置</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token builtin class-name">export</span> <span class="token assign-left variable">JAVA_HOME</span><span class="token operator">=</span>/usr/local/jdk/jdk1.8.0_181<span class="token builtin class-name">export</span> <span class="token assign-left variable">CLASSPATH</span><span class="token operator">=</span>$:CLASSPATH:<span class="token variable">$JAVA_HOME</span>/lib/<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span><span class="token builtin class-name">:</span><span class="token variable">$JAVA_HOME</span>/bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token builtin class-name">source</span> /etc/profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>1.8设置为默认JDK</p><h3 id="2-多版本配置"><a href="#2-多版本配置" class="headerlink" title="2.多版本配置"></a>2.多版本配置</h3><p>查看JDK是否存在</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">alternatives --config java<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>根据数字动态切换JDK</p><p>添加两个版本的JDK</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">alternatives --install /usr/bin/java java /usr/local/java/jdk1.8.0_152/bin/java 序号<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="三-安装maven"><a href="#三-安装maven" class="headerlink" title="三.安装maven"></a>三.安装maven</h2><p>下载地址：<a href="https://maven.apache.org/download.cgi">https://maven.apache.org/download.cgi</a></p><p>解压</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">tar</span> zxvf apache-maven-3.8.6-bin.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改仓库</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">vi <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>maven<span class="token operator">/</span>apache<span class="token operator">-</span>maven<span class="token operator">-</span><span class="token number">3.6</span><span class="token number">.1</span><span class="token operator">/</span>conf<span class="token operator">/</span>settings<span class="token punctuation">.</span>xml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>配置阿里云镜像</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token operator">&lt;</span>mirror<span class="token operator">&gt;</span><span class="token operator">&lt;</span>id<span class="token operator">&gt;</span>alimaven<span class="token operator">&lt;</span>/id<span class="token operator">&gt;</span><span class="token operator">&lt;</span>mirrorOf<span class="token operator">&gt;</span>central<span class="token operator">&lt;</span>/mirrorOf<span class="token operator">&gt;</span><span class="token operator">&lt;</span>name<span class="token operator">&gt;</span>aliyun maven<span class="token operator">&lt;</span>/name<span class="token operator">&gt;</span><span class="token operator">&lt;</span>url<span class="token operator">&gt;</span>http://maven.aliyun.com/nexus/content/repositories/central/<span class="token operator">&lt;</span>/url<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/mirror<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置环境变量</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token builtin class-name">export</span> <span class="token assign-left variable">MAVEN_HOME</span><span class="token operator">=</span>/usr/local/maven/apache-maven-3.6.1<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span><span class="token builtin class-name">:</span><span class="token variable">$MAVEN_HOME</span>/bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>赋权限</p><pre class="line-numbers language-none"><code class="language-none">chmod 777 /usr/local/maven/apache-maven-3.6.1/bin/mvn<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>刷新运行</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token builtin class-name">source</span> /etc/profilemvn-v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="四-安装git"><a href="#四-安装git" class="headerlink" title="四.安装git"></a>四.安装git</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yum -y <span class="token function">install</span> <span class="token function">git</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">git version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="五-安装jenkinx"><a href="#五-安装jenkinx" class="headerlink" title="五.安装jenkinx"></a>五.安装jenkinx</h2><p>下载地址：<a href="https://www.jenkins.io/download/">Jenkins download and deployment</a></p><p>采用：war包下载</p><p>运行：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">nohup</span> java -jar jenkins.war --httpPort<span class="token operator">=</span><span class="token number">8383</span> <span class="token operator">&gt;</span>my.file <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token file-descriptor important">&amp;1</span> <span class="token operator">&amp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如有空指针</p><pre class="line-numbers language-none"><code class="language-none">yum -y install fontconfig<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="持续集成" scheme="https://macongmc.github.io/categories/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"/>
    
    
    <category term="Jenkins" scheme="https://macongmc.github.io/tags/Jenkins/"/>
    
  </entry>
  
  <entry>
    <title>Linux手册</title>
    <link href="https://macongmc.github.io/posts/4e543b07.html"/>
    <id>https://macongmc.github.io/posts/4e543b07.html</id>
    <published>2022-08-12T02:54:09.000Z</published>
    <updated>2022-08-12T02:54:09.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="一-多版本JDK"><a href="#一-多版本JDK" class="headerlink" title="一.多版本JDK"></a>一.多版本JDK</h2><p>1.下载多个版本JDK依赖</p><p>下载jdk1.8</p><p>下载jdk11</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">alternatives --install /usr/bin/java java /usr/local/java/jdk1.8.0_152/bin/java 序号<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">alternatives --config java<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>选择版本</p><h2 id="二-防火墙"><a href="#二-防火墙" class="headerlink" title="二.防火墙"></a>二.防火墙</h2><p>设置防火墙允许http服务</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> firewall-cmd --add-service<span class="token operator">=</span>http --permanent<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>设置防火墙打开8080端口</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> firewall-cmd --add-port<span class="token operator">=</span><span class="token number">8080</span>/tcp --permanent<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>命令重启防火墙</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> firewall-cmd --reload<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>看防火墙开启还是关闭</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">systemctl status firewalld.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以查看端口开放情况</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> firewall-cmd --list-all<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="三-shell脚本"><a href="#三-shell脚本" class="headerlink" title="三.shell脚本"></a>三.shell脚本</h2><p>赋权限</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">chmod</span> u+x 文件名称<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>基本脚本</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">#<span class="token operator">!</span><span class="token operator">/</span>bin<span class="token operator">/</span>bashPID<span class="token operator">=</span>$<span class="token punctuation">(</span>ps <span class="token operator">-</span>ef <span class="token operator">|</span> grep fn<span class="token operator">-</span>safeedu <span class="token operator">|</span> grep <span class="token operator">-</span>v grep <span class="token operator">|</span> awk <span class="token string">'{ print $2 }'</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">-</span>z <span class="token string">"$PID"</span> <span class="token punctuation">]</span>then    echo <span class="token class-name">Application</span> is  stopped<span class="token keyword">else</span>    echo kill $PID    kill <span class="token operator">-</span><span class="token number">9</span> $PID    rm <span class="token operator">-</span>rf <span class="token operator">/</span>root<span class="token operator">/</span>xxoofisource <span class="token operator">/</span>etc<span class="token operator">/</span>profile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四-后端运行java"><a href="#四-后端运行java" class="headerlink" title="四.后端运行java"></a>四.后端运行java</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">nohup</span> java -jar /root/xxoo/fn-safeedu*.jar <span class="token operator">&gt;</span>my.log.log <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token file-descriptor important">&amp;1</span> <span class="token operator">&amp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Linux" scheme="https://macongmc.github.io/categories/Linux/"/>
    
    
    <category term="linux" scheme="https://macongmc.github.io/tags/linux/"/>
    
    <category term="多版本jdk" scheme="https://macongmc.github.io/tags/%E5%A4%9A%E7%89%88%E6%9C%ACjdk/"/>
    
  </entry>
  
  <entry>
    <title>分布式任务调度-xxl-job</title>
    <link href="https://macongmc.github.io/posts/cfbe074.html"/>
    <id>https://macongmc.github.io/posts/cfbe074.html</id>
    <published>2022-08-10T02:16:19.000Z</published>
    <updated>2022-08-10T02:16:19.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一-分布式任务调度-xxl-job"><a href="#一-分布式任务调度-xxl-job" class="headerlink" title="一.分布式任务调度-xxl-job"></a>一.分布式任务调度-xxl-job</h2><h3 id="1-文档地址"><a href="#1-文档地址" class="headerlink" title="1.文档地址"></a>1.文档地址</h3><p><a href="https://www.xuxueli.com/xxl-job/">文档地址</a><br><a href="https://gitee.com/xuxueli0323/xxl-job">源码地址</a></p><h3 id="2-环境"><a href="#2-环境" class="headerlink" title="2.环境"></a>2.环境</h3><ul><li>Maven3+</li><li>Jdk1.8+</li><li>Mysql5.7+</li></ul><h3 id="3-初始化数据库"><a href="#3-初始化数据库" class="headerlink" title="3.初始化数据库"></a>3.初始化数据库</h3><pre class="line-numbers language-none"><code class="language-none">- xxl_job_lock：任务调度锁表；- xxl_job_group：执行器信息表，维护任务执行器信息；- xxl_job_info：调度扩展信息表： 用于保存XXL-JOB调度任务的扩展信息，如任务分组、任务名、机器地址、执行器、执行入参和报警邮件等等；- xxl_job_log：调度日志表： 用于保存XXL-JOB任务调度的历史信息，如调度结果、执行结果、调度入参、调度机器和执行器等等；- xxl_job_logglue：任务GLUE日志：用于保存GLUE更新历史，用于支持GLUE的版本回溯功能；- xxl_job_registry：执行器注册表，维护在线的执行器和调度中心机器地址信息；- xxl_job_user：系统用户表；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调度中心支持集群部署，集群情况下各节点务必连接同一个mysql实例;</p><p>如果mysql做主从,调度中心集群节点务必强制走主库;</p><p>配置文件</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">### webserver<span class="token punctuation">.</span>port<span class="token operator">=</span><span class="token number">8888</span>server<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>context<span class="token operator">-</span>path<span class="token operator">=</span><span class="token operator">/</span>xxl<span class="token operator">-</span>job<span class="token operator">-</span>admin### actuatormanagement<span class="token punctuation">.</span>server<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>context<span class="token operator">-</span>path<span class="token operator">=</span><span class="token operator">/</span>actuatormanagement<span class="token punctuation">.</span>health<span class="token punctuation">.</span>mail<span class="token punctuation">.</span>enabled<span class="token operator">=</span><span class="token boolean">false</span>### resourcesspring<span class="token punctuation">.</span>mvc<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>load<span class="token operator">-</span>on<span class="token operator">-</span>startup<span class="token operator">=</span><span class="token number">0</span>spring<span class="token punctuation">.</span>mvc<span class="token punctuation">.</span><span class="token keyword">static</span><span class="token operator">-</span>path<span class="token operator">-</span>pattern<span class="token operator">=</span><span class="token operator">/</span><span class="token keyword">static</span><span class="token comment">/**spring.resources.static-locations=classpath:/static/### freemarkerspring.freemarker.templateLoaderPath=classpath:/templates/spring.freemarker.suffix=.ftlspring.freemarker.charset=UTF-8spring.freemarker.request-context-attribute=requestspring.freemarker.settings.number_format=0.############# mybatismybatis.mapper-locations=classpath:/mybatis-mapper/*Mapper.xml#mybatis.type-aliases-package=com.xxl.job.admin.core.model### xxl-job, datasourcespring.datasource.url=jdbc:mysql://127.0.0.1:3306/xxl_job?Unicode=true&amp;serverTimezone=Asia/Shanghai&amp;characterEncoding=UTF-8spring.datasource.username=rootspring.datasource.password=rootspring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver### datasource-poolspring.datasource.type=com.zaxxer.hikari.HikariDataSourcespring.datasource.hikari.minimum-idle=10spring.datasource.hikari.maximum-pool-size=30spring.datasource.hikari.auto-commit=truespring.datasource.hikari.idle-timeout=30000spring.datasource.hikari.pool-name=HikariCPspring.datasource.hikari.max-lifetime=900000spring.datasource.hikari.connection-timeout=10000spring.datasource.hikari.connection-test-query=SELECT 1### xxl-job, emailspring.mail.host=smtp.qq.comspring.mail.port=25spring.mail.username=xxx@qq.comspring.mail.password=xxxspring.mail.properties.mail.smtp.auth=truespring.mail.properties.mail.smtp.starttls.enable=truespring.mail.properties.mail.smtp.starttls.required=truespring.mail.properties.mail.smtp.socketFactory.class=javax.net.ssl.SSLSocketFactory### xxl-job, access tokenxxl.job.accessToken=### xxl-job, i18n (default is zh_CN, and you can choose "zh_CN", "zh_TC" and "en")xxl.job.i18n=zh_CN## xxl-job, triggerpool max sizexxl.job.triggerpool.fast.max=200xxl.job.triggerpool.slow.max=100### xxl-job, log retention daysxxl.job.logretentiondays=30</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动调度中心，默认登录账号 “admin/123456”, 登录后运行界面如下图所示。</p><h2 id="二-入门案例"><a href="#二-入门案例" class="headerlink" title="二.入门案例"></a>二.入门案例</h2><h3 id="1-docker"><a href="#1-docker" class="headerlink" title="1.docker"></a>1.docker</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">docker pull xuxueli<span class="token operator">/</span>xxl<span class="token operator">-</span>job<span class="token operator">-</span>admin<span class="token operator">:</span><span class="token number">2.3</span><span class="token number">.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker run -e <span class="token assign-left variable">PARAMS</span><span class="token operator">=</span><span class="token string">"--spring.datasource.url=jdbc:mysql://192.168.200.130:3306/xxl_job?Unicode=true&amp;characterEncoding=UTF-8 \--spring.datasource.username=root \--spring.datasource.password=root"</span> <span class="token punctuation">\</span>-p <span class="token number">8888</span>:8080 -v /tmp:/data/applogs <span class="token punctuation">\</span>--name xxl-job-admin --restart<span class="token operator">=</span>always  -d xuxueli/xxl-job-admin:2.3.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.依赖</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token generics"><span class="token punctuation">&lt;</span>dependencies<span class="token punctuation">&gt;</span></span>    <span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>        <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>        <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>web<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>xxl<span class="token operator">-</span>job<span class="token operator">--</span><span class="token operator">&gt;</span>    <span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>        <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>com<span class="token punctuation">.</span>xuxueli<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>        <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>xxl<span class="token operator">-</span>job<span class="token operator">-</span>core<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>        <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">&gt;</span></span><span class="token number">2.3</span><span class="token number">.0</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>dependencies<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-jade" data-language="jade"><code class="language-jade">server:  port: 8881xxl:  job:    admin:      addresses: http://192.168.200.130:8888/xxl-job-admin    executor:      appname: xxl-job-executor-sample      port: 9999<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>xxl<span class="token punctuation">.</span>job<span class="token punctuation">.</span>core<span class="token punctuation">.</span>executor<span class="token punctuation">.</span>impl<span class="token punctuation">.</span></span><span class="token class-name">XxlJobSpringExecutor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Logger</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">LoggerFactory</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Value</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span><span class="token punctuation">;</span><span class="token comment">/** * xxl-job config * * @author xuxueli 2017-04-28 */</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XxlJobConfig</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">XxlJobConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${xxl.job.admin.addresses}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> adminAddresses<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${xxl.job.executor.appname}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> appname<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${xxl.job.executor.port}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> port<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">XxlJobSpringExecutor</span> <span class="token function">xxlJobExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; xxl-job config init."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">XxlJobSpringExecutor</span> xxlJobSpringExecutor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XxlJobSpringExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        xxlJobSpringExecutor<span class="token punctuation">.</span><span class="token function">setAdminAddresses</span><span class="token punctuation">(</span>adminAddresses<span class="token punctuation">)</span><span class="token punctuation">;</span>        xxlJobSpringExecutor<span class="token punctuation">.</span><span class="token function">setAppname</span><span class="token punctuation">(</span>appname<span class="token punctuation">)</span><span class="token punctuation">;</span>        xxlJobSpringExecutor<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> xxlJobSpringExecutor<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>xxl<span class="token punctuation">.</span>job<span class="token punctuation">.</span>core<span class="token punctuation">.</span>handler<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">XxlJob</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloJob</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@XxlJob</span><span class="token punctuation">(</span><span class="token string">"demoJobHandler"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">helloJob</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"简单任务执行了。。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行器启动</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="xxl-job" scheme="https://macongmc.github.io/categories/xxl-job/"/>
    
    
    <category term="api" scheme="https://macongmc.github.io/tags/api/"/>
    
  </entry>
  
  <entry>
    <title>计算代码行数</title>
    <link href="https://macongmc.github.io/posts/a7ab6980.html"/>
    <id>https://macongmc.github.io/posts/a7ab6980.html</id>
    <published>2022-08-10T00:41:24.000Z</published>
    <updated>2022-08-10T00:41:24.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com</span><span class="token punctuation">;</span> <span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span><span class="token class-name">Files</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span><span class="token class-name">Paths</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Objects</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>function<span class="token punctuation">.</span></span><span class="token class-name">Consumer</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>function<span class="token punctuation">.</span></span><span class="token class-name">Function</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span></span><span class="token class-name">Stream</span><span class="token punctuation">;</span> <span class="token comment">/** * Desc: 统计项目代码行数 * Created by Java指南者 on 2020-06-25 14:49 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProjectCodeCount</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">cof</span><span class="token punctuation">(</span><span class="token class-name">UncheckedConsumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> mapper<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>mapper<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> t <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                mapper<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">ncof</span><span class="token punctuation">(</span><span class="token class-name">UncheckedConsumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> mapper<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>mapper<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> t <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                mapper<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                ex<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">&gt;</span></span> <span class="token function">of</span><span class="token punctuation">(</span><span class="token class-name">UncheckedFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">&gt;</span></span> mapper<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>mapper<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> t <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> mapper<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">&gt;</span></span> <span class="token function">eof</span><span class="token punctuation">(</span><span class="token class-name">UncheckedFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">&gt;</span></span> mapper<span class="token punctuation">,</span> <span class="token class-name">Exception</span> cex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>mapper<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> t <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> mapper<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>cex <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> cex<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> ex<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>cex<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">&gt;</span></span> <span class="token function">of</span><span class="token punctuation">(</span><span class="token class-name">UncheckedFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">&gt;</span></span> mapper<span class="token punctuation">,</span> <span class="token class-name">R</span> defaultR<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>mapper<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> t <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> mapper<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                ex<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> defaultR<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token annotation punctuation">@FunctionalInterface</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">interface</span> <span class="token class-name">UncheckedFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>        <span class="token class-name">R</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token annotation punctuation">@FunctionalInterface</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">interface</span> <span class="token class-name">UncheckedConsumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>        <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token comment">/**     * 查看项目文件夹下的代码行数     *     * @param args     * @throws Exception     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> path <span class="token operator">=</span> <span class="token string">"C:\\Users\\16231\\Desktop\\test\\safe-edu-servers\\safe-edu-server"</span><span class="token punctuation">;</span>        <span class="token class-name">File</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">File</span><span class="token punctuation">[</span><span class="token punctuation">]</span> files <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>files <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> files<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> allCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">File</span> fi <span class="token operator">:</span> files<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> split <span class="token operator">=</span> fi<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>fi<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>split<span class="token punctuation">[</span>split<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">long</span> count <span class="token operator">=</span> <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">walk</span><span class="token punctuation">(</span><span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>fi<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">// 递归获得项目目录下的所有文件</span>                        <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>file <span class="token operator">-&gt;</span> <span class="token operator">!</span><span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment">// 筛选出文件</span>                        <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>file <span class="token operator">-&gt;</span> file<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">".java"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 筛选出 java 文件</span>                        <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token class-name">ProjectCodeCount</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>file <span class="token operator">-&gt;</span> <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">lines</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment">// 将会抛出受检异常的 Lambda 包装为 抛出非受检异常的 Lambda</span>                        <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>line <span class="token operator">-&gt;</span> <span class="token operator">!</span>line<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token comment">// 过滤掉空行</span>                        <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>line <span class="token operator">-&gt;</span> <span class="token operator">!</span>line<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"//"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">//过滤掉 //之类的注释</span>                        <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>line <span class="token operator">-&gt;</span> <span class="token operator">!</span><span class="token punctuation">(</span>line<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"/*"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> line<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">"*/"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">//过滤掉/* */之类的注释</span>                        <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>line <span class="token operator">-&gt;</span> <span class="token operator">!</span><span class="token punctuation">(</span>line<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"/*"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>line<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">"*/"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment">//过滤掉以 /* 开头的注释（去除空格后的开头）</span>                        <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>line <span class="token operator">-&gt;</span> <span class="token operator">!</span><span class="token punctuation">(</span><span class="token operator">!</span>line<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"/*"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> line<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">"*/"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment">//过滤掉已 */ 结尾的注释</span>                        <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>line <span class="token operator">-&gt;</span> <span class="token operator">!</span>line<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment">//过滤掉 javadoc 中的文字注释</span>                        <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>line <span class="token operator">-&gt;</span> <span class="token operator">!</span>line<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"@Override"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment">//过滤掉方法上含 @Override 的</span>                        <span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>split<span class="token punctuation">[</span>split<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" : "</span> <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>                allCount <span class="token operator">+=</span> count<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"总的代码行数："</span> <span class="token operator">+</span> allCount<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="工具篇" scheme="https://macongmc.github.io/categories/%E5%B7%A5%E5%85%B7%E7%AF%87/"/>
    
    
    <category term="计算" scheme="https://macongmc.github.io/tags/%E8%AE%A1%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>Seata</title>
    <link href="https://macongmc.github.io/posts/8d9a091c.html"/>
    <id>https://macongmc.github.io/posts/8d9a091c.html</id>
    <published>2022-08-07T14:15:44.000Z</published>
    <updated>2022-08-07T14:15:44.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一-分布式事务理论"><a href="#一-分布式事务理论" class="headerlink" title="一.分布式事务理论"></a>一.分布式事务理论</h2><h3 id="1-CAP理论"><a href="#1-CAP理论" class="headerlink" title="1.CAP理论"></a>1.CAP理论</h3><p>一个分布式系统最多只能同时满足一致性（Consistency）、可用性（Availability）和分区容错性（Partition tolerance）这三项中的两项.</p><img src="/posts/8d9a091c/v2-724268f034edc3f4cdc25586f60766a3_r.jpg" class="" title="v2-724268f034edc3f4cdc25586f60766a3_r"><h3 id="2-BASE理论"><a href="#2-BASE理论" class="headerlink" title="2.BASE理论"></a>2.BASE理论</h3><p>BASE理论是对CAP的一种解决思路，包含三个思想：</p><ul><li><strong>Basically Available</strong> <strong>（基本可用）</strong>：分布式系统在出现故障时，允许损失部分可用性，即保证核心可用。</li><li><strong>Soft State（软状态）：</strong>在一定时间内，允许出现中间状态，比如临时的不一致状态。</li><li><strong>Eventually Consistent（最终一致性）</strong>：虽然无法保证强一致性，但是在软状态结束后，最终达到数据一致。</li></ul><h3 id="3-解决思路"><a href="#3-解决思路" class="headerlink" title="3.解决思路"></a>3.解决思路</h3><p>分布式事务最大的问题是各个子事务的一致性问题，因此可以借鉴CAP定理和BASE理论，有两种解决思路：</p><ul><li>AP模式：各子事务分别执行和提交，允许出现结果不一致，然后采用弥补措施恢复数据即可，实现最终一致。</li><li>CP模式：各个子事务执行后互相等待，同时提交，同时回滚，达成强一致。但事务等待过程中，处于弱可用状态。</li></ul><h2 id="二-seata架构"><a href="#二-seata架构" class="headerlink" title="二.seata架构"></a>二.seata架构</h2><p>Seata 是一款开源的分布式事务解决方案，致力于提供高性能和简单易用的分布式事务服务。Seata 将为用户提供了 AT、TCC、SAGA 和 XA 事务模式，为用户打造一站式的分布式解决方案。</p><p>Seata事务管理中有三个重要的角色：</p><ul><li><strong>TC (Transaction Coordinator) -</strong> <strong>事务协调者：</strong>维护全局和分支事务的状态，协调全局事务提交或回滚。</li><li><strong>TM (Transaction Manager) -</strong> <strong>事务管理器：</strong>定义全局事务的范围、开始全局事务、提交或回滚全局事务。</li><li><strong>RM (Resource Manager) -</strong> <strong>资源管理器：</strong>管理分支事务处理的资源，与TC交谈以注册分支事务和报告分支事务的状态，并驱动分支事务提交或回滚。</li></ul><img src="/posts/8d9a091c/145942191-7a2d469f-94c8-4cd2-8c7e-46ad75683636.png" class="" title="145942191-7a2d469f-94c8-4cd2-8c7e-46ad75683636"><p>Seata基于上述架构提供了四种不同的分布式事务解决方案：</p><ul><li>XA模式：强一致性分阶段事务模式，牺牲了一定的可用性，无业务侵入</li><li>TCC模式：最终一致的分阶段事务模式，有业务侵入</li><li>AT模式：最终一致的分阶段事务模式，无业务侵入，也是Seata的默认模式</li><li>SAGA模式：长事务模式，有业务侵入</li></ul><p>无论哪种方案，都离不开TC，也就是事务的协调者。</p><img src="/posts/8d9a091c/image-20210724172326452.png" class="" title="image-20210724172326452"><p><a href="https://seata.io/zh-cn/docs/overview/what-is-seata.html">Seata 官方文档</a></p><h3 id="1-部署"><a href="#1-部署" class="headerlink" title="1.部署"></a>1.部署</h3><p>首先，在order-service中引入依赖：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--seata--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-seata<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--版本较低，1.3.0，因此排除--&gt;</span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>seata-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.seata<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.seata<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>seata-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--seata starter 采用1.4.2版本--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${seata.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-配置TC地址"><a href="#2-配置TC地址" class="headerlink" title="2.配置TC地址"></a>2.配置TC地址</h3><p>在order-service中的application.yml中，配置TC服务信息，通过注册中心nacos，结合服务名称获取TC地址：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">seata</span><span class="token punctuation">:</span>  <span class="token key atrule">registry</span><span class="token punctuation">:</span> <span class="token comment"># TC服务注册中心的配置，微服务根据这些信息去注册中心获取tc服务地址</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> nacos <span class="token comment"># 注册中心类型 nacos</span>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> 127.0.0.1<span class="token punctuation">:</span><span class="token number">8848</span> <span class="token comment"># nacos地址</span>      <span class="token key atrule">namespace</span><span class="token punctuation">:</span> <span class="token string">""</span> <span class="token comment"># namespace，默认为空</span>      <span class="token key atrule">group</span><span class="token punctuation">:</span> DEFAULT_GROUP <span class="token comment"># 分组，默认是DEFAULT_GROUP</span>      <span class="token key atrule">application</span><span class="token punctuation">:</span> seata<span class="token punctuation">-</span>tc<span class="token punctuation">-</span>server <span class="token comment"># seata服务名称</span>      <span class="token key atrule">username</span><span class="token punctuation">:</span> nacos      <span class="token key atrule">password</span><span class="token punctuation">:</span> nacos  <span class="token key atrule">tx-service-group</span><span class="token punctuation">:</span> seata<span class="token punctuation">-</span>demo <span class="token comment"># 事务组名称</span>  <span class="token key atrule">service</span><span class="token punctuation">:</span>    <span class="token key atrule">vgroup-mapping</span><span class="token punctuation">:</span> <span class="token comment"># 事务组与cluster的映射关系</span>      <span class="token key atrule">seata-demo</span><span class="token punctuation">:</span> SH<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>微服务如何根据这些配置寻找TC的地址呢？</p><p>我们知道注册到Nacos中的微服务，确定一个具体实例需要四个信息：</p><ul><li>namespace：命名空间</li><li>group：分组</li><li>application：服务名</li><li>cluster：集群名</li></ul><p>以上四个信息，在刚才的yaml文件中都能找到：</p><img src="/posts/8d9a091c/image-20210724173654258-16607281848431.png" class="" title="image-20210724173654258"><p>namespace为空，就是默认的public</p><p>结合起来，TC服务的信息就是：public@DEFAULT_GROUP@seata-tc-server@SH，这样就能确定TC服务集群了。然后就可以去Nacos拉取对应的实例信息了。</p><h3 id="3-其它服务"><a href="#3-其它服务" class="headerlink" title="3.其它服务"></a>3.其它服务</h3><p>其它两个微服务也都参考order-service的步骤来做，完全一样。</p><h2 id="三-XA模式"><a href="#三-XA模式" class="headerlink" title="三.XA模式"></a>三.XA模式</h2><p>XA 规范 是 X/Open 组织定义的分布式事务处理（DTP，Distributed Transaction Processing）标准，XA 规范 描述了全局的TM与局部的RM之间的接口，几乎所有主流的数据库都对 XA 规范 提供了支持。</p><p>正常情况：</p><img src="/posts/8d9a091c/image-20220817152745255.png" class="" title="image-20220817152745255"><p>异常情况：</p><img src="/posts/8d9a091c/image-20220817152810209.png" class="" title="image-20220817152810209"><p>一阶段：</p><ul><li>事务协调者通知每个事物参与者执行本地事务</li><li>本地事务执行完成后报告事务执行状态给事务协调者，此时事务不提交，继续持有数据库锁</li></ul><p>二阶段：</p><ul><li>事务协调者基于一阶段的报告来判断下一步操作<ul><li>如果一阶段都成功，则通知所有事务参与者，提交事务</li><li>如果一阶段任意一个参与者失败，则通知所有事务参与者回滚事务</li></ul></li></ul><h3 id="1-Seata的XA模型"><a href="#1-Seata的XA模型" class="headerlink" title="1.Seata的XA模型"></a>1.Seata的XA模型</h3><p>Seata对原始的XA模式做了简单的封装和改造，以适应自己的事务模型，基本架构如图：</p><img src="/posts/8d9a091c/image-20220817171804987.png" class="" title="image-20220817171804987"><p>RM一阶段的工作：</p><p>​    ① 注册分支事务到TC</p><p>​    ② 执行分支业务sql但不提交</p><p>​    ③ 报告执行状态到TC</p><p>TC二阶段的工作：</p><ul><li><p>TC检测各分支事务执行状态</p><p>a.如果都成功，通知所有RM提交事务</p><p>b.如果有失败，通知所有RM回滚事务</p></li></ul><p>RM二阶段的工作：</p><ul><li>接收TC指令，提交或回滚事务</li></ul><h3 id="2-优缺点"><a href="#2-优缺点" class="headerlink" title="2.优缺点"></a>2.优缺点</h3><p>XA模式的优点是什么？</p><ul><li>事务的强一致性，满足ACID原则。</li><li>常用数据库都支持，实现简单，并且没有代码侵入</li></ul><p>XA模式的缺点是什么？</p><ul><li>因为一阶段需要锁定数据库资源，等待二阶段结束才释放，性能较差</li><li>依赖关系型数据库实现事务</li></ul><h3 id="3-实现XA模式"><a href="#3-实现XA模式" class="headerlink" title="3.实现XA模式"></a>3.实现XA模式</h3><p>Seata的starter已经完成了XA模式的自动装配，实现非常简单，步骤如下：</p><p>1）修改application.yml文件（每个参与事务的微服务），开启XA模式：</p><pre class="line-numbers language-none"><code class="language-none">seata:  data-source-proxy-mode: XA<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>2）给发起全局事务的入口方法添加@GlobalTransactional注解:</p><p>本例中是OrderServiceImpl中的create方法.</p><img src="/posts/8d9a091c/image-20220817172124723.png" class="" title="image-20220817172124723"><p>3）重启服务并测试</p><p>重启order-service，再次测试，发现无论怎样，三个微服务都能成功回滚。</p><h2 id="四-AT模式"><a href="#四-AT模式" class="headerlink" title="四.AT模式"></a>四.AT模式</h2><p>AT模式同样是分阶段提交的事务模型，不过缺弥补了XA模型中资源锁定周期过长的缺陷。</p><h3 id="4-2-1-Seata的AT模型"><a href="#4-2-1-Seata的AT模型" class="headerlink" title="4.2.1.Seata的AT模型"></a>4.2.1.Seata的AT模型</h3><p>基本流程图：</p><img src="/posts/8d9a091c/image-20210724175327511-16607285012952.png" class="" title="image-20210724175327511"><p>阶段一RM的工作：</p><ul><li>注册分支事务</li><li>记录undo-log（数据快照）</li><li>执行业务sql并提交</li><li>报告事务状态</li></ul><p>阶段二提交时RM的工作：</p><ul><li>删除undo-log即可</li></ul><p>阶段二回滚时RM的工作：</p><ul><li>根据undo-log恢复数据到更新前</li></ul><h3 id="4-2-2-流程梳理"><a href="#4-2-2-流程梳理" class="headerlink" title="4.2.2.流程梳理"></a>4.2.2.流程梳理</h3><p>我们用一个真实的业务来梳理下AT模式的原理。</p><p>比如，现在又一个数据库表，记录用户余额：</p><table><thead><tr><th><strong>id</strong></th><th><strong>money</strong></th></tr></thead><tbody><tr><td>1</td><td>100</td></tr></tbody></table><p>其中一个分支业务要执行的SQL为：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">update</span> tb_account <span class="token keyword">set</span> money <span class="token operator">=</span> money <span class="token operator">-</span> <span class="token number">10</span> <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>AT模式下，当前分支事务执行流程如下：</p><p>一阶段：</p><p>1）TM发起并注册全局事务到TC</p><p>2）TM调用分支事务</p><p>3）分支事务准备执行业务SQL</p><p>4）RM拦截业务SQL，根据where条件查询原始数据，形成快照。</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token property">"money"</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>5）RM执行业务SQL，提交本地事务，释放数据库锁。此时 <code>money = 90</code></p><p>6）RM报告本地事务状态给TC</p><p>二阶段：</p><p>1）TM通知TC事务结束</p><p>2）TC检查分支事务状态</p><p>​     a）如果都成功，则立即删除快照</p><p>​     b）如果有分支事务失败，需要回滚。读取快照数据（<code>{"id": 1, "money": 100}</code>），将快照恢复到数据库。此时数据库再次恢复为100</p><p>流程图：</p><img src="/posts/8d9a091c/image-20210724180722921-16607285012963.png" class="" title="image-20210724180722921"><h3 id="4-2-3-AT与XA的区别"><a href="#4-2-3-AT与XA的区别" class="headerlink" title="4.2.3.AT与XA的区别"></a>4.2.3.AT与XA的区别</h3><p>简述AT模式与XA模式最大的区别是什么？</p><ul><li>XA模式一阶段不提交事务，锁定资源；AT模式一阶段直接提交，不锁定资源。</li><li>XA模式依赖数据库机制实现回滚；AT模式利用数据快照实现数据回滚。</li><li>XA模式强一致；AT模式最终一致</li></ul><h3 id="4-2-4-脏写问题"><a href="#4-2-4-脏写问题" class="headerlink" title="4.2.4.脏写问题"></a>4.2.4.脏写问题</h3><p>在多线程并发访问AT模式的分布式事务时，有可能出现脏写问题，如图：</p><img src="/posts/8d9a091c/image-20210724181541234-16607285012964.png" class="" title="image-20210724181541234"><p>解决思路就是引入了全局锁的概念。在释放DB锁之前，先拿到全局锁。避免同一时刻有另外一个事务来操作当前数据。</p><img src="/posts/8d9a091c/image-20210724181843029-16607285012965.png" class="" title="image-20210724181843029"><h3 id="4-2-5-优缺点"><a href="#4-2-5-优缺点" class="headerlink" title="4.2.5.优缺点"></a>4.2.5.优缺点</h3><p>AT模式的优点：</p><ul><li>一阶段完成直接提交事务，释放数据库资源，性能比较好</li><li>利用全局锁实现读写隔离</li><li>没有代码侵入，框架自动完成回滚和提交</li></ul><p>AT模式的缺点：</p><ul><li>两阶段之间属于软状态，属于最终一致</li><li>框架的快照功能会影响性能，但比XA模式要好很多</li></ul><h3 id="4-2-6-实现AT模式"><a href="#4-2-6-实现AT模式" class="headerlink" title="4.2.6.实现AT模式"></a>4.2.6.实现AT模式</h3><p>AT模式中的快照生成、回滚等动作都是由框架自动完成，没有任何代码侵入，因此实现非常简单。</p><p>只不过，AT模式需要一个表来记录全局锁、另一张表来记录数据快照undo_log。</p><p>1）导入数据库表，记录全局锁</p><p>导入课前资料提供的Sql文件：seata-at.sql，其中lock_table导入到TC服务关联的数据库，undo_log表导入到微服务关联的数据库：</p><img src="/posts/8d9a091c/image-20210724182217272-16607285012966.png" class="" title="image-20210724182217272"><p>2）修改application.yml文件，将事务模式修改为AT模式即可：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">seata</span><span class="token punctuation">:</span>  <span class="token key atrule">data-source-proxy-mode</span><span class="token punctuation">:</span> AT <span class="token comment"># 默认就是AT</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>3）重启服务并测试</p><h2 id="4-3-TCC模式"><a href="#4-3-TCC模式" class="headerlink" title="4.3.TCC模式"></a>4.3.TCC模式</h2><p>TCC模式与AT模式非常相似，每阶段都是独立事务，不同的是TCC通过人工编码来实现数据恢复。需要实现三个方法：</p><ul><li><p>Try：资源的检测和预留； </p></li><li><p>Confirm：完成资源操作业务；要求 Try 成功 Confirm 一定要能成功。</p></li><li><p>Cancel：预留资源释放，可以理解为try的反向操作。</p></li></ul><h3 id="4-3-1-流程分析"><a href="#4-3-1-流程分析" class="headerlink" title="4.3.1.流程分析"></a>4.3.1.流程分析</h3><p>举例，一个扣减用户余额的业务。假设账户A原来余额是100，需要余额扣减30元。</p><ul><li><strong>阶段一（ Try ）</strong>：检查余额是否充足，如果充足则冻结金额增加30元，可用余额扣除30</li></ul><p>初识余额：</p><img src="/posts/8d9a091c/image-20210724182424907-16607285012967.png" class="" title="image-20210724182424907"><p>余额充足，可以冻结：</p><img src="/posts/8d9a091c/image-20210724182457951-16607285012968.png" class="" title="image-20210724182457951"><p>此时，总金额 = 冻结金额 + 可用金额，数量依然是100不变。事务直接提交无需等待其它事务。</p><ul><li>**阶段二（Confirm)**：假如要提交（Confirm），则冻结金额扣减30</li></ul><p>确认可以提交，不过之前可用金额已经扣减过了，这里只要清除冻结金额就好了：</p><img src="/posts/8d9a091c/image-20210724182706011-16607285012969.png" class="" title="image-20210724182706011"><p>此时，总金额 = 冻结金额 + 可用金额 = 0 + 70  = 70元</p><ul><li>**阶段二(Canncel)**：如果要回滚（Cancel），则冻结金额扣减30，可用余额增加30</li></ul><p>需要回滚，那么就要释放冻结金额，恢复可用金额：</p><img src="/posts/8d9a091c/image-20210724182810734-166072850129610.png" class="" title="image-20210724182810734"><h3 id="4-3-2-Seata的TCC模型"><a href="#4-3-2-Seata的TCC模型" class="headerlink" title="4.3.2.Seata的TCC模型"></a>4.3.2.Seata的TCC模型</h3><p>Seata中的TCC模型依然延续之前的事务架构，如图：</p><img src="/posts/8d9a091c/image-20210724182937713-166072850129611.png" class="" title="image-20210724182937713"><h3 id="4-3-3-优缺点"><a href="#4-3-3-优缺点" class="headerlink" title="4.3.3.优缺点"></a>4.3.3.优缺点</h3><p>TCC模式的每个阶段是做什么的？</p><ul><li>Try：资源检查和预留</li><li>Confirm：业务执行和提交</li><li>Cancel：预留资源的释放</li></ul><p>TCC的优点是什么？</p><ul><li>一阶段完成直接提交事务，释放数据库资源，性能好</li><li>相比AT模型，无需生成快照，无需使用全局锁，性能最强</li><li>不依赖数据库事务，而是依赖补偿操作，可以用于非事务型数据库</li></ul><p>TCC的缺点是什么？</p><ul><li>有代码侵入，需要人为编写try、Confirm和Cancel接口，太麻烦</li><li>软状态，事务是最终一致</li><li>需要考虑Confirm和Cancel的失败情况，做好幂等处理</li></ul><h3 id="4-3-4-事务悬挂和空回滚"><a href="#4-3-4-事务悬挂和空回滚" class="headerlink" title="4.3.4.事务悬挂和空回滚"></a>4.3.4.事务悬挂和空回滚</h3><h4 id="1）空回滚"><a href="#1）空回滚" class="headerlink" title="1）空回滚"></a>1）空回滚</h4><p>当某分支事务的try阶段<strong>阻塞</strong>时，可能导致全局事务超时而触发二阶段的cancel操作。在未执行try操作时先执行了cancel操作，这时cancel不能做回滚，就是<strong>空回滚</strong>。</p><p>如图：</p><img src="/posts/8d9a091c/image-20210724183426891-166072850129612.png" class="" title="image-20210724183426891"><p>执行cancel操作时，应当判断try是否已经执行，如果尚未执行，则应该空回滚。</p><h4 id="2）业务悬挂"><a href="#2）业务悬挂" class="headerlink" title="2）业务悬挂"></a>2）业务悬挂</h4><p>对于已经空回滚的业务，之前被阻塞的try操作恢复，继续执行try，就永远不可能confirm或cancel ，事务一直处于中间状态，这就是<strong>业务悬挂</strong>。</p><p>执行try操作时，应当判断cancel是否已经执行过了，如果已经执行，应当阻止空回滚后的try操作，避免悬挂</p><h3 id="4-3-5-实现TCC模式"><a href="#4-3-5-实现TCC模式" class="headerlink" title="4.3.5.实现TCC模式"></a>4.3.5.实现TCC模式</h3><p>解决空回滚和业务悬挂问题，必须要记录当前事务状态，是在try、还是cancel？</p><h4 id="1）思路分析"><a href="#1）思路分析" class="headerlink" title="1）思路分析"></a>1）思路分析</h4><p>这里我们定义一张表：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>account_freeze_tbl<span class="token punctuation">`</span> <span class="token punctuation">(</span>  <span class="token punctuation">`</span>xid<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>user_id<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'用户id'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>freeze_money<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">unsigned</span> <span class="token keyword">DEFAULT</span> <span class="token string">'0'</span> <span class="token keyword">COMMENT</span> <span class="token string">'冻结金额'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>state<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'事务状态，0:try，1:confirm，2:cancel'</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>xid<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8 ROW_FORMAT<span class="token operator">=</span>COMPACT<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中：</p><ul><li>xid：是全局事务id</li><li>freeze_money：用来记录用户冻结金额</li><li>state：用来记录事务状态</li></ul><p>那此时，我们的业务开怎么做呢？</p><ul><li>Try业务：<ul><li>记录冻结金额和事务状态到account_freeze表</li><li>扣减account表可用金额</li></ul></li><li>Confirm业务<ul><li>根据xid删除account_freeze表的冻结记录</li></ul></li><li>Cancel业务<ul><li>修改account_freeze表，冻结金额为0，state为2</li><li>修改account表，恢复可用金额</li></ul></li><li>如何判断是否空回滚？<ul><li>cancel业务中，根据xid查询account_freeze，如果为null则说明try还没做，需要空回滚</li></ul></li><li>如何避免业务悬挂？<ul><li>try业务中，根据xid查询account_freeze ，如果已经存在则证明Cancel已经执行，拒绝执行try业务</li></ul></li></ul><p>接下来，我们改造account-service，利用TCC实现余额扣减功能。</p><h4 id="2）声明TCC接口"><a href="#2）声明TCC接口" class="headerlink" title="2）声明TCC接口"></a>2）声明TCC接口</h4><p>TCC的Try、Confirm、Cancel方法都需要在接口中基于注解来声明，</p><p>我们在account-service项目中的<code>cn.itcast.account.service</code>包中新建一个接口，声明TCC三个接口：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>itcast<span class="token punctuation">.</span>account<span class="token punctuation">.</span>service</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">io<span class="token punctuation">.</span>seata<span class="token punctuation">.</span>rm<span class="token punctuation">.</span>tcc<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">BusinessActionContext</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">io<span class="token punctuation">.</span>seata<span class="token punctuation">.</span>rm<span class="token punctuation">.</span>tcc<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">BusinessActionContextParameter</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">io<span class="token punctuation">.</span>seata<span class="token punctuation">.</span>rm<span class="token punctuation">.</span>tcc<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">LocalTCC</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">io<span class="token punctuation">.</span>seata<span class="token punctuation">.</span>rm<span class="token punctuation">.</span>tcc<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">TwoPhaseBusinessAction</span><span class="token punctuation">;</span><span class="token annotation punctuation">@LocalTCC</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AccountTCCService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@TwoPhaseBusinessAction</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"deduct"</span><span class="token punctuation">,</span> commitMethod <span class="token operator">=</span> <span class="token string">"confirm"</span><span class="token punctuation">,</span> rollbackMethod <span class="token operator">=</span> <span class="token string">"cancel"</span><span class="token punctuation">)</span>    <span class="token keyword">void</span> <span class="token function">deduct</span><span class="token punctuation">(</span><span class="token annotation punctuation">@BusinessActionContextParameter</span><span class="token punctuation">(</span>paramName <span class="token operator">=</span> <span class="token string">"userId"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> userId<span class="token punctuation">,</span>                <span class="token annotation punctuation">@BusinessActionContextParameter</span><span class="token punctuation">(</span>paramName <span class="token operator">=</span> <span class="token string">"money"</span><span class="token punctuation">)</span><span class="token keyword">int</span> money<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">confirm</span><span class="token punctuation">(</span><span class="token class-name">BusinessActionContext</span> ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token class-name">BusinessActionContext</span> ctx<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3）编写实现类"><a href="#3）编写实现类" class="headerlink" title="3）编写实现类"></a>3）编写实现类</h4><p>在account-service服务中的<code>cn.itcast.account.service.impl</code>包下新建一个类，实现TCC业务：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>itcast<span class="token punctuation">.</span>account<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">cn<span class="token punctuation">.</span>itcast<span class="token punctuation">.</span>account<span class="token punctuation">.</span>entity<span class="token punctuation">.</span></span><span class="token class-name">AccountFreeze</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">cn<span class="token punctuation">.</span>itcast<span class="token punctuation">.</span>account<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span></span><span class="token class-name">AccountFreezeMapper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">cn<span class="token punctuation">.</span>itcast<span class="token punctuation">.</span>account<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span></span><span class="token class-name">AccountMapper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">cn<span class="token punctuation">.</span>itcast<span class="token punctuation">.</span>account<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">AccountTCCService</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">io<span class="token punctuation">.</span>seata<span class="token punctuation">.</span>core<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">RootContext</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">io<span class="token punctuation">.</span>seata<span class="token punctuation">.</span>rm<span class="token punctuation">.</span>tcc<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">BusinessActionContext</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Service</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Transactional</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Service</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountTCCServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">AccountTCCService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">AccountMapper</span> accountMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">AccountFreezeMapper</span> freezeMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token annotation punctuation">@Transactional</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deduct</span><span class="token punctuation">(</span><span class="token class-name">String</span> userId<span class="token punctuation">,</span> <span class="token keyword">int</span> money<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 0.获取事务id</span>        <span class="token class-name">String</span> xid <span class="token operator">=</span> <span class="token class-name">RootContext</span><span class="token punctuation">.</span><span class="token function">getXID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 1.扣减可用余额</span>        accountMapper<span class="token punctuation">.</span><span class="token function">deduct</span><span class="token punctuation">(</span>userId<span class="token punctuation">,</span> money<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 2.记录冻结金额，事务状态</span>        <span class="token class-name">AccountFreeze</span> freeze <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AccountFreeze</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        freeze<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>        freeze<span class="token punctuation">.</span><span class="token function">setFreezeMoney</span><span class="token punctuation">(</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span>        freeze<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token class-name">AccountFreeze</span><span class="token punctuation">.</span><span class="token class-name">State</span><span class="token punctuation">.</span>TRY<span class="token punctuation">)</span><span class="token punctuation">;</span>        freeze<span class="token punctuation">.</span><span class="token function">setXid</span><span class="token punctuation">(</span>xid<span class="token punctuation">)</span><span class="token punctuation">;</span>        freezeMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>freeze<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">confirm</span><span class="token punctuation">(</span><span class="token class-name">BusinessActionContext</span> ctx<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 1.获取事务id</span>        <span class="token class-name">String</span> xid <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">getXid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 2.根据id删除冻结记录</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> freezeMapper<span class="token punctuation">.</span><span class="token function">deleteById</span><span class="token punctuation">(</span>xid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> count <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token class-name">BusinessActionContext</span> ctx<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 0.查询冻结记录</span>        <span class="token class-name">String</span> xid <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">getXid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">AccountFreeze</span> freeze <span class="token operator">=</span> freezeMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>xid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 1.恢复可用余额</span>        accountMapper<span class="token punctuation">.</span><span class="token function">refund</span><span class="token punctuation">(</span>freeze<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> freeze<span class="token punctuation">.</span><span class="token function">getFreezeMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 2.将冻结金额清零，状态改为CANCEL</span>        freeze<span class="token punctuation">.</span><span class="token function">setFreezeMoney</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        freeze<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token class-name">AccountFreeze</span><span class="token punctuation">.</span><span class="token class-name">State</span><span class="token punctuation">.</span>CANCEL<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> freezeMapper<span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span>freeze<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> count <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-4-SAGA模式"><a href="#4-4-SAGA模式" class="headerlink" title="4.4.SAGA模式"></a>4.4.SAGA模式</h2><p>Saga 模式是 Seata 即将开源的长事务解决方案，将由蚂蚁金服主要贡献。</p><p>其理论基础是Hector &amp; Kenneth  在1987年发表的论文<a href="https://microservices.io/patterns/data/saga.html">Sagas</a>。</p><p>Seata官网对于Saga的指南：<a href="https://seata.io/zh-cn/docs/user/saga.html">https://seata.io/zh-cn/docs/user/saga.html</a></p><h3 id="4-4-1-原理"><a href="#4-4-1-原理" class="headerlink" title="4.4.1.原理"></a>4.4.1.原理</h3><p>在 Saga 模式下，分布式事务内有多个参与者，每一个参与者都是一个冲正补偿服务，需要用户根据业务场景实现其正向操作和逆向回滚操作。</p><p>分布式事务执行过程中，依次执行各参与者的正向操作，如果所有正向操作均执行成功，那么分布式事务提交。如果任何一个正向操作执行失败，那么分布式事务会去退回去执行前面各参与者的逆向回滚操作，回滚已提交的参与者，使分布式事务回到初始状态。</p><img src="/posts/8d9a091c/image-20210724184846396-166072850129613.png" class="" title="image-20210724184846396"><p>Saga也分为两个阶段：</p><ul><li>一阶段：直接提交本地事务</li><li>二阶段：成功则什么都不做；失败则通过编写补偿业务来回滚</li></ul><h3 id="4-4-2-优缺点"><a href="#4-4-2-优缺点" class="headerlink" title="4.4.2.优缺点"></a>4.4.2.优缺点</h3><p>优点：</p><ul><li>事务参与者可以基于事件驱动实现异步调用，吞吐高</li><li>一阶段直接提交事务，无锁，性能好</li><li>不用编写TCC中的三个阶段，实现简单</li></ul><p>缺点：</p><ul><li>软状态持续时间不确定，时效性差</li><li>没有锁，没有事务隔离，会有脏写</li></ul><h2 id="4-5-四种模式对比"><a href="#4-5-四种模式对比" class="headerlink" title="4.5.四种模式对比"></a>4.5.四种模式对比</h2><p>我们从以下几个方面来对比四种实现：</p><ul><li>一致性：能否保证事务的一致性？强一致还是最终一致？</li><li>隔离性：事务之间的隔离性如何？</li><li>代码侵入：是否需要对业务代码改造？</li><li>性能：有无性能损耗？</li><li>场景：常见的业务场景</li></ul><p>如图：</p><img src="/posts/8d9a091c/image-20210724185021819-166072850129615.png" class="" title="image-20210724185021819">]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="分布式事务" scheme="https://macongmc.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/"/>
    
    
    <category term="事务" scheme="https://macongmc.github.io/tags/%E4%BA%8B%E5%8A%A1/"/>
    
    <category term="springcloud alibaba" scheme="https://macongmc.github.io/tags/springcloud-alibaba/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch</title>
    <link href="https://macongmc.github.io/posts/d32d37e5.html"/>
    <id>https://macongmc.github.io/posts/d32d37e5.html</id>
    <published>2022-08-04T13:36:58.000Z</published>
    <updated>2022-08-04T13:36:58.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一-搭建ElasticSearch环境"><a href="#一-搭建ElasticSearch环境" class="headerlink" title="一.搭建ElasticSearch环境"></a>一.搭建ElasticSearch环境</h2><p>拉去镜像</p><pre class="line-numbers language-none"><code class="language-none">docker pull elasticsearch:7.4.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>创建容器</p><pre class="line-numbers language-none"><code class="language-none">docker run -id --name elasticsearch -d --restart=always -p 9200:9200 -p 9300:9300 -v /usr/share/elasticsearch/plugins:/usr/share/elasticsearch/plugins -e "discovery.type=single-node" elasticsearch:7.4.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>配置分词器<br>把资料中的<code>elasticsearch-analysis-ik-7.4.0.zip</code>上传到服务器上,放到对应目录（plugins）解压</p><pre class="line-numbers language-none"><code class="language-none">#切换目录cd /usr/share/elasticsearch/plugins#新建目录mkdir analysis-ikcd analysis-ik#root根目录中拷贝文件mv elasticsearch-analysis-ik-7.4.0.zip /usr/share/elasticsearch/plugins/analysis-ik#解压文件cd /usr/share/elasticsearch/plugins/analysis-ikunzip elasticsearch-analysis-ik-7.4.0.zip<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二-批量导入数据库"><a href="#二-批量导入数据库" class="headerlink" title="二.批量导入数据库"></a>二.批量导入数据库</h2><h3 id="1-依赖"><a href="#1-依赖" class="headerlink" title="1.依赖"></a>1.依赖</h3><pre class="line-numbers language-none"><code class="language-none">&lt;!--elasticsearch--&gt;       &lt;dependency&gt;           &lt;groupId&gt;org.elasticsearch.client&lt;/groupId&gt;           &lt;artifactId&gt;elasticsearch-rest-high-level-client&lt;/artifactId&gt;           &lt;version&gt;7.4.0&lt;/version&gt;       &lt;/dependency&gt;       &lt;dependency&gt;           &lt;groupId&gt;org.elasticsearch.client&lt;/groupId&gt;           &lt;artifactId&gt;elasticsearch-rest-client&lt;/artifactId&gt;           &lt;version&gt;7.4.0&lt;/version&gt;       &lt;/dependency&gt;       &lt;dependency&gt;           &lt;groupId&gt;org.elasticsearch&lt;/groupId&gt;           &lt;artifactId&gt;elasticsearch&lt;/artifactId&gt;           &lt;version&gt;7.4.0&lt;/version&gt;       &lt;/dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-配置类"><a href="#2-配置类" class="headerlink" title="2.配置类"></a>2.配置类</h3><pre class="line-numbers language-none"><code class="language-none">import lombok.Getter;import lombok.Setter;import org.apache.http.HttpHost;import org.elasticsearch.client.RestClient;import org.elasticsearch.client.RestHighLevelClient;import org.springframework.boot.context.properties.ConfigurationProperties;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;@Getter@Setter@Configuration@ConfigurationProperties(prefix = "elasticsearch")public class ElasticSearchConfig {    private String host;    private int port;    @Bean    public RestHighLevelClient client(){        return new RestHighLevelClient(RestClient.builder(                new HttpHost(                        host,                        port,                        "http"                )        ));    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-配置文件"><a href="#3-配置文件" class="headerlink" title="3.配置文件"></a>3.配置文件</h3><pre class="line-numbers language-none"><code class="language-none">server:  port: 9999spring:  application:    name: es-article  datasource:    driver-class-name: com.mysql.jdbc.Driver    url: jdbc:mysql://82.157.254.101:3306/leadnews_article?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=UTC    username:     password: # 设置Mapper接口所对应的XML文件位置，如果你在Mapper接口中有自定义方法，需要进行该配置mybatis-plus:  mapper-locations: classpath*:mapper/*.xml  # 设置别名包扫描路径，通过该属性可以给包中的类注册别名  type-aliases-package: com.heima.model.article.pojos#自定义elasticsearch连接配置elasticsearch:  host: 82.157.254.101  port: 9200<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-代码"><a href="#4-代码" class="headerlink" title="4.代码"></a>4.代码</h3><pre class="line-numbers language-none"><code class="language-none">@SpringBootTest@RunWith(SpringRunner.class)public class ApArticleTest {    @Autowired    private ApArticleMapper apArticleMapper;    @Autowired    private RestHighLevelClient restHighLevelClient;    /**     * 注意：数据量的导入，如果数据量过大，需要分页导入     * @throws Exception     */    /**     * 注意：数据量的导入，如果数据量过大，需要分页导入     * @throws Exception     */    @Test    public void init() throws Exception {        //1.查询所有符合条件的文章数据        List&lt;SearchArticleVo&gt; searchArticleVos = apArticleMapper.loadArticleList();        //2.批量导入到es索引库        BulkRequest bulkRequest = new BulkRequest("app_info_article");        for (SearchArticleVo searchArticleVo : searchArticleVos) {            IndexRequest indexRequest = new IndexRequest().id(searchArticleVo.getId().toString())                    .source(JSON.toJSONString(searchArticleVo), XContentType.JSON);            //批量添加数据            bulkRequest.add(indexRequest);        }        restHighLevelClient.bulk(bulkRequest, RequestOptions.DEFAULT);    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://elasticsearch.bookhub.zone/#/rest_apis/search_apis/vector_tile_search">中文文档</a></p><p><a href="https://cloud.tencent.com/developer/article/1459354">javaApi</a></p><p>springDate es<a href="https://juejin.cn/post/7008440607462916103">ElasticSearch集成SpringData史上最全查询教程 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/6999209105856413704">【Elasticsearch】7. Spring Boot整合ES - 掘金 (juejin.cn)</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="API" scheme="https://macongmc.github.io/categories/API/"/>
    
    
    <category term="搜索引擎" scheme="https://macongmc.github.io/tags/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/"/>
    
  </entry>
  
  <entry>
    <title>kafka</title>
    <link href="https://macongmc.github.io/posts/5bbc7517.html"/>
    <id>https://macongmc.github.io/posts/5bbc7517.html</id>
    <published>2022-08-03T01:00:24.000Z</published>
    <updated>2022-08-03T01:00:24.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一-kafka概述"><a href="#一-kafka概述" class="headerlink" title="一.kafka概述"></a>一.kafka概述</h2><p>消息中间件对比        </p><table><thead><tr><th>特性</th><th>ActiveMQ</th><th>RabbitMQ</th><th>RocketMQ</th><th>Kafka</th></tr></thead><tbody><tr><td>开发语言</td><td>java</td><td>erlang</td><td>java</td><td>scala</td></tr><tr><td>单机吞吐量</td><td>万级</td><td>万级</td><td>10万级</td><td>100万级</td></tr><tr><td>时效性</td><td>ms</td><td>us</td><td>ms</td><td>ms级以内</td></tr><tr><td>可用性</td><td>高（主从）</td><td>高（主从）</td><td>非常高（分布式）</td><td>非常高（分布式）</td></tr><tr><td>功能特性</td><td>成熟的产品、较全的文档、各种协议支持好</td><td>并发能力强、性能好、延迟低</td><td>MQ功能比较完善，扩展性佳</td><td>只支持主要的MQ功能，主要应用于大数据领域</td></tr></tbody></table><p>消息中间件对比-选择建议</p><table><thead><tr><th><strong>消息中间件</strong></th><th><strong>建议</strong></th></tr></thead><tbody><tr><td>Kafka</td><td>追求高吞吐量，适合产生大量数据的互联网服务的数据收集业务</td></tr><tr><td>RocketMQ</td><td>可靠性要求很高的金融互联网领域,稳定性高，经历了多次阿里双11考验</td></tr><tr><td>RabbitMQ</td><td>性能较好，社区活跃度高，数据量没有那么大，优先选择功能比较完备的RabbitMQ</td></tr></tbody></table><p>kafka介绍</p><p>Kafka 是一个分布式流媒体平台,类似于消息队列或企业消息传递系统。kafka官网：<a href="http://kafka.apache.org/">http://kafka.apache.org/</a>  </p><p><a href="https://kafka.apachecn.org/">中文文档</a></p><img src="/posts/5bbc7517/image-20210525181028436.png" class=""><p>kafka介绍-名词解释</p><img src="/posts/5bbc7517/image-20210525181100793.png" class="" title="image-20210525181100793"><p>producer：发布消息的对象称之为主题生产者（Kafka topic producer）</p><p>topic：Kafka将消息分门别类，每一类的消息称之为一个主题（Topic）</p><p>consumer：订阅消息并处理发布的消息的对象称之为主题消费者（consumers）</p><p>broker：已发布的消息保存在一组服务器中，称之为Kafka集群。集群中的每一个服务器都是一个代理（Broker）。 消费者可以订阅一个或多个主题（topic），并从Broker拉数据，从而消费这些已发布的消息。</p><h2 id="二-安装和配置"><a href="#二-安装和配置" class="headerlink" title="二.安装和配置"></a>二.安装和配置</h2><p>Kafka对于zookeeper是强依赖，保存kafka相关的节点数据，所以安装Kafka之前必须先安装zookeeper</p><ul><li>Docker安装zookeeper</li></ul><p>下载镜像：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker pull zookeeper<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>创建容器</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker run -d --restart<span class="token operator">=</span>always --log-driver json-file --log-opt max-size<span class="token operator">=</span>100m --log-opt max-file<span class="token operator">=</span><span class="token number">2</span>  --name zookeeper -p <span class="token number">2181</span>:2181 -v /etc/localtime:/etc/localtime zookeeper<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>Docker安装kafka</li></ul><p>下载镜像：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker pull wurstmeister/kafka<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>创建容器:</p><p>云主机</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker run -d --restart<span class="token operator">=</span>always --log-driver json-file --log-opt max-size<span class="token operator">=</span>100m --log-opt max-file<span class="token operator">=</span><span class="token number">2</span> --name kafka -p <span class="token number">9092</span>:9092 -e <span class="token assign-left variable">KAFKA_BROKER_ID</span><span class="token operator">=</span><span class="token number">0</span> -e <span class="token assign-left variable">KAFKA_ZOOKEEPER_CONNECT</span><span class="token operator">=</span><span class="token number">172.21</span>.10.10:2181/kafka -e <span class="token assign-left variable">KAFKA_ADVERTISED_LISTENERS</span><span class="token operator">=</span>PLAINTEXT://172.21.10.10:9092 -e <span class="token assign-left variable">KAFKA_LISTENERS</span><span class="token operator">=</span>PLAINTEXT://0.0.0.0:9092 -v /etc/localtime:/etc/localtime wurstmeister/kafka<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>虚拟机</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker run -d --name kafka <span class="token punctuation">\</span>--env <span class="token assign-left variable">KAFKA_ADVERTISED_HOST_NAME</span><span class="token operator">=</span><span class="token number">192.168</span>.200.130 <span class="token punctuation">\</span>--env <span class="token assign-left variable">KAFKA_ZOOKEEPER_CONNECT</span><span class="token operator">=</span><span class="token number">192.168</span>.200.130:2181 <span class="token punctuation">\</span>--env <span class="token assign-left variable">KAFKA_ADVERTISED_LISTENERS</span><span class="token operator">=</span>PLAINTEXT://192.168.200.130:9092 <span class="token punctuation">\</span>--env <span class="token assign-left variable">KAFKA_LISTENERS</span><span class="token operator">=</span>PLAINTEXT://0.0.0.0:9092 <span class="token punctuation">\</span>--env <span class="token assign-left variable">KAFKA_HEAP_OPTS</span><span class="token operator">=</span><span class="token string">"-Xmx256M -Xms256M"</span> <span class="token punctuation">\</span>--net<span class="token operator">=</span>host wurstmeister/kafka:2.12-2.3.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三-kafka入门"><a href="#三-kafka入门" class="headerlink" title="三.kafka入门"></a>三.kafka入门</h2><img src="/posts/5bbc7517/image-20210525181412230.png" class="" title="image-20210525181412230"><ul><li><p>生产者发送消息，多个消费者只能有一个消费者接收到消息</p></li><li><p>生产者发送消息，多个消费者都可以接收到消息</p><p>（1）创建kafka-demo项目，导入依赖</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.kafka<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>kafka-clients<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>（2）生产者发送消息</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>heima<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>sample</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>producer<span class="token punctuation">.</span></span><span class="token class-name">KafkaProducer</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>producer<span class="token punctuation">.</span></span><span class="token class-name">ProducerConfig</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>producer<span class="token punctuation">.</span></span><span class="token class-name">ProducerRecord</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Properties</span><span class="token punctuation">;</span><span class="token comment">/** * 生产者 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProducerQuickStart</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//1.kafka的配置信息</span>        <span class="token class-name">Properties</span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//kafka的连接地址</span>        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ProducerConfig</span><span class="token punctuation">.</span>BOOTSTRAP_SERVERS_CONFIG<span class="token punctuation">,</span><span class="token string">"192.168.200.130:9092"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//发送失败，失败的重试次数</span>        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ProducerConfig</span><span class="token punctuation">.</span>RETRIES_CONFIG<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//消息key的序列化器</span>        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ProducerConfig</span><span class="token punctuation">.</span>KEY_SERIALIZER_CLASS_CONFIG<span class="token punctuation">,</span><span class="token string">"org.apache.kafka.common.serialization.StringSerializer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//消息value的序列化器</span>        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ProducerConfig</span><span class="token punctuation">.</span>VALUE_SERIALIZER_CLASS_CONFIG<span class="token punctuation">,</span><span class="token string">"org.apache.kafka.common.serialization.StringSerializer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.生产者对象</span>        <span class="token class-name">KafkaProducer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">KafkaProducer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//封装发送的消息</span>        <span class="token class-name">ProducerRecord</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">record</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProducerRecord</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">"itheima-topic"</span><span class="token punctuation">,</span><span class="token string">"100001"</span><span class="token punctuation">,</span><span class="token string">"hello kafka"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3.发送消息</span>        producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">record</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//4.关闭消息通道，必须关闭，否则消息发送不成功</span>        producer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（3）消费者接收消息</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>heima<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>sample</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span></span><span class="token class-name">ConsumerConfig</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span></span><span class="token class-name">ConsumerRecord</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span></span><span class="token class-name">ConsumerRecords</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span></span><span class="token class-name">KafkaConsumer</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token class-name">Duration</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Collections</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Properties</span><span class="token punctuation">;</span><span class="token comment">/** * 消费者 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConsumerQuickStart</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//1.添加kafka的配置信息</span>        <span class="token class-name">Properties</span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//kafka的连接地址</span>        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ConsumerConfig</span><span class="token punctuation">.</span>BOOTSTRAP_SERVERS_CONFIG<span class="token punctuation">,</span> <span class="token string">"192.168.200.130:9092"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//消费者组</span>        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ConsumerConfig</span><span class="token punctuation">.</span>GROUP_ID_CONFIG<span class="token punctuation">,</span> <span class="token string">"group2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//消息的反序列化器</span>        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ConsumerConfig</span><span class="token punctuation">.</span>KEY_DESERIALIZER_CLASS_CONFIG<span class="token punctuation">,</span> <span class="token string">"org.apache.kafka.common.serialization.StringDeserializer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ConsumerConfig</span><span class="token punctuation">.</span>VALUE_DESERIALIZER_CLASS_CONFIG<span class="token punctuation">,</span> <span class="token string">"org.apache.kafka.common.serialization.StringDeserializer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.消费者对象</span>        <span class="token class-name">KafkaConsumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">KafkaConsumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3.订阅主题</span>        consumer<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">singletonList</span><span class="token punctuation">(</span><span class="token string">"itheima-topic"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//当前线程一直处于监听状态</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//4.获取消息</span>            <span class="token class-name">ConsumerRecords</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> consumerRecords <span class="token operator">=</span> consumer<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofMillis</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ConsumerRecord</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> consumerRecord <span class="token operator">:</span> consumerRecords<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>consumerRecord<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>consumerRecord<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结</p><ul><li>生产者发送消息，多个消费者订阅同一个主题，只能有一个消费者收到消息（一对一）</li><li>生产者发送消息，多个消费者订阅同一个主题，所有消费者都能收到消息（一对多）</li></ul></li></ul><h2 id="四-kafka高可用设计"><a href="#四-kafka高可用设计" class="headerlink" title="四.kafka高可用设计"></a>四.kafka高可用设计</h2><h3 id="1-集群"><a href="#1-集群" class="headerlink" title="1.集群"></a>1.集群</h3><img src="/posts/5bbc7517/image-20210530223101568.png" class="" title="image-20210530223101568"><ul><li><p>Kafka 的服务器端由被称为 Broker 的服务进程构成，即一个 Kafka 集群由多个 Broker 组成</p></li><li><p>这样如果集群中某一台机器宕机，其他机器上的 Broker 也依然能够对外提供服务。这其实就是 Kafka 提供高可用的手段之一</p></li></ul><h3 id="2-备份机制-Replication）"><a href="#2-备份机制-Replication）" class="headerlink" title="2.备份机制(Replication）"></a>2.备份机制(Replication）</h3><img src="/posts/5bbc7517/image-20210530223218580.png" class="" title="image-20210530223218580"><p>Kafka 中消息的备份又叫做 副本（Replica）</p><p>Kafka 定义了两类副本：</p><ul><li><p>领导者副本（Leader Replica）</p></li><li><p>追随者副本（Follower Replica）</p></li></ul><p><strong>同步方式</strong></p><img src="/posts/5bbc7517/image-20210530223316815.png" class="" title="image-20210530223316815"><p>ISR（in-sync replica）需要同步复制保存的follower</p><p>如果leader失效后，需要选出新的leader，选举的原则如下：</p><p>第一：选举时优先从ISR中选定，因为这个列表中follower的数据是与leader同步的</p><p>第二：如果ISR列表中的follower都不行了，就只能从其他follower中选取</p><p>极端情况，就是所有副本都失效了，这时有两种方案</p><p>第一：等待ISR中的一个活过来，选为Leader，数据可靠，但活过来的时间不确定</p><p>第二：选择第一个活过来的Replication，不一定是ISR中的，选为leader，以最快速度恢复可用性，但数据不一定完整</p><h2 id="五-kafka生产者详解"><a href="#五-kafka生产者详解" class="headerlink" title="五.kafka生产者详解"></a>五.kafka生产者详解</h2><h3 id="1-发送类型"><a href="#1-发送类型" class="headerlink" title="1.发送类型"></a>1.发送类型</h3><ul><li><p>同步发送</p><p>使用send()方法发送，它会返回一个Future对象，调用get()方法进行等待，就可以知道消息是否发送成功</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">RecordMetadata</span> recordMetadata <span class="token operator">=</span> producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>kvProducerRecord<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>recordMetadata<span class="token punctuation">.</span><span class="token function">offset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><p>异步发送</p><p>调用send()方法，并指定一个回调函数，服务器在返回响应时调用函数</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//异步消息发送</span>producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>kvProducerRecord<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCompletion</span><span class="token punctuation">(</span><span class="token class-name">RecordMetadata</span> recordMetadata<span class="token punctuation">,</span> <span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>e <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"记录异常信息到日志表中"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>recordMetadata<span class="token punctuation">.</span><span class="token function">offset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-参数详解"><a href="#2-参数详解" class="headerlink" title="2.参数详解"></a>2.参数详解</h3><p>ack</p><img src="/posts/5bbc7517/image-20210530224302935.png" class="" title="image-20210530224302935"><p>代码的配置方式：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//ack配置  消息确认机制</span>prop<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ProducerConfig</span><span class="token punctuation">.</span>ACKS_CONFIG<span class="token punctuation">,</span><span class="token string">"all"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>参数的选择说明</p><table><thead><tr><th><strong>确认机制</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>acks=0</td><td>生产者在成功写入消息之前不会等待任何来自服务器的响应,消息有丢失的风险，但是速度最快</td></tr><tr><td>acks=1（默认值）</td><td>只要集群首领节点收到消息，生产者就会收到一个来自服务器的成功响应</td></tr><tr><td>acks=all</td><td>只有当所有参与赋值的节点全部收到消息时，生产者才会收到一个来自服务器的成功响应</td></tr></tbody></table><p>retries</p><img src="/posts/5bbc7517/image-20210530224406689.png" class="" title="image-20210530224406689"><p>生产者从服务器收到的错误有可能是临时性错误，在这种情况下，retries参数的值决定了生产者可以重发消息的次数，如果达到这个次数，生产者会放弃重试返回错误，默认情况下，生产者会在每次重试之间等待100ms</p><p>代码中配置方式：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//重试次数</span>prop<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ProducerConfig</span><span class="token punctuation">.</span>RETRIES_CONFIG<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>消息压缩</p><p>默认情况下， 消息发送时不会被压缩。</p><p>代码中配置方式：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//数据压缩</span>prop<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ProducerConfig</span><span class="token punctuation">.</span>COMPRESSION_TYPE_CONFIG<span class="token punctuation">,</span><span class="token string">"lz4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><table><thead><tr><th><strong>压缩算法</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>snappy</td><td>占用较少的  CPU，  却能提供较好的性能和相当可观的压缩比， 如果看重性能和网络带宽，建议采用</td></tr><tr><td>lz4</td><td>占用较少的 CPU， 压缩和解压缩速度较快，压缩比也很客观</td></tr><tr><td>gzip</td><td>占用较多的  CPU，但会提供更高的压缩比，网络带宽有限，可以使用这种算法</td></tr></tbody></table><p>使用压缩可以降低网络传输开销和存储开销，而这往往是向 Kafka 发送消息的瓶颈所在。</p><h2 id="六-kafka消费者详解"><a href="#六-kafka消费者详解" class="headerlink" title="六.kafka消费者详解"></a>六.kafka消费者详解</h2><h3 id="1-消费者组"><a href="#1-消费者组" class="headerlink" title="1.消费者组"></a>1.消费者组</h3><img src="/posts/5bbc7517/image-20210530224706747.png" class="" title="image-20210530224706747">消费者组（Consumer Group） ：指的就是由一个或多个消费者组成的群体<p>一个发布在Topic上消息被分发给此消费者组中的一个消费者</p><p>所有的消费者都在一个组中，那么这就变成了queue模型</p><p>所有的消费者都在不同的组中，那么就完全变成了发布-订阅模型</p><h3 id="2-消息有序性"><a href="#2-消息有序性" class="headerlink" title="2.消息有序性"></a>2.消息有序性</h3><p>应用场景：</p><p>​     即时消息中的单对单聊天和群聊，保证发送方消息发送顺序与接收    方的顺序一致</p><p>​     充值转账两个渠道在同一个时间进行余额变更，短信通知必须要有顺序</p><img src="/posts/5bbc7517/image-20210530224903891.png" class="" title="image-20210530224903891"><p>topic分区中消息只能由消费者组中的唯一一个消费者处理，所以消息肯定是按照先后顺序进行处理的。但是它也仅仅是保证Topic的一个分区顺序处理，不能保证跨分区的消息先后处理顺序。 所以，如果你想要顺序的处理Topic的所有消息，那就只提供一个分区。</p><h3 id="3-提交和偏移量"><a href="#3-提交和偏移量" class="headerlink" title="3.提交和偏移量"></a>3.提交和偏移量</h3><p>kafka不会像其他JMS队列那样需要得到消费者的确认，消费者可以使用kafka来追踪消息在分区的位置（偏移量）</p><p>消费者会往一个叫做_consumer_offset的特殊主题发送消息，消息里包含了每个分区的偏移量。如果消费者发生崩溃或有新的消费者加入群组，就会触发再均衡</p><p>如果消费者2挂掉以后，会发生再均衡，消费者2负责的分区会被其他消费者进行消费</p><p>再均衡后不可避免会出现一些问题</p><p>问题一：<img src="/posts/5bbc7517/image-20210530225215337.png" class="" title="image-20210530225215337"></p><p>如果提交偏移量小于客户端处理的最后一个消息的偏移量，那么处于两个偏移量之间的消息就会被重复处理。</p><p>问题二：</p><img src="/posts/5bbc7517/image-20210530225239897.png" class="" title="image-20210530225239897"><p>如果提交的偏移量大于客户端的最后一个消息的偏移量，那么处于两个偏移量之间的消息将会丢失。</p><p>如果想要解决这些问题，还要知道目前kafka提交偏移量的方式：</p><p>提交偏移量的方式有两种，分别是自动提交偏移量和手动提交</p><ul><li>自动提交偏移量</li></ul><p>当enable.auto.commit被设置为true，提交方式就是让消费者自动提交偏移量，每隔5秒消费者会自动把从poll()方法接收的最大偏移量提交上去</p><ul><li><p>手动提交 ，当enable.auto.commit被设置为false可以有以下三种提交方式</p><ul><li><p>提交当前偏移量（同步提交）</p></li><li><p>异步提交</p></li><li><p>同步和异步组合提交</p></li></ul></li></ul><p>1.提交当前偏移量（同步提交）</p><p>把<code>enable.auto.commit</code>设置为false,让应用程序决定何时提交偏移量。使用commitSync()提交偏移量，commitSync()将会提交poll返回的最新的偏移量，所以在处理完所有记录后要确保调用了commitSync()方法。否则还是会有消息丢失的风险。</p><p>只要没有发生不可恢复的错误，commitSync()方法会一直尝试直至提交成功，如果提交失败也可以记录到错误日志里。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">ConsumerRecords</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> records <span class="token operator">=</span> consumer<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofMillis</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ConsumerRecord</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">record</span> <span class="token operator">:</span> records<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">record</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">record</span><span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            consumer<span class="token punctuation">.</span><span class="token function">commitSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//同步提交当前最新的偏移量</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">CommitFailedException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"记录提交失败的异常："</span><span class="token operator">+</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.异步提交</p><p>手动提交有一个缺点，那就是当发起提交调用时应用会阻塞。当然我们可以减少手动提交的频率，但这个会增加消息重复的概率（和自动提交一样）。另外一个解决办法是，使用异步提交的API。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">ConsumerRecords</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> records <span class="token operator">=</span> consumer<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofMillis</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ConsumerRecord</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">record</span> <span class="token operator">:</span> records<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">record</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">record</span><span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    consumer<span class="token punctuation">.</span><span class="token function">commitAsync</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OffsetCommitCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onComplete</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TopicPartition</span><span class="token punctuation">,</span> <span class="token class-name">OffsetAndMetadata</span><span class="token punctuation">&gt;</span></span> map<span class="token punctuation">,</span> <span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"记录错误的提交偏移量："</span><span class="token operator">+</span> map<span class="token operator">+</span><span class="token string">",异常信息"</span><span class="token operator">+</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.同步和异步组合提交</p><p>异步提交也有个缺点，那就是如果服务器返回提交失败，异步提交不会进行重试。相比较起来，同步提交会进行重试直到成功或者最后抛出异常给应用。异步提交没有实现重试是因为，如果同时存在多个异步提交，进行重试可能会导致位移覆盖。</p><p>举个例子，假如我们发起了一个异步提交commitA，此时的提交位移为2000，随后又发起了一个异步提交commitB且位移为3000；commitA提交失败但commitB提交成功，此时commitA进行重试并成功的话，会将实际上将已经提交的位移从3000回滚到2000，导致消息重复消费。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">ConsumerRecords</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> records <span class="token operator">=</span> consumer<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofMillis</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ConsumerRecord</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">record</span> <span class="token operator">:</span> records<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">record</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">record</span><span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        consumer<span class="token punctuation">.</span><span class="token function">commitAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token operator">+</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"记录错误信息："</span><span class="token operator">+</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        consumer<span class="token punctuation">.</span><span class="token function">commitSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>        consumer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-再均衡监听器-ConsumerRebalanceListener"><a href="#4-再均衡监听器-ConsumerRebalanceListener" class="headerlink" title="4.再均衡监听器 ConsumerRebalanceListener"></a>4.再均衡监听器 ConsumerRebalanceListener</h3><ol><li><p><strong>onPartitionsRevoked：</strong>在分区均衡开始【前】和消费者停止读取消息【后】被调用；</p></li><li><p><strong>onPartitionsAssigned：</strong>分区再均衡【后】和消费者开始读取消息【前】被调用 ；</p></li><li><pre><code class="java">import org.apache.kafka.clients.consumer.ConsumerRebalanceListener;import org.apache.kafka.clients.consumer.KafkaConsumer;import org.apache.kafka.clients.consumer.OffsetAndMetadata;import org.apache.kafka.common.TopicPartition;import java.util.Collection;import java.util.Map;import java.util.concurrent.ConcurrentHashMap;public class HandlerRebalance implements ConsumerRebalanceListener {    private final Map&lt;TopicPartition, OffsetAndMetadata&gt; currOffsets;    private final KafkaConsumer&lt;String,String&gt; consumer;    //private final Transaction  tr事务类的实例    public HandlerRebalance(Map&lt;TopicPartition, OffsetAndMetadata&gt; currOffsets,                            KafkaConsumer&lt;String, String&gt; consumer) {        this.currOffsets = currOffsets;        this.consumer = consumer;    }    /*模拟一个保存分区偏移量的数据库表*/    public final static ConcurrentHashMap&lt;TopicPartition,Long&gt;            partitionOffsetMap = new ConcurrentHashMap();    //分区再均衡之前    public void onPartitionsRevoked(            Collection&lt;TopicPartition&gt; partitions) {        final String id = Thread.currentThread().getId()+"";        System.out.println(id+"-onPartitionsRevoked参数值为："+partitions);        System.out.println(id+"-服务器准备分区再均衡，提交偏移量。当前偏移量为："                +currOffsets);        //开始事务        //偏移量写入数据库        System.out.println("分区偏移量表中："+partitionOffsetMap);        for(TopicPartition topicPartition:partitions){            partitionOffsetMap.put(topicPartition,                    currOffsets.get(topicPartition).offset());        }        consumer.commitSync(currOffsets);        //提交业务数和偏移量入库  tr.commit    }    //分区再均衡完成以后    public void onPartitionsAssigned(            Collection&lt;TopicPartition&gt; partitions) {        final String id = "" + Thread.currentThread().getId();        System.out.println(id+"-再均衡完成，onPartitionsAssigned参数值为："+partitions);        System.out.println("分区偏移量表中："+partitionOffsetMap);        for(TopicPartition topicPartition:partitions){            System.out.println(id+"-topicPartition"+topicPartition);            //模拟从数据库中取得上次的偏移量            Long offset = partitionOffsetMap.get(topicPartition);            if(offset==null) continue;            //从特定偏移量处开始记录 (从指定分区中的指定偏移量开始消费)            //这样就可以确保分区再均衡中的数据不错乱            consumer.seek(topicPartition,partitionOffsetMap.get(topicPartition));        }    }}<pre class="line-numbers language-none"><code class="language-none">   ## 七.springboot集成kafka1.导入spring-kafka依赖信息```xml&lt;dependencies&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;    &lt;/dependency&gt;    &lt;!-- kafkfa --&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.springframework.kafka&lt;/groupId&gt;        &lt;artifactId&gt;spring-kafka&lt;/artifactId&gt;        &lt;exclusions&gt;            &lt;exclusion&gt;                &lt;groupId&gt;org.apache.kafka&lt;/groupId&gt;                &lt;artifactId&gt;kafka-clients&lt;/artifactId&gt;            &lt;/exclusion&gt;        &lt;/exclusions&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.apache.kafka&lt;/groupId&gt;        &lt;artifactId&gt;kafka-clients&lt;/artifactId&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;com.alibaba&lt;/groupId&gt;        &lt;artifactId&gt;fastjson&lt;/artifactId&gt;    &lt;/dependency&gt;&lt;/dependencies&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre></li></ol><p>2.在resources下创建文件application.yml</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">9991</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> kafka<span class="token punctuation">-</span>demo  <span class="token key atrule">kafka</span><span class="token punctuation">:</span>    <span class="token key atrule">bootstrap-servers</span><span class="token punctuation">:</span> 192.168.200.130<span class="token punctuation">:</span><span class="token number">9092</span>    <span class="token key atrule">producer</span><span class="token punctuation">:</span>      <span class="token key atrule">retries</span><span class="token punctuation">:</span> <span class="token number">10</span>      <span class="token key atrule">key-serializer</span><span class="token punctuation">:</span> org.apache.kafka.common.serialization.StringSerializer      <span class="token key atrule">value-serializer</span><span class="token punctuation">:</span> org.apache.kafka.common.serialization.StringSerializer    <span class="token key atrule">consumer</span><span class="token punctuation">:</span>      <span class="token key atrule">group-id</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>spring.application.name<span class="token punctuation">}</span><span class="token punctuation">-</span>test      <span class="token key atrule">key-deserializer</span><span class="token punctuation">:</span> org.apache.kafka.common.serialization.StringDeserializer      <span class="token key atrule">value-deserializer</span><span class="token punctuation">:</span> org.apache.kafka.common.serialization.StringDeserializer<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.消息生产者</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>heima<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">KafkaTemplate</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">GetMapping</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestController</span><span class="token punctuation">;</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">KafkaTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> kafkaTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        kafkaTemplate<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"itcast-topic"</span><span class="token punctuation">,</span><span class="token string">"黑马程序员"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"ok"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.消息消费者</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>heima<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>listener</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">KafkaListener</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">StringUtils</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloListener</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@KafkaListener</span><span class="token punctuation">(</span>topics <span class="token operator">=</span> <span class="token string">"itcast-topic"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>传递消息为对象</p><p>目前springboot整合后的kafka，因为序列化器是StringSerializer，这个时候如果需要传递对象可以有两种方式</p><p>方式一：可以自定义序列化器，对象类型众多，这种方式通用性不强，本章节不介绍</p><p>方式二：可以把要传递的对象进行转json字符串，接收消息后再转为对象即可，本项目采用这种方式</p><ul><li>发送消息</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"xiaowang"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    kafkaTemplate<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"user-topic"</span><span class="token punctuation">,</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"ok"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>接收消息</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>heima<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>listener</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span></span>JSON<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>heima<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span></span><span class="token class-name">User</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">KafkaListener</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">StringUtils</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloListener</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@KafkaListener</span><span class="token punctuation">(</span>topics <span class="token operator">=</span> <span class="token string">"user-topic"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">User</span> user <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="生产者配置"><a href="#生产者配置" class="headerlink" title="生产者配置"></a>生产者配置</h2><table><thead><tr><th>NAME</th><th>DESCRIPTION</th><th>TYPE</th><th>DEFAULT</th><th>VALID VALUES</th><th>IMPORTANCE</th></tr></thead><tbody><tr><td>bootstrap.servers</td><td>host/port列表，用于初始化建立和Kafka集群的连接。列表格式为host1:port1,host2:port2,….，无需添加所有的集群地址，kafka会根据提供的地址发现其他的地址（你可以多提供几个，以防提供的服务器关闭）</td><td>list</td><td></td><td></td><td>high</td></tr><tr><td>key.serializer</td><td>实现 org.apache.kafka.common.serialization.Serializer 接口的 key 的 Serializer  类。</td><td>class</td><td></td><td></td><td>high</td></tr><tr><td>value.serializer</td><td>实现 org.apache.kafka.common.serialization.Serializer 接口的value 的 Serializer  类。</td><td>class</td><td></td><td></td><td>high</td></tr><tr><td>acks</td><td>生产者需要leader确认请求完成之前接收的应答数。此配置控制了发送消息的耐用性，支持以下配置：</td><td>string</td><td>1</td><td>[all, -1, 0, 1]</td><td>high</td></tr><tr><td></td><td>acks=0  如果设置为0，那么生产者将不等待任何消息确认。消息将立刻添加到socket缓冲区并考虑发送。在这种情况下不能保障消息被服务器接收到。并且重试机制不会生效（因为客户端不知道故障了没有）。每个消息返回的offset始终设置为-1。</td><td></td><td></td><td></td><td></td></tr><tr><td></td><td>acks=1，这意味着leader写入消息到本地日志就立即响应，而不等待所有follower应答。在这种情况下，如果响应消息之后但follower还未复制之前leader立即故障，那么消息将会丢失。</td><td></td><td></td><td></td><td></td></tr><tr><td></td><td>acks=all  这意味着leader将等待所有副本同步后应答消息。此配置保障消息不会丢失（只要至少有一个同步的副本或者）。这是最强壮的可用性保障。等价于acks=-1。</td><td></td><td></td><td></td><td></td></tr><tr><td>buffer.memory</td><td>生产者用来缓存等待发送到服务器的消息的内存总字节数。如果消息发送比可传递到服务器的快，生产者将阻塞max.block.ms之后，抛出异常。</td><td>long</td><td>33554432</td><td>[0,…]</td><td>high</td></tr><tr><td></td><td>此设置应该大致的对应生产者将要使用的总内存，但不是硬约束，因为生产者所使用的所有内存都用于缓冲。一些额外的内存将用于压缩（如果启动压缩），以及用于保持发送中的请求。</td><td></td><td></td><td></td><td></td></tr><tr><td>compression.type</td><td>数据压缩的类型。默认为空（就是不压缩）。有效的值有 none，gzip，snappy, 或  lz4。压缩全部的数据批，因此批的效果也将影响压缩的比率（更多的批次意味着更好的压缩）。</td><td>string</td><td>none</td><td></td><td>high</td></tr><tr><td>retries</td><td>设置一个比零大的值，客户端如果发送失败则会重新发送。注意，这个重试功能和客户端在接到错误之后重新发送没什么不同。如果max.in.flight.requests.per.connection没有设置为1，有可能改变消息发送的顺序，因为如果2个批次发送到一个分区中，并第一个失败了并重试，但是第二个成功了，那么第二个批次将超过第一个。</td><td>int</td><td>0</td><td>[0,…,2147483647]</td><td>high</td></tr><tr><td>ssl.key.password</td><td>密钥仓库文件中的私钥的密码。</td><td>password</td><td>null</td><td></td><td>high</td></tr><tr><td>ssl.keystore.location</td><td>密钥仓库文件的位置。可用于客户端的双向认证。</td><td>string</td><td>null</td><td></td><td>high</td></tr><tr><td>ssl.keystore.password</td><td>密钥仓库文件的仓库密码。只有配置了ssl.keystore.location时才需要。</td><td>password</td><td>null</td><td></td><td>high</td></tr><tr><td>ssl.truststore.location</td><td>信任仓库的位置</td><td>string</td><td>null</td><td></td><td>high</td></tr><tr><td>ssl.truststore.password</td><td>信任仓库文件的密码</td><td>password</td><td>null</td><td></td><td>high</td></tr><tr><td>batch.size</td><td>当多个消息要发送到相同分区的时，生产者尝试将消息批量打包在一起，以减少请求交互。这样有助于客户端和服务端的性能提升。该配置的默认批次大小（以字节为单位）：</td><td>int</td><td>16384</td><td>[0,…]</td><td>medium</td></tr><tr><td></td><td>不会打包大于此配置大小的消息。</td><td></td><td></td><td></td><td></td></tr><tr><td></td><td>发送到broker的请求将包含多个批次，每个分区一个，用于发送数据。</td><td></td><td></td><td></td><td></td></tr><tr><td></td><td>较小的批次大小有可能降低吞吐量（批次大小为0则完全禁用批处理）。一个非常大的批次大小可能更浪费内存。因为我们会预先分配这个资源。</td><td></td><td></td><td></td><td></td></tr><tr><td>client.id</td><td>当发出请求时传递给服务器的id字符串。这样做的目的是允许服务器请求记录记录这个【逻辑应用名】，这样能够追踪请求的源，而不仅仅只是ip/prot。</td><td>string</td><td>“”</td><td></td><td>medium</td></tr><tr><td>connections.max.idle.ms</td><td>多少毫秒之后关闭闲置的连接。</td><td>long</td><td>540000</td><td></td><td>medium</td></tr><tr><td>linger.ms</td><td>生产者组将发送的消息组合成单个批量请求。正常情况下，只有消息到达的速度比发送速度快的情况下才会出现。但是，在某些情况下，即使在适度的负载下，客户端也可能希望减少请求数量。此设置通过添加少量人为延迟来实现。-  也就是说，不是立即发出一个消息，生产者将等待一个给定的延迟，以便和其他的消息可以组合成一个批次。这类似于Nagle在TCP中的算法。此设置给出批量延迟的上限：一旦我们达到分区的batch.size值的记录，将立即发送，不管这个设置如何，但是，如果比这个小，我们将在指定的“linger”时间内等待更多的消息加入。此设置默认为0（即无延迟）。假设，设置  linger.ms=5，将达到减少发送的请求数量的效果，但对于在没有负载情况，将增加5ms的延迟。</td><td>long</td><td>0</td><td>[0,…]</td><td>medium</td></tr><tr><td>max.block.ms</td><td>该配置控制 KafkaProducer.send() 和 KafkaProducer.partitionsFor()  将阻塞多长时间。此外这些方法被阻止，也可能是因为缓冲区已满或元数据不可用。在用户提供的序列化程序或分区器中的锁定不会计入此超时。</td><td>long</td><td>60000</td><td>[0,…]</td><td>medium</td></tr><tr><td>max.request.size</td><td>请求的最大大小（以字节为单位）。此设置将限制生产者的单个请求中发送的消息批次数，以避免发送过大的请求。这也是最大消息批量大小的上限。请注意，服务器拥有自己的批量大小，可能与此不同。</td><td>int</td><td>1048576</td><td>[0,…]</td><td>medium</td></tr><tr><td>partitioner.class</td><td>实现Partitioner接口的的Partitioner类。</td><td>class</td><td>org.apache.kafka.clients.producer.internals.DefaultPartitioner</td><td></td><td>medium</td></tr><tr><td>receive.buffer.bytes</td><td>读取数据时使用的TCP接收缓冲区(SO_RCVBUF)的大小。如果值为-1，则将使用OS默认值。</td><td>int</td><td>32768</td><td>[-1,…]</td><td>medium</td></tr><tr><td>request.timeout.ms</td><td>该配置控制客户端等待请求响应的最长时间。如果在超时之前未收到响应，客户端将在必要时重新发送请求，如果重试耗尽，则该请求将失败。  这应该大于replica.lag.time.max.ms，以减少由于不必要的生产者重试引起的消息重复的可能性。</td><td>int</td><td>30000</td><td>[0,…]</td><td>medium</td></tr><tr><td>sasl.jaas.config</td><td>JAAS配置文件使用的格式的SASL连接的JAAS登录上下文参数。这里描述JAAS配置文件格式。该值的格式为：’（=）*;’</td><td>password</td><td>null</td><td></td><td>medium</td></tr><tr><td>sasl.kerberos.service.name</td><td>Kafka运行的Kerberos主体名称。可以在Kafka的JAAS配置或Kafka的配置中定义。</td><td>string</td><td>null</td><td></td><td>medium</td></tr><tr><td>sasl.mechanism</td><td>SASL机制用于客户端连接。这是安全提供者可用与任何机制。GSSAPI是默认机制。</td><td>string</td><td>GSSAPI</td><td></td><td>medium</td></tr><tr><td>security.protocol</td><td>用于与broker通讯的协议。 有效值为：PLAINTEXT，SSL，SASL_PLAINTEXT，SASL_SSL。</td><td>string</td><td>PLAINTEXT</td><td></td><td>medium</td></tr><tr><td>send.buffer.bytes</td><td>发送数据时，用于TCP发送缓存（SO_SNDBUF）的大小。如果值为 -1，将默认使用系统的。</td><td>int</td><td>131072</td><td>[-1,…]</td><td>medium</td></tr><tr><td>ssl.enabled.protocols</td><td>启用SSL连接的协议列表。</td><td>list</td><td>TLSv1.2,TLSv1.1,TLSv1</td><td></td><td>medium</td></tr><tr><td>ssl.keystore.type</td><td>密钥存储文件的文件格式。对于客户端是可选的。</td><td>string</td><td>JKS</td><td></td><td>medium</td></tr><tr><td>ssl.protocol</td><td>最近的JVM中允许的值是TLS，TLSv1.1和TLSv1.2。  较旧的JVM可能支持SSL，SSLv2和SSLv3，但由于已知的安全漏洞，不建议使用SSL。</td><td>string</td><td>TLS</td><td></td><td>medium</td></tr><tr><td>ssl.provider</td><td>用于SSL连接的安全提供程序的名称。默认值是JVM的默认安全提供程序。</td><td>string</td><td>null</td><td></td><td>medium</td></tr><tr><td>ssl.truststore.type</td><td>信任仓库文件的文件格式。</td><td>string</td><td>JKS</td><td></td><td>medium</td></tr><tr><td>enable.idempotence</td><td>当设置为‘true’，生产者将确保每个消息正好一次复制写入到stream。如果‘false’，由于broker故障，生产者重试。即，可以在流中写入重试的消息。此设置默认是‘false’。请注意，启用幂等式需要将max.in.flight.requests.per.connection设置为1，重试次数不能为零。另外acks必须设置为“全部”。如果这些值保持默认值，我们将覆盖默认值。  如果这些值设置为与幂等生成器不兼容的值，则将抛出一个ConfigException异常。如果这些值设置为与幂等生成器不兼容的值，则将抛出一个ConfigException异常。</td><td>boolean</td><td>FALSE</td><td></td><td>low</td></tr><tr><td>interceptor.classes</td><td>实现ProducerInterceptor接口，你可以在生产者发布到Kafka群集之前拦截（也可变更）生产者收到的消息。默认情况下没有拦截器。</td><td>list</td><td>null</td><td></td><td>low</td></tr><tr><td>max.in.flight.requests.per.connection</td><td>阻塞之前，客户端单个连接上发送的未应答请求的最大数量。注意，如果此设置设置大于1且发送失败，则会由于重试（如果启用了重试）会导致消息重新排序的风险。</td><td>int</td><td>5</td><td>[1,…]</td><td>low</td></tr><tr><td>metadata.max.age.ms</td><td>在一段时间段之后（以毫秒为单位），强制更新元数据，即使我们没有看到任何分区leader的变化，也会主动去发现新的broker或分区。</td><td>long</td><td>300000</td><td>[0,…]</td><td>low</td></tr><tr><td>metric.reporters</td><td>用作metrics reporters（指标记录员）的类的列表。实现MetricReporter接口，将受到新增加的度量标准创建类插入的通知。  JmxReporter始终包含在注册JMX统计信息中。</td><td>list</td><td>“”</td><td></td><td>low</td></tr><tr><td>metrics.num.samples</td><td>维护用于计算度量的样例数量。</td><td>int</td><td>2</td><td>[1,…]</td><td>low</td></tr><tr><td>metrics.recording.level</td><td>指标的最高记录级别。</td><td>string</td><td>INFO</td><td>[INFO, DEBUG]</td><td>low</td></tr><tr><td>metrics.sample.window.ms</td><td>度量样例计算上</td><td>long</td><td>30000</td><td>[0,…]</td><td>low</td></tr><tr><td>reconnect.backoff.max.ms</td><td>重新连接到重复无法连接的代理程序时等待的最大时间（毫秒）。 如果提供，每个主机的回退将会连续增加，直到达到最大值。  计算后退增加后，增加20％的随机抖动以避免连接风暴。</td><td>long</td><td>1000</td><td>[0,…]</td><td>low</td></tr><tr><td>reconnect.backoff.ms</td><td>尝试重新连接到给定主机之前等待的基本时间量。这避免了在循环中高频率的重复连接到主机。这种回退适应于客户端对broker的所有连接尝试。</td><td>long</td><td>50</td><td>[0,…]</td><td>low</td></tr><tr><td>retry.backoff.ms</td><td>尝试重试指定topic分区的失败请求之前等待的时间。这样可以避免在某些故障情况下高频次的重复发送请求。</td><td>long</td><td>100</td><td>[0,…]</td><td>low</td></tr><tr><td>sasl.kerberos.kinit.cmd</td><td>Kerberos kinit 命令路径。</td><td>string</td><td>/usr/bin/kinit</td><td></td><td>low</td></tr><tr><td>sasl.kerberos.min.time.before.relogin</td><td>Login线程刷新尝试之间的休眠时间。</td><td>long</td><td>60000</td><td></td><td>low</td></tr><tr><td>sasl.kerberos.ticket.renew.jitter</td><td>添加更新时间的随机抖动百分比。</td><td>double</td><td>0.05</td><td></td><td>low</td></tr><tr><td>sasl.kerberos.ticket.renew.window.factor</td><td>登录线程将睡眠，直到从上次刷新ticket到期时间的指定窗口因子为止，此时将尝试续订ticket。</td><td>double</td><td>0.8</td><td></td><td>low</td></tr><tr><td>ssl.cipher.suites</td><td>密码套件列表。这是使用TLS或SSL网络协议来协商用于网络连接的安全设置的认证，加密，MAC和密钥交换算法的命名组合。默认情况下，支持所有可用的密码套件。</td><td>list</td><td>null</td><td></td><td>low</td></tr><tr><td>ssl.endpoint.identification.algorithm</td><td>使用服务器证书验证服务器主机名的端点识别算法。</td><td>string</td><td>null</td><td></td><td>low</td></tr><tr><td>ssl.keymanager.algorithm</td><td>用于SSL连接的密钥管理因子算法。默认值是为Java虚拟机配置的密钥管理器工厂算法。</td><td>string</td><td>SunX509</td><td></td><td>low</td></tr><tr><td>ssl.secure.random.implementation</td><td>用于SSL加密操作的SecureRandom PRNG实现。</td><td>string</td><td>null</td><td></td><td>low</td></tr><tr><td>ssl.trustmanager.algorithm</td><td>用于SSL连接的信任管理因子算法。默认值是JAVA虚拟机配置的信任管理工厂算法。</td><td>string</td><td>PKIX</td><td></td><td>low</td></tr><tr><td>transaction.timeout.ms</td><td>生产者在主动中止正在进行的交易之前，交易协调器等待事务状态更新的最大时间（以ms为单位）。如果此值大于broker中的max.transaction.timeout.ms设置，则请求将失败，并报“InvalidTransactionTimeout”错误。</td><td>int</td><td>60000</td><td></td><td>low</td></tr><tr><td>transactional.id</td><td>用于事务传递的TransactionalId。这样可以跨多个生产者会话的可靠性语义，因为它允许客户端保证在开始任何新事务之前使用相同的TransactionalId的事务已经完成。如果没有提供TransactionalId，则生产者被限制为幂等传递。请注意，如果配置了TransactionalId，则必须启用enable.idempotence。  默认值为空，这意味着无法使用事务。</td><td>string</td><td>null</td><td>non-empty string</td><td>low</td></tr></tbody></table><h2 id="消费者配置"><a href="#消费者配置" class="headerlink" title="消费者配置"></a>消费者配置</h2><table><thead><tr><th>NAME</th><th>DESCRIPTION</th><th>TYPE</th><th>DEFAULT</th><th>VALID VALUES</th><th>IMPORTANCE</th></tr></thead><tbody><tr><td>bootstrap.servers</td><td>host/port,用于和kafka集群建立初始化连接。因为这些服务器地址仅用于初始化连接，并通过现有配置的来发现全部的kafka集群成员（集群随时会变化），所以此列表不需要包含完整的集群地址（但尽量多配置几个，以防止配置的服务器宕机）。</td><td>list</td><td></td><td></td><td>high</td></tr><tr><td>key.deserializer</td><td>key的解析序列化接口实现类（Deserializer）。</td><td>class</td><td></td><td></td><td>high</td></tr><tr><td>value.deserializer</td><td>value的解析序列化接口实现类（Deserializer）</td><td>class</td><td></td><td></td><td>high</td></tr><tr><td>fetch.min.bytes</td><td>服务器哦拉取请求返回的最小数据量，如果数据不足，请求将等待数据积累。默认设置为1字节，表示只要单个字节的数据可用或者读取等待请求超时，就会应答读取请求。将此值设置的越大将导致服务器等待数据累积的越长，这可能以一些额外延迟为代价提高服务器吞吐量。</td><td>int</td><td>1</td><td>[0,…]</td><td>high</td></tr><tr><td>group.id</td><td>此消费者所属消费者组的唯一标识。如果消费者用于订阅或offset管理策略的组管理功能，则此属性是必须的。</td><td>string</td><td>“”</td><td></td><td>high</td></tr><tr><td>heartbeat.interval.ms</td><td>当使用Kafka的分组管理功能时，心跳到消费者协调器之间的预计时间。心跳用于确保消费者的会话保持活动状态，并当有新消费者加入或离开组时方便重新平衡。该值必须必比session.timeout.ms小，通常不高于1/3。它可以调整的更低，以控制正常重新平衡的预期时间。</td><td>int</td><td>3000</td><td></td><td>high</td></tr><tr><td>max.partition.fetch.bytes</td><td>服务器将返回每个分区的最大数据量。如果拉取的第一个非空分区中第一个消息大于此限制，则仍然会返回消息，以确保消费者可以正常的工作。broker接受的最大消息大小通过message.max.bytes（broker config）或max.message.bytes (topic  config)定义。参阅fetch.max.bytes以限制消费者请求大小。</td><td>int</td><td>1048576</td><td>[0,…]</td><td>high</td></tr><tr><td>session.timeout.ms</td><td>用于发现消费者故障的超时时间。消费者周期性的发送心跳到broker，表示其还活着。如果会话超时期满之前没有收到心跳，那么broker将从分组中移除消费者，并启动重新平衡。请注意，该值必须在broker配置的group.min.session.timeout.ms和group.max.session.timeout.ms允许的范围内。</td><td>int</td><td>10000</td><td></td><td>high</td></tr><tr><td>ssl.key.password</td><td>密钥存储文件中的私钥的密码。  客户端可选</td><td>password</td><td>null</td><td></td><td>high</td></tr><tr><td>ssl.keystore.location</td><td>密钥存储文件的位置，  这对于客户端是可选的，并且可以用于客户端的双向认证。</td><td>string</td><td>null</td><td></td><td>high</td></tr><tr><td>ssl.keystore.password</td><td>密钥仓库文件的仓库密码。客户端可选，只有ssl.keystore.location配置了才需要。</td><td>password</td><td>null</td><td></td><td>high</td></tr><tr><td>ssl.truststore.location</td><td>信任仓库文件的位置</td><td>string</td><td>null</td><td></td><td>high</td></tr><tr><td>ssl.truststore.password</td><td>信任仓库文件的密码</td><td>password</td><td>null</td><td></td><td>high</td></tr><tr><td>auto.offset.reset</td><td>当Kafka中没有初始offset或如果当前的offset不存在时（例如，该数据被删除了），该怎么办。</td><td>string</td><td>latest</td><td>[latest, earliest, none]</td><td>medium</td></tr><tr><td>最早：自动将偏移重置为最早的偏移</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>最新：自动将偏移重置为最新偏移</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>none：如果消费者组找到之前的offset，则向消费者抛出异常</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>其他：抛出异常给消费者。</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>connections.max.idle.ms</td><td>指定在多少毫秒之后关闭闲置的连接</td><td>long</td><td>540000</td><td></td><td>medium</td></tr><tr><td>enable.auto.commit</td><td>如果为true，消费者的offset将在后台周期性的提交</td><td>boolean</td><td>TRUE</td><td></td><td>medium</td></tr><tr><td>exclude.internal.topics</td><td>内部topic的记录（如偏移量）是否应向消费者公开。如果设置为true，则从内部topic接受记录的唯一方法是订阅它。</td><td>boolean</td><td>TRUE</td><td></td><td>medium</td></tr><tr><td>fetch.max.bytes</td><td>服务器为拉取请求返回的最大数据值。这不是绝对的最大值，如果在第一次非空分区拉取的第一条消息大于该值，该消息将仍然返回，以确保消费者继续工作。接收的最大消息大小通过message.max.bytes  (broker config) 或 max.message.bytes (topic config)定义。注意，消费者是并行执行多个提取的。</td><td>int</td><td>52428800</td><td>[0,…]</td><td>medium</td></tr><tr><td>max.poll.interval.ms</td><td>使用消费者组管理时poll()调用之间的最大延迟。消费者在获取更多记录之前可以空闲的时间量的上限。如果此超时时间期满之前poll()没有调用，则消费者被视为失败，并且分组将重新平衡，以便将分区重新分配给别的成员。</td><td>int</td><td>300000</td><td>[1,…]</td><td>medium</td></tr><tr><td>max.poll.records</td><td>在单次调用poll()中返回的最大记录数。</td><td>int</td><td>500</td><td>[1,…]</td><td>medium</td></tr><tr><td>partition.assignment.strategy</td><td>当使用组管理时，客户端将使用分区分配策略的类名来分配消费者实例之间的分区所有权</td><td>list</td><td>class  org.apache.kafka</td><td></td><td>medium</td></tr><tr><td>.clients.consumer</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>.RangeAssignor</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>receive.buffer.bytes</td><td>读取数据时使用的TCP接收缓冲区（SO_RCVBUF）的大小。  如果值为-1，则将使用OS默认值。</td><td>int</td><td>65536</td><td>[-1,…]</td><td>medium</td></tr><tr><td>request.timeout.ms</td><td>配置控制客户端等待请求响应的最长时间。  如果在超时之前未收到响应，客户端将在必要时重新发送请求，如果重试耗尽则客户端将重新发送请求。</td><td>int</td><td>305000</td><td>[0,…]</td><td>medium</td></tr><tr><td>sasl.jaas.config</td><td>JAAS配置文件中SASL连接登录上下文参数。  这里描述JAAS配置文件格式。 该值的格式为： ‘(=)*;’</td><td>password</td><td>null</td><td></td><td>medium</td></tr><tr><td>sasl.kerberos.service.name</td><td>Kafka运行Kerberos  principal名。可以在Kafka的JAAS配置文件或在Kafka的配置文件中定义。</td><td>string</td><td>null</td><td></td><td>medium</td></tr><tr><td>sasl.mechanism</td><td>用于客户端连接的SASL机制。安全提供者可用的机制。GSSAPI是默认机制。</td><td>string</td><td>GSSAPI</td><td></td><td>medium</td></tr><tr><td>security.protocol</td><td>用于与broker通讯的协议。  有效值为：PLAINTEXT，SSL，SASL_PLAINTEXT，SASL_SSL。</td><td>string</td><td>PLAINTEXT</td><td></td><td>medium</td></tr><tr><td>send.buffer.bytes</td><td>发送数据时要使用的TCP发送缓冲区（SO_SNDBUF）的大小。  如果值为-1，则将使用OS默认值。</td><td>int</td><td>131072</td><td>[-1,…]</td><td>medium</td></tr><tr><td>ssl.enabled.protocols</td><td>启用SSL连接的协议列表。</td><td>list</td><td>TLSv1.2,TLSv1.1,TLSv1</td><td></td><td>medium</td></tr><tr><td>ssl.keystore.type</td><td>key仓库文件的文件格式，客户端可选。</td><td>string</td><td>JKS</td><td></td><td>medium</td></tr><tr><td>ssl.protocol</td><td>用于生成SSLContext的SSL协议。  默认设置是TLS，这对大多数情况都是适用的。 最新的JVM中的允许值为TLS，TLSv1.1和TLSv1.2。  较旧的JVM可能支持SSL，SSLv2和SSLv3，但由于已知的安全漏洞，不建议使用SSL。</td><td>string</td><td>TLS</td><td></td><td>medium</td></tr><tr><td>ssl.provider</td><td>用于SSL连接的安全提供程序的名称。  默认值是JVM的默认安全提供程序。</td><td>string</td><td>null</td><td></td><td>medium</td></tr><tr><td>ssl.truststore.type</td><td>信任存储文件的文件格式。</td><td>string</td><td>JKS</td><td></td><td>medium</td></tr><tr><td>auto.commit.interval.ms</td><td>如果enable.auto.commit设置为true，则消费者偏移量自动提交给Kafka的频率（以毫秒为单位）。</td><td>int</td><td>5000</td><td>[0,…]</td><td>low</td></tr><tr><td>check.crcs</td><td>自动检查CRC32记录的消耗。  这样可以确保消息发生时不会在线或磁盘损坏。 此检查增加了一些开销，因此在寻求极致性能的情况下可能会被禁用。</td><td>boolean</td><td>TRUE</td><td></td><td>low</td></tr><tr><td>client.id</td><td>在发出请求时传递给服务器的id字符串。  这样做的目的是通过允许将逻辑应用程序名称包含在服务器端请求日志记录中，来跟踪ip/port的请求源。</td><td>string</td><td>“”</td><td></td><td>low</td></tr><tr><td>fetch.max.wait.ms</td><td>如果没有足够的数据满足fetch.min.bytes，服务器将在接收到提取请求之前阻止的最大时间。</td><td>int</td><td>500</td><td>[0,…]</td><td>low</td></tr><tr><td>interceptor.classes</td><td>用作拦截器的类的列表。  你可实现ConsumerInterceptor接口以允许拦截（也可能变化）消费者接收的记录。 默认情况下，没有拦截器。</td><td>list</td><td>null</td><td></td><td>low</td></tr><tr><td>metadata.max.age.ms</td><td>在一定时间段之后（以毫秒为单位的），强制更新元数据，即使没有任何分区领导变化，任何新的broker或分区。</td><td>long</td><td>300000</td><td>[0,…]</td><td>low</td></tr><tr><td>metric.reporters</td><td>用作度量记录员类的列表。实现MetricReporter接口以允许插入通知新的度量创建的类。JmxReporter始终包含在注册JMX统计信息中。</td><td>list</td><td>“”</td><td></td><td>low</td></tr><tr><td>metrics.num.samples</td><td>保持的样本数以计算度量。</td><td>int</td><td>2</td><td>[1,…]</td><td>low</td></tr><tr><td>metrics.recording.level</td><td>最高的记录级别。</td><td>string</td><td>INFO</td><td>[INFO,  DEBUG]</td><td>low</td></tr><tr><td>metrics.sample.window.ms</td><td>The  window of time a metrics sample is computed over.</td><td>long</td><td>30000</td><td>[0,…]</td><td>low</td></tr><tr><td>reconnect.backoff.ms</td><td>尝试重新连接指定主机之前等待的时间，避免频繁的连接主机，这种机制适用于消费者向broker发送的所有请求。</td><td>long</td><td>50</td><td>[0,…]</td><td>low</td></tr><tr><td>retry.backoff.ms</td><td>尝试重新发送失败的请求到指定topic分区之前的等待时间。避免在某些故障情况下，频繁的重复发送。</td><td>long</td><td>100</td><td>[0,…]</td><td>low</td></tr><tr><td>sasl.kerberos.kinit.cmd Kerberos</td><td>kinit命令路径。</td><td>string</td><td>/usr/bin/kinit</td><td></td><td>low</td></tr><tr><td>sasl.kerberos.min.time.before.relogin</td><td>尝试/恢复之间的登录线程的休眠时间。</td><td>long</td><td>60000</td><td></td><td>low</td></tr><tr><td>sasl.kerberos.ticket.renew.jitter</td><td>添加到更新时间的随机抖动百分比。</td><td>double</td><td>0.05</td><td></td><td>low</td></tr><tr><td>sasl.kerberos.ticket.renew.window.factor</td><td>登录线程将休眠，直到从上次刷新到ticket的指定的时间窗口因子到期，此时将尝试续订ticket。</td><td>double</td><td>0.8</td><td></td><td>low</td></tr><tr><td>ssl.cipher.suites</td><td>密码套件列表，用于TLS或SSL网络协议的安全设置，认证，加密，MAC和密钥交换算法的明明组合。默认情况下，支持所有可用的密码套件。</td><td>list</td><td>null</td><td></td><td>low</td></tr><tr><td>ssl.endpoint.identification.algorithm</td><td>使用服务器证书验证服务器主机名的端点识别算法。</td><td>string</td><td>null</td><td></td><td>low</td></tr><tr><td>ssl.keymanager.algorithm</td><td>密钥管理器工厂用于SSL连接的算法。  默认值是为Java虚拟机配置的密钥管理器工厂算法。</td><td>string</td><td>SunX509</td><td></td><td>low</td></tr><tr><td>ssl.secure.random.implementation</td><td>用于SSL加密操作的SecureRandom  PRNG实现。</td><td>string</td><td>null</td><td></td><td>low</td></tr><tr><td>ssl.trustmanager.algorithm</td><td>信任管理器工厂用于SSL连接的算法。  默认值是为Java虚拟机配置的信任管理器工厂算法。</td><td>string</td><td>PKIX</td><td></td><td>low</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="API" scheme="https://macongmc.github.io/categories/API/"/>
    
    
    <category term="kafka" scheme="https://macongmc.github.io/tags/kafka/"/>
    
    <category term="消息队列" scheme="https://macongmc.github.io/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
</feed>
